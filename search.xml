<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>三个月实习体会</title>
      <link href="2021/09/27/fieldwork1/"/>
      <url>2021/09/27/fieldwork1/</url>
      
        <content type="html"><![CDATA[<p>转眼到现在就已经三个多月了，本来我是想早点写这个实习体会的，但是由于最近比较忙也就没顾着写。到现在才写，不得不说，愈发的感觉自学跟工作是不一样的，工作会让你收获更多，但工作有很大的局限性，自学则没有限制。<span id="more"></span></p><h2 id="实习第一个月"><a href="#实习第一个月" class="headerlink" title="实习第一个月"></a>实习第一个月</h2><p>&nbsp;&nbsp;之前第一个月也写过一些体会，主要是刚入职场，虽然是实习生，但是也体会到了真实的职场，工作和在学校的不同。这种是不一样的，之前在上学的时候，也是暑假寒假去上班，赚点零花钱，但是那种生活是有盼头的，想着开学。现在不一样了，没有开学了，工作可能就是一辈子到头，有一点点的压迫感。之前刚开始租房一个人住的时候，感觉还是挺不舒服的，但是现在还好，至少自己独立了，就说这么多吧，至于其他的体会，可能我之前写的一个月实习体会可能会更真实一点。</p><h2 id="实习第二个月"><a href="#实习第二个月" class="headerlink" title="实习第二个月"></a>实习第二个月</h2><p>&nbsp;&nbsp;刚刚去翻了之前写的周报，才逐渐回想起来当时都干了什么，有些东西真的就是可能不记录下来就忘了，还有知识，所以大家也要做好笔记呀，第二个月前半个月比较闲，没啥事，摸鱼摸了半个月，偶尔一些小改动，不过工作量不大，一直在看react，后半个月，参与了react开发的项目，负责两个页面，组件库用的antd,感觉脱离了原生加jQuery，终于踏上了主流开发语言，之前也没自己独立负责过，现在自己单独写，发现其实还好，有很多东西，可能一眼看上去感觉很难，然后慢慢写，就发现其实没有那么难，遇到一个坎，想办法迈过去就是了，不过公司的业务逻辑还是比较复杂的，而且期间我遇到了一个react的坑，就是关于动态路由切换组件没有重新挂载的问题，最终解决了，我对组件进行了处理，将路径作为了它的key,最终解决了这个问题<code>export withRouter((props)=&gt;&lt;UserAccount &#123;...props&#125; key=&#123;props.location.pathname&#125;)</code>期间也会了不少其他的东西，例如本地mock开发，按照需求文档跟后端进行沟通调整接口数据等，如果不是工作，可能这些都不会用到。</p><h2 id="实习第三个月"><a href="#实习第三个月" class="headerlink" title="实习第三个月"></a>实习第三个月</h2><p>&nbsp;&nbsp;第三个月前半个月也在处理上个月的工作，配合后端进行测试，以及配合测试人员测试。后半个月，又去了另外一个部门帮忙，他们赶着上线，然后天天加班，天天加班，周六还加班。去的都是实习生，因为我jQuery还可以，所以，基本上是我带着几个实习生在做，很多组件什么的都写好了，只需要复用，再稍作修改，就可以了。不过成长也是很大的， 至少很多东西自己敢尝试了，之前一直按部就班，涉及的东西不太多。不过页面逻辑还是很复杂的，一个页面调用了19个接口，自己写的东西其实不是很多，就是封装了几个函数，写了一个组件，其他的都是复用之前的，或者组件稍作修改。成长很迅速，因为去的时候，我还要负责修改他们之前遗留的bug，之前遗留的还挺多，边写代码，边改bug,需求的话也不是很确定，基本上处于边开发，边修改，还有各种约束等，都是后期开发完之后又修改，反正挺麻烦的。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>&nbsp;&nbsp;这三个月还是挺不错的，中秋公司还发了月饼和小礼品，不过感觉以后工作不能找966，甚至995也不可以，因为虽然现在是965，但是也感觉自己的学习时间也不是很多，慢慢的就每天学习的时间就变少了，平时工作还好，一旦加班，真的是没时间学习了，只有周末可能会看几个小时的课，学些新东西。越来越适应职场的生活了。</p>]]></content>
      
      
      <categories>
          
          <category> 工作 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 实习体会 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于react富文本显示的需求问题</title>
      <link href="2021/08/29/react-needs1/"/>
      <url>2021/08/29/react-needs1/</url>
      
        <content type="html"><![CDATA[<p>关于react富文本显示的一个需求问题，是2021年8月27日遇到的一个难题，纠结了我一天<span id="more"></span></p><p>事情的详细内容是这样的，公司我们项目组的项目有PC端和移动端，PC端已经实现，我需要在移动端实现，其他都完成了，唯独在富文本表情显示方面出现了问题，后端返回的表情的地址为相对地址，虽说是一个后端问题，但是如果后端做改动的话，牵扯东西太多，还有很多历史数据需要改变，于是只能前端做相应调整。在PC端，存放的有表情的静态资源，在富文本显示的插件中对其路径做了一个匹配处理，强行改变了地址。在移动端，我对后端返回的路径也做了一个匹配处理，但是移动端我采用的是react自带的渲染富文本<code>&lt;div dangerouslySetInnerHTML=&#123;&#123;__html:this.state.article&#125;&#125;&gt;&lt;/div&gt;</code>。</p><p>先对后端返回的表情的格式做一个说明，格式固定，图片名为1~3位数字，后缀为gif。</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token property">"txt"</span><span class="token operator">:</span> <span class="token string">"&lt;img src="</span>./assets/images/<span class="token number">1</span>.gif<span class="token string">" />"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> 我按照路径进行匹配，写了以下这个函数</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 第一版</span><span class="token function-variable function">changeTxt</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> <span class="token punctuation">&#123;</span>txt<span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">;</span>  <span class="token keyword">return</span> txt<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">.\/assets\/images\/\d&#123;1,3&#125;.gif</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token parameter">match</span> <span class="token operator">=></span> <span class="token keyword">return</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token operator">+</span>match<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个函数解决了一部分问题，但没有解决全部问题，因为这样其实是在当前目录下进行的一个匹配，也就是说我需要在这个组件所在的地方创建一个assets文件夹，然后里面在建一个images文件夹之后放表情的静态资源，这样我外部的assets就和这个分开了，看着不美观，于是我尝试修改路径，把函数中match的路径修改到我公共的资源文件夹中，但是我发现我做不到，因为这样的话，我发现我跳上一级跳到了打包后的路径中，类似于下面代码所示，而此时浏览器弹出<code>Cannot find &#39;../../assets/images/1.gif&#39;.</code>,之后我点开了，看了一下，是那个map表中没有相对的路径，所以匹配不到。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">打包后的静态资源显示路径https:&#x2F;&#x2F;localhost:3000&#x2F;mg&#x2F;bu&#x2F;assets&#x2F;images&#x2F;1.gif当我对match做一个处理，讲match改为 ..&#x2F;assets&#x2F;images&#x2F;1.gif我发现打包后的路径就变成了下面这样https:&#x2F;&#x2F;localhost:3000&#x2F;mg&#x2F;assets&#x2F;images&#x2F;1.gif<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>但是这时，我尝试返回静态数据，写死，将函数改变一下，可以正常运行，我就很懵。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function-variable function">changeTxt</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> <span class="token punctuation">&#123;</span>txt<span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">;</span>  <span class="token keyword">return</span> txt<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">.\/assets\/images\/\d&#123;1,3&#125;.gif</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">/</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">/</span>assets<span class="token operator">/</span>images<span class="token operator">/</span><span class="token number">1.</span>gif<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>反复对照，最终我先交了第一版，后期再做调整。</p><p>目前思路，先对静态数据与动态数据如何匹配做一个了解，如果匹配模式一样，那为什么静态数据可以匹配到，做一个深入了解(之前光顾着对动态数据为什么匹配不到问题深入研究了)</p>]]></content>
      
      
      <categories>
          
          <category> 需求问题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> react </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于动态路由切换组件没有重新挂载</title>
      <link href="2021/08/25/react-bug1/"/>
      <url>2021/08/25/react-bug1/</url>
      
        <content type="html"><![CDATA[<p>2021年8月24日，开发公司的react H5项目，遇到了一个bug，关于动态路由切换组件没有重新挂载的问题<span id="more"></span></p><p>事情的原因是这样的，我开发一个页面，是一个培训平台的课程详情，然后页面上有关联的其他课程，我发现在在跳转的时候，路由改变了， 但是页面没刷新，换句话说，页面也刷新了，但是没有重新加载组件，即没有重新调用接口，从后台获取数据。</p><p>一开始，我以为当页面重新渲染时，会重新挂载组件，于是，我想到改变state，然后使页面重新渲染，借此重新调用接口，因为路由改变，即props中的location.path改变了，我在state中设置了一个key,记录path，但是后来发现行不通，因为重新渲染页面并不会重新调用接口，只有重新挂载组件才可以。</p><p>于是我开始想通过path的不同，然后给每个组件一个不同的key,重而将path不同的组件区分开，重新挂载组件，最后我想到了办法，(百度yyds!)在处理成路由组件的时候，对组件进行一个处理。即</p><p><code>export withRouter((props)=&gt;&lt;UserAccount &#123;...props&#125; key=&#123;props.location.pathname&#125;)</code></p><p>经过处理后，一旦路由改变，react就会意识到这是不同的组件，不会复用之前的组件，会重新挂载组件，解决了动态路由切换组件没有重新挂载的问题</p>]]></content>
      
      
      <categories>
          
          <category> 踩坑问题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> react </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jquery基础知识</title>
      <link href="2021/07/28/jquery/"/>
      <url>2021/07/28/jquery/</url>
      
        <content type="html"><![CDATA[<p>关于jquery的基础了解<span id="more"></span></p><h4 id="html"><a href="#html" class="headerlink" title="html"></a>html</h4><p>获取和设置</p><ul><li><p>回调函数, 参数(被选元素, 原始值)</p></li><li><p><code>$(&#39;p&#39;).html(&#39;hello jquery&#39;)</code>  设置或返回HTML的内容(包括HTML标记)</p></li><li><p><code>$(&#39;p&#39;).text(&#39;hello jquery&#39;)</code>  设置或返回元素的文本内容</p></li><li><p><code>$(&#39;p&#39;).val(&#39;hello jquery&#39;)</code>  设置或返回表单字段的值</p></li><li><p><code>$(&#39;p&#39;).attr(&#39;href&#39;)</code>  获取属性值</p></li></ul><p>添加</p><ul><li><code>$(&#39;p&#39;).append(&#39;hello&#39;)</code> 在被选元素的结尾插入内容</li><li><code>$(&#39;p&#39;).prepend(&#39;hello&#39;)</code>- 在被选元素的开头插入内容</li><li><code>$(&#39;p&#39;).before(&#39;&lt;b&gt;Hello&lt;/b&gt;&#39;)</code>在被选元素之前插入内容</li><li><code>$(&#39;p&#39;).after(&#39;&lt;b&gt;Hello&lt;/b&gt;&#39;)</code>在被选元素之后插入内容</li></ul><p>删除</p><ul><li><code>$(&#39;p&#39;).remove(&#39;.title&#39;)</code> 删除被选元素(及其子元素),可以添加JQuery选择器语法过滤</li><li><code>$(&#39;p&#39;).empty()</code> 从被选元素中删除子元素</li></ul><p>CSS类</p><ul><li><code>$(&#39;p, h2&#39;).addClass(&#39;title&#39;)</code>  添加类,可以选取多个元素</li><li><code>$(&#39;p, h2&#39;).removeClass(&#39;title&#39;)</code>  删除类,可以选取多个元素</li><li><code>$(&#39;p, h2&#39;).toggleClass(&#39;title&#39;)</code>  切换添加/删除类,可以选取多个元素</li></ul><p>css()</p><ul><li><code>$(&quot;p&quot;).css(&quot;background-color&quot;)</code> 返回被选元素的一个或多个样式属性</li><li><code>$(&quot;p&quot;).css(&quot;propertyname&quot;, &quot;value&quot;)</code> 设置一个被选元素的样式属性</li><li><code>$(&quot;p&quot;).css(&quot;propertyname&quot;:&quot;value&quot;,...)</code> 设置多个被选元素的样式属性</li></ul><p>尺寸</p><ul><li><code>$(&quot;#div1&quot;).width()|height() </code> 设置或返回元素的高度或宽度(不包括内外边距和边框)</li><li><code>$(&quot;#div1&quot;).innerWidth()|innerHeight() </code> 返回元素的高度或宽度(包括内边距)</li><li><code>$(&quot;#div1&quot;).outerWidth()|outerHeight() </code> 返回元素的高度或宽度(包括内边距和边框)</li><li><code>$(&quot;#div1&quot;).outerWidth(true)|outerHeight(true) </code> 返回元素的高度或宽度(包括内边距和边框和外边距)</li></ul><h4 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h4><p>可选的 speed 参数规定隐藏/显示的速度，可以取以下值：”slow”、”fast” 或毫秒。可选的 callback 参数是隐藏或显示完成后所执行的函数名称。</p><p>显示/隐藏</p><ul><li><code>$(this).hide(speed,callback)</code> 隐藏当前的 HTML 元素。</li><li><code>$(this).show(speed,callback)</code> 显示当前的 HTML 元素。</li><li><code>$(this).toggle(speed,callback)</code> 切换显示/隐藏当前的 HTML 元素。</li></ul><p>淡入/淡出</p><ul><li><code>$(this).fadeIn(speed,callback)</code> 淡入当前的 HTML 元素。</li><li><code>$(this).fadeOut(speed,callback)</code> 淡出当前的 HTML 元素。</li><li><code>$(this).fadeToggle(speed,callback)</code> 切换淡入/淡出当前的 HTML 元素。</li><li><code>$(this).fadeTo(speed,opacity,callback)</code> 允许渐变为给定的不透明度（值介于 0 与 1 ）。</li></ul><p>滑动</p><ul><li><code>$(selector).slideDown(speed,callback)</code> 向下滑动元素</li><li><code>$(selector).slideUp(speed,callback)</code> 向上滑动元素</li><li><code>$(selector).slideToggle(speed,callback)</code> 切换向上/向下滑动元素</li></ul><p>动画</p><ul><li><code>$(selector).animate(&#123;params&#125;,speed,callback)</code> 添加动画效果</li><li><code>$(selector).stop(stopAll,goToEnd)</code> 停止当前动画效果<ul><li>注:stop() 方法适用于所有 jQuery 效果函数，包括滑动、淡入淡出和自定义动画。</li></ul></li></ul><h4 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h4><p>祖先</p><ul><li><code>$(selector).parent()</code>  返回被选元素的直接父元素</li><li><code>$(selector).parents()</code>  返回被选元素的所有祖先元素</li><li><code>$(selector).parentsUntil(selector)</code>  返回两个元素之间的所有祖先元素</li></ul><p>后代</p><ul><li><code>$(selector).children()</code>  返回被选元素的所有直接子元素</li><li><code>$(selector).find(selector)</code>  返回被选元素中选择的所有后代元素</li></ul><p>同胞</p><ul><li><p><code>$(selector).siblings()</code>  返回被选元素的所有同胞元素</p></li><li><p><code>$(selector).next()</code>  返回被选元素的下一个同胞元素</p></li><li><p><code>$(selector).nextAll()</code>  返回被选元素的下面的所有同胞元素</p></li><li><p><code>$(selector).nextUntil(selector)</code>  返回两个给定参数中间的所有同胞元素</p></li><li><p><code>prev(), prevAll(), prevUntil()</code> 跟前面类似，但方向相反</p></li></ul><p>过滤</p><ul><li><p><code>$(selector).first()</code>  返回被选元素的首个元素。</p></li><li><p><code>$(selector).last()</code>  返回被选元素的最后一个元素。</p></li><li><p><code>$(selector).eq(index)</code>  返回被选元素中带有指定索引的元素。</p></li><li><p><code>$(selector).filter(&quot;.info&quot;)</code>  返回匹配的元素。</p></li><li><p><code>$(selector).not(&quot;.info&quot;)</code>  返回不匹配的元素。</p></li></ul><p>AJAX</p><ul><li><p><code>$(selector).load(URL,data,callback);</code> 从服务器加载返回数据，并放入到被选元素中。</p><ul><li>callback可选参数</li><li>responseTxt - 包含调用成功时的结果内容</li><li>statusTXT - 包含调用的状态     <code>&#39;success&#39;, &#39;error &#39;</code></li><li>xhr - 包含 XMLHttpRequest 对象 <code>status, statusText</code></li></ul></li><li><p><code>$.get(URL,callback);</code> 发送get请求</p></li><li><p><code>$.get(URL,data,callback);</code> 发送post请求</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jquery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一个月实习体会</title>
      <link href="2021/07/14/fieldwork/"/>
      <url>2021/07/14/fieldwork/</url>
      
        <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;算是我程序员生涯中第一个月的工作体会和总结吧。<span id="more"></span>到今天就刚刚好一个月吧，不过说起来变化也挺大的，期间因为学校有一些事情也请了一些假，但是还好，总共应该算是上了20天班不到，但是成长还是挺多的。</p><h4 id="实习第一周"><a href="#实习第一周" class="headerlink" title="实习第一周"></a>实习第一周</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;亚信分配的都有导师，我的导师就是面试我的那位，然后，第一天，给我配置了环境，拉了公司的项目，让我自己看，然后给我讲了大概的划分（应该有四句话），之后开始看代码的生活，到了公司之后才发现，真实的项目结构跟自己写的那些小项目是很不一样的，入口文件我都找不到在哪里，/(ㄒoㄒ)/~~，但是顺着老师的划分，我慢慢开始看，就慢慢开始懂了，真实项目的量级很大，而且老项目还兼容ie，用的是我不太熟悉的jQuery，先复习了下jQuery，之后，发现好多都是组件，就慢慢开始梳洗每个页面的结构，从一个页面一个页面来看，大致的了解下，之后，对项目又开始整体的了解，就明白了项目的划分。这段时间用了3天半不到，第一天入职花了挺多时间的，第一周就这样结束了。</p><h4 id="实习第二周"><a href="#实习第二周" class="headerlink" title="实习第二周"></a>实习第二周</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这周也是上了四天，星期一学校有实训，我去了一天，周二才上班，这天，老师给了我需求文档，让我开始对照着需求文档，开始在本地进行相应的更改，于是，这两天，我开始改代码，改完代码之后，我对项目一些页面的结构更加熟悉了，但是有好多都不知道如何更改，因为没有跟后端对接，只是自己尝试着本地更改，本来周四周五就应该开发了，但是，我的云卓面还没申请下来，所以，就往后耽搁了，同时，我也在自学react，之前学习了一部分，上班的时候，正好再学学。第二周也结束了。</p><h4 id="实习第三周"><a href="#实习第三周" class="headerlink" title="实习第三周"></a>实习第三周</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;云桌面和git账号回来了，开始改代码，之前公司我们项目组，我就认识老师和项目经理以及我旁边的前端，参与开发后，好家伙，直接加了很多微信，一个需求，一个测试，三个后端，一个产品，这个时候，需要本地联调，没有错误之后，才能发测试，这时，才对服务代理了解的更深入，在此期间也对git算是有了更多的了解，同时，对于开发时，判断是前端问题还是后端问题有了清晰的认知，也稍微能向别人正确的表达出自己想说的意思，本周我程序员生涯的第一个需求就提交了。</p><h4 id="实习第四周"><a href="#实习第四周" class="headerlink" title="实习第四周"></a>实习第四周</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这周开始有新的需求在开发，同时，慢慢更适应了这个工作环境，没需求的时候，还是挺闲的，就自己在学react，周五，上周提的代码快该上线了，重新看下有没有什么错误，自己再测试下，果然还是发现了一个bug, 由于三元式产生的bug,默认0时跳到第二个选项类似<code>var a = 0; a?a:&#39;&#39;</code>输出的则是空字符串，并不是0，当时，没考虑到，导致传参有点问题，不过这个问题在周五解决了，但是，同时由于需求文档当时很多东西没有涉及到，做的不太全面，导致很多东西没改，测试的时候才发现不对，就这样，我迎来了我第一次加班，周六加了一天班，周六的时候，上午我跟后端对了一些接口，测了一些数据，之后我又复测了一遍，我写的代码，发现没有错误之后，就很无聊了，可是通知了加一天班，于是，我还是下午去了公司，开始学起了react，第四周就这样结束了。</p><h4 id="实习第五周"><a href="#实习第五周" class="headerlink" title="实习第五周"></a>实习第五周</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;按理说，第四周就差不多一个月了，可惜还有第五周，到周三才一个月，之前我们项目组，不加我，三个前端，后来，两个跑到其他项目了，我们项目好像目前就我和我老师，周一，由于上个需求，后端有很多没有更改，我就在配合测试，同时，慢慢的写其他需求，周三，老师请假了，项目组就剩我一个前端了，很难受，一天很忙，把上线出现的bug，赶紧修复了，之后，又把老师负责的哪一方面看看，不愧是老师，测试发的bug表上基本上都是后端的问题，前端的基本没有，除了有些分歧，找产品又进行了确认，协商之后又做了一些改动。</p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;实习给人的变化还是很大的，现在想起来，自己写的一些项目，虽然用到了很多东西，但是同时也考虑的很不全面，很浅显，同时，量级也远远达不到真实项目，也涉及不到协同开发时候的一些问题，主要是，明白了自己改如何参与到一个真实项目中，同时，明白出了什么问题，主要是在哪方面出了问题。但是，与此同时，也发现了，在上班之后，自己的实战经验增长的还可以，但是关于一些公司用不到的技术，或者自己想了解的其他东西， 这些学习的进度就比较慢了，加油吧！自己一定可以的。</p>]]></content>
      
      
      <categories>
          
          <category> 工作 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 实习体会 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>react脚手架配置代理跨域</title>
      <link href="2021/07/06/react-proxy/"/>
      <url>2021/07/06/react-proxy/</url>
      
        <content type="html"><![CDATA[<p>关于React脚手架配置代理跨域的方法<span id="more"></span></p><p>相关内容 <code>react</code>、<code>axios</code>、<code>http-proxy-middleware</code></p><p>问题：前端如何处理跨域问题。</p><p>接口：<code>http://localhost:8992/web/item</code></p><p>前端处理</p><ul><li>首先下载插件 <code>http-proxy-middleware</code> 和 <code>axios</code></li></ul><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">npm i axios http-proxy-middleware<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>配置</p><ul><li>setupProxy.js</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> proxy <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'http-proxy-middleware'</span><span class="token punctuation">)</span>module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">app</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>    <span class="token function">proxy</span><span class="token punctuation">(</span><span class="token string">'/api'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>      target<span class="token operator">:</span> <span class="token string">'http://localhost:8992'</span><span class="token punctuation">,</span>      changeOrigin<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>      pathRewrite<span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token string">'^/api'</span><span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>App内</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function-variable function">getStudentData</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'http://localhost:3000/api/students'</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token parameter">err</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> react </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 代理跨域 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>react学习笔记</title>
      <link href="2021/06/10/react/"/>
      <url>2021/06/10/react/</url>
      
        <content type="html"><![CDATA[<p>关于React的一些学习笔记<span id="more"></span></p><h3 id="1-React入门"><a href="#1-React入门" class="headerlink" title="1.React入门"></a>1.React入门</h3><h4 id="1-1-React的基本使用"><a href="#1-1-React的基本使用" class="headerlink" title="1.1 React的基本使用"></a>1.1 React的基本使用</h4><ul><li>React是一个将数据渲染为HTML视图的开源javascript库</li></ul><p>React的特点</p><ul><li><p>采用组件化模式、声明式编码，提高开发效率及组件复用率。</p></li><li><p>在React Native中可以使用React语法进行移动端开发。</p></li><li><p>使用虚拟DOM+优秀的Diffing算法，尽量减少与真实DOM的交互。</p></li><li><p>关于虚拟DOM</p><ul><li>本质是Object类型的对象(一般对象)</li><li>虚拟DOM比较”轻”，真实DOM比较”重”,因为虚拟DOM是React内部在用,无需真实DOM上那么多的属性.</li><li>虚拟DOM最终会被React转化为真实DOM,呈现在浏览器上.</li><li>虚拟DOM将命令式编程转化为声明式编程</li></ul></li></ul><h4 id="1-2-React-JSX"><a href="#1-2-React-JSX" class="headerlink" title="1.2 React JSX"></a>1.2 React JSX</h4><p><code>jsx</code>是原生<code>js</code>的语法糖，减去了繁琐的操作DOM元素</p><p>关于<code>jsx</code></p><ul><li>全称为<code>JavaScript XML</code></li><li>React定义的一种类似XML的JS扩展语法: JS + XML</li><li>作用:用来简化创建虚拟DOM<ul><li>写法: <code>var foo = &lt;h1&gt;Hello JSX&lt;h1&gt;</code></li><li>注: 它不是字符串,也不是HTML/XML标签,最终生成一个JS对象</li></ul></li></ul><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">JSX的语法规则1.定义虚拟DOM时,不能写引号2.标签中混入JS表达式要用()3.样式类的添加,要用className4.内联样式,要使用style&#x3D;&#123;&#123;kay: &#39;value&#39;&#125;&#125;的形式5.只有一个根标签6.标签必须闭合7.标签首字母    小写字母会被当做html同名元素,若没有,则报错    大写字母会被当做相应组件名,若没有定义相应组件,则报错<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1-3-类组件和函数式组件"><a href="#1-3-类组件和函数式组件" class="headerlink" title="1.3 类组件和函数式组件"></a>1.3 类组件和函数式组件</h4><ul><li><p>setState</p><ul><li>setState是异步操作，我们并不能直接拿到最新的state<ul><li>获取多个更新，批量更新，然后render，提高性能</li><li>如果同步了state，但是还没有执行render函数，就会导致state跟props不同步的问题</li></ul></li><li>获得最新的state<ul><li>在componentDidUpdate中获取state</li><li>在setState的回调函数中获取state</li></ul></li><li>异步的情况<ul><li>组件生命周期中</li><li>React合成事件中</li></ul></li><li>同步的情况<ul><li>将setState放到定时器中</li><li>在原生DOM事件中</li></ul></li><li>setState合并<ul><li><code>&#123;&#125;对象</code> =&gt; 批处理</li><li><code>(prevState, props) =&gt; &#123;return &#123;&#125;&#125;</code> =&gt; 累加处理</li></ul></li></ul></li><li><p>React的更新机制</p><ul><li><code>props和state改变</code> =&gt; <code>重新执行render函数</code> =&gt; <code>生成新的虚拟DOM树</code> =&gt; <code>新旧DOM树进行diff</code> =&gt; <code>计算出差异进行更新</code> =&gt; <code>更新到真实DOM树</code></li></ul></li></ul><h5 id="类组件"><a href="#类组件" class="headerlink" title="类组件"></a>类组件</h5><ul><li><p>类组件的特点</p><ul><li>组件的名称必须大写字母开头(无论类组件还是函数式组件)</li><li>类组件需要继承自React.Component</li><li>类组件必须实现render函数</li></ul></li><li><p>render函数被调用时，它会检查this.props和this.state的变化并返回以下类型之一：</p><ul><li>React元素</li><li>数组或fragments: 返回多个元素</li><li>Protals: 可以渲染子节点到不同的DOM子树中</li><li>字符串或数值类型: 在DOM树中会被渲染成文本节点</li><li>布尔类型或者null: 不显示</li></ul></li><li><p>constructor</p><ul><li>初始化state</li><li>为事件绑定this</li></ul></li><li><p>componentDidMount</p><ul><li>网络请求</li><li>订阅 (需要在componentWillUnmount取消)</li></ul></li><li><p>componentDidUpdate</p><ul><li>props和state发生变化后出发该事件</li></ul></li><li><p>componentWillUnmount</p><ul><li>消除定时器,取消网络请求,取消订阅</li></ul></li><li><p>ref</p></li></ul><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>titleRef <span class="token operator">=</span> <span class="token function">createRef</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>titleEl <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>homeRef <span class="token operator">=</span> <span class="token function">createRef</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>  <span class="token punctuation">&#123;</span><span class="token comment">/* 字符串 不推荐 */</span><span class="token punctuation">&#125;</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>titleRef<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token plain-text">Hello React</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>  <span class="token punctuation">&#123;</span><span class="token comment">/* React 目前支持的方式 */</span><span class="token punctuation">&#125;</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span> <span class="token attr-name">ref</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>titleRef<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">Hello React</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>  <span class="token punctuation">&#123;</span><span class="token comment">/*       回调函数 */</span><span class="token punctuation">&#125;</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span> <span class="token attr-name">ref</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token parameter">args</span> <span class="token operator">=></span> <span class="token keyword">this</span><span class="token punctuation">.</span>titleEl <span class="token operator">=</span> args<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">Hello React</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>  <span class="token comment">// 使用方式1 字符串 (不推荐)</span>  <span class="token comment">// this.refs.titleRef.innerHTML = 'Hello Coderwhy';</span>  <span class="token comment">// 使用方式2 对象</span>  <span class="token comment">// this.titleRef.current.innerHTML = 'Hello Coderwhy';</span>  <span class="token comment">// 使用方式3 回调函数</span>  <span class="token comment">// this.titleEl.innerHTML = 'Hello TypeScript'</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="函数式组件"><a href="#函数式组件" class="headerlink" title="函数式组件"></a>函数式组件</h5><ul><li>函数式组件的特点<ul><li>没有this对象</li><li>没有内部的状态(hooks)</li><li>没有生命周期</li></ul></li></ul><h4 id="1-4-React-性能优化"><a href="#1-4-React-性能优化" class="headerlink" title="1.4 React 性能优化"></a>1.4 React 性能优化</h4><ul><li>列表中key的作用<ul><li>因为diff算法是按位置进行比对的,所以key的作用,防止因位置改变而造成多余的更新</li></ul></li></ul><h4 id="1-5-严格模式-StrictMode"><a href="#1-5-严格模式-StrictMode" class="headerlink" title="1.5 严格模式 StrictMode"></a>1.5 严格模式 StrictMode</h4><ul><li>1.识别不安全的生命周期</li><li>2.使用过时的ref API</li><li>3.检查意外的副作用<ul><li>这个组件的constructor会被调用两次</li><li>这是严格模式下的故意操作,查看在这里写的一些逻辑代码被调用多次时,是否会产生一些副作用</li><li>在生产环境中,是不会调用两次的</li></ul></li><li>4.使用废弃的findDOMNode方法</li><li>5.检验过时的context API</li></ul><h4 id="todoList案例"><a href="#todoList案例" class="headerlink" title="todoList案例"></a>todoList案例</h4><p>github: <a href="https://github.com/chichisky/react_todo">todoList小案例</a></p><ul><li>相关知识点<ul><li>拆分组件、实现静态组件</li><li>动态初始化列表，如何确定将数据放哪个组件的state中<ul><li>某个组件使用：其自身state中</li><li>某些组件使用：其共同父组件state中</li></ul></li><li>关于父子组件之间通信：<ul><li>父组件 =&gt; 子组件：通过props传递</li><li>子组件 =&gt; 父组件：通过props传递，需要父提前给子传递一个函数</li></ul></li><li>注意defaultChecked 和 checked 的区别， 类似的还有：defaultValue和value</li><li>状态在哪里，操作状态的方法就在哪里</li></ul></li></ul><h4 id="兄弟组件通信-消息订阅与发布"><a href="#兄弟组件通信-消息订阅与发布" class="headerlink" title="兄弟组件通信 消息订阅与发布"></a>兄弟组件通信 消息订阅与发布</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">npm i pubsub-js<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>引入</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// ES6</span><span class="token keyword">import</span> PubSub <span class="token keyword">from</span> <span class="token string">'pubsub-js'</span><span class="token comment">// CMD</span><span class="token keyword">const</span> PubSub <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'pubsub-js'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 订阅消息，获得数据</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  PubSub<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token string">'MY_TOPIC'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>msg<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span><span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">// 发布消息,传递数据</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  PubSub<span class="token punctuation">.</span><span class="token function">publish</span><span class="token punctuation">(</span><span class="token string">'MY_TOPIC'</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>events</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">yarn add events<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span>EventEmitter<span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'events'</span><span class="token keyword">const</span> eventBus <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EventEmitter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>eventBus<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">'sayHello'</span><span class="token punctuation">,</span> <span class="token string">'Hello Home'</span><span class="token punctuation">,</span> <span class="token number">123</span><span class="token punctuation">)</span> <span class="token comment">// 发布事件</span><span class="token comment">// 订阅事件</span><span class="token function">componentDidMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  eventBus<span class="token punctuation">.</span><span class="token function">addListener</span><span class="token punctuation">(</span><span class="token string">'sayHello'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>handleSayHelloListener<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">// 取消订阅事件</span><span class="token function">componentWillUnmount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  eventBus<span class="token punctuation">.</span><span class="token function">removeListener</span><span class="token punctuation">(</span><span class="token string">'sayHello'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="react-router-dom"><a href="#react-router-dom" class="headerlink" title="react-router-dom"></a>react-router-dom</h4><ul><li>HashRouter刷新会导致state的丢失</li></ul><h3 id="Fetch"><a href="#Fetch" class="headerlink" title="Fetch"></a>Fetch</h3><ul><li><p>Fetch是AJAX的替换方案，基于Primise设计,很好的进行了关注分离</p></li><li><p>缺点:</p><ul><li>Fetch是一个low-level(底层)的API, 没有封装好各种各样的功能和实现.</li><li>比如发送网络请求需要自己来配置Header的Content-Type,不会默认携带cookie等</li><li>比如错误处理相对麻烦(只有网络错误才会reject,HTTP状态码404或者500不会标记为reject)</li><li>比如不支持取消一个请求,不能查看一个请求的进度等等</li></ul></li></ul><h3 id="react-transition-group"><a href="#react-transition-group" class="headerlink" title="react-transition-group"></a>react-transition-group</h3>]]></content>
      
      
      <categories>
          
          <category> react </category>
          
      </categories>
      
      
        <tags>
            
            <tag> react </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于路由的两种状态</title>
      <link href="2021/06/09/vue-needs1/"/>
      <url>2021/06/09/vue-needs1/</url>
      
        <content type="html"><![CDATA[<p>2021年6月8日，今天参加了亚信的电话面试，问道我关于前端路由的两种方式，还提示了我#号，但是，当时没往这边面想，之后面试结束，才想到可能是这个，可能是之前没在意，今天总结一下，这两种方式的区别及作用，可能不太完善<span id="more"></span></p><p>前端路由分为<code>hash</code>和<code>history</code>两种路由状态</p><p>hash指的是<code>url</code>后面的尾巴会带#号，可以兼容到IE8，<code>hash</code>会触发<code>hashchange</code>事件(只会改变#后面的<code>url</code>片段)，虽然hash路径出现在URL中，但是不会出现在HTTP请求中，对后端没有影响，不会重新加载页面。</p><p>history则是不带#号，可以兼容到IE10，比hash模式外观好看，但是前端的URL必须和后端发起请求的URL一直，否则会导致404，需要后端配合处理。</p><p>history具有以下几种方法</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">history<span class="token punctuation">.</span><span class="token function">pushState</span><span class="token punctuation">(</span><span class="token punctuation">)</span>history<span class="token punctuation">.</span><span class="token function">replaceState</span><span class="token punctuation">(</span><span class="token punctuation">)</span>history<span class="token punctuation">.</span><span class="token function">go</span><span class="token punctuation">(</span><span class="token punctuation">)</span>history<span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span><span class="token punctuation">)</span>history<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 面试收获 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hash和history </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue中v-bind:src,图片无法正常显示</title>
      <link href="2021/06/07/vue-bug1/"/>
      <url>2021/06/07/vue-bug1/</url>
      
        <content type="html"><![CDATA[<p>2021年6月7号，自己没事敲点代码，准备激发激发灵感，做一个好项目，顺便复习下vue, 发现当我在data中模拟json数据的时候，图片链接在页面上无法正常显示<span id="more"></span></p><p>用了各种方法，都无法正常使用，最后上网才发现是需要引入的问题。</p><p>附上代码</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">&#x2F;&#x2F; template&lt;img :src&#x3D;&quot;imgLink&quot; alt&#x3D;&quot;&quot;&gt;&#x2F;&#x2F; scriptdata () &#123;    return &#123;    &#x2F;&#x2F; 注：引入之后，相对路径及绝对路径均可以使用      imgLink: require(&quot;..&#x2F;..&#x2F;assets&#x2F;img&#x2F;home&#x2F;recommend_bg.jpg&quot;)      &#125;&#125;,<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 踩坑问题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于tabbar的一个需求</title>
      <link href="2021/06/04/tabbar/"/>
      <url>2021/06/04/tabbar/</url>
      
        <content type="html"><![CDATA[<p>2021年6月4号的面试，去了直接配了一个vue项目，完成需求，最后一个需求，tabbar每隔一分钟跳转一次路由,跳转到当前路由的时候，打印出当前路由的名称及上个路由所剩的时间<span id="more"></span></p><p>总共可细分为3个小需求</p><ul><li>打印当前路由</li><li>每隔一分钟跳转路由</li><li>打印上个路由所剩的时间</li></ul><p>打印当前路由</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 利用全局守卫可以完成</span>router<span class="token punctuation">.</span><span class="token function">beforeEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span> <span class="token keyword">from</span><span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token comment">/*to and from are Route Object,next() must be called to resolve the hook */</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>to<span class="token punctuation">.</span>name <span class="token operator">!=</span> <span class="token keyword">from</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>to<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>每隔一分钟跳转一次路由</p><ul><li>这里写的比较简陋，想法不知道对不对，但是基本实现了，在创建组件的时候执行一个函数，该函数60秒后自动跳转到下个路由</li></ul><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;script&gt;export default &#123;  methods: &#123;    Jump() &#123;      setTimeout(()&#x3D;&gt; &#123;        this.$router.push(&#39;&#x2F;category&#39;)      &#125;,60000)    &#125;  &#125;,  created () &#123;    this.Jump();  &#125;&#125;&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>打印上个路由剩下的时间</p><p><code>store.js</code></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">new</span> <span class="token class-name">Vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  <span class="token comment">// 定义了两个全局变量，一个是时间戳，另一个是当前路由，初始值为'/home'</span>  state<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    currentTime<span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span>    addRoute<span class="token operator">:</span> <span class="token string">'/home'</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token comment">// 定义了两个方法，一个用来获取时间戳，改变state.currentTime</span>  <span class="token comment">// 另一个用来获取当前的路由</span>  mutations<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token function">default_time</span> <span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      state<span class="token punctuation">.</span>currentTime <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span> <span class="token keyword">new</span> <span class="token class-name">Date</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">1000</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token function">updateRoute</span><span class="token punctuation">(</span><span class="token parameter">state<span class="token punctuation">,</span> payload</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      state<span class="token punctuation">.</span>addRoute <span class="token operator">=</span> payload<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>router.js</code></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">router<span class="token punctuation">.</span><span class="token function">beforeEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span> <span class="token keyword">from</span><span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token comment">/*to and from are Route Object,next() must be called to resolve the hook */</span>  <span class="token comment">// 判断的当前路由是否等于要去的路由，如果不想等，则获得当前的时间戳，打印剩余时间</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>store<span class="token punctuation">.</span>state<span class="token punctuation">.</span>addRoute <span class="token operator">!=</span> to<span class="token punctuation">.</span>path<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> currentTime <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">1000</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">60</span> <span class="token operator">-</span> currentTime <span class="token operator">+</span> store<span class="token punctuation">.</span>state<span class="token punctuation">.</span>currentTime<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 更新当前路由</span>  store<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">'updateRoute'</span><span class="token punctuation">,</span> to<span class="token punctuation">.</span>path<span class="token punctuation">)</span>  <span class="token comment">// 打印当前路由名称，及重新赋值全局的时间戳。</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>to<span class="token punctuation">.</span>name <span class="token operator">!==</span> <span class="token keyword">from</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>to<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    store<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">'default_time'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 需求问题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试时遇到的关于tabbar的一个需求 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于一些npm包的使用</title>
      <link href="2021/05/22/npm/"/>
      <url>2021/05/22/npm/</url>
      
        <content type="html"><![CDATA[<p>关于一些npm包的使用<span id="more"></span></p><h1 id="关于一些npm包的使用"><a href="#关于一些npm包的使用" class="headerlink" title="关于一些npm包的使用"></a>关于一些npm包的使用</h1><table><thead><tr><th align="center">下载方式</th><th align="center">作用</th><th align="center">所属范围</th></tr></thead><tbody><tr><td align="center">npm i bcrypt</td><td align="center">散列加密、不可逆</td><td align="center">后端</td></tr><tr><td align="center">npm i vue2-editor</td><td align="center">富文本编辑</td><td align="center">前端</td></tr><tr><td align="center">npm i cors</td><td align="center">处理跨域问题</td><td align="center">后端</td></tr><tr><td align="center">npm i inflection</td><td align="center">转化大小写，单复数形式</td><td align="center">后端</td></tr><tr><td align="center">npm i multer</td><td align="center">服务器处理客户端上传的图片</td><td align="center">后端</td></tr><tr><td align="center">npm i jsonwebtoken</td><td align="center">生成token</td><td align="center">后端</td></tr><tr><td align="center">npm i http-assert</td><td align="center">验证错误处理</td><td align="center">后端</td></tr><tr><td align="center">npm i vue-awesome-swiper -s</td><td align="center">轮播图</td><td align="center">前端</td></tr><tr><td align="center">npm i <a href="mailto:&#115;&#119;&#105;&#x70;&#101;&#114;&#64;&#53;&#x2e;&#x34;&#x2e;&#53;">&#115;&#119;&#105;&#x70;&#101;&#114;&#64;&#53;&#x2e;&#x34;&#x2e;&#53;</a> -s</td><td align="center">样式 swiper.css</td><td align="center">前端</td></tr><tr><td align="center">npm i node-sass sass-loader -D</td><td align="center">scss样式</td><td align="center">前端</td></tr><tr><td align="center">npm i require-all</td><td align="center">引用文件夹内的所有文件</td><td align="center">后端</td></tr></tbody></table><h2 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h2><h3 id="vue2-editorv"><a href="#vue2-editorv" class="headerlink" title="vue2-editorv"></a>vue2-editorv</h3><ul><li>全局使用</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">"vue"</span><span class="token punctuation">;</span><span class="token keyword">import</span> Vue2Editor <span class="token keyword">from</span> <span class="token string">"vue2-editor"</span><span class="token punctuation">;</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Vue2Editor<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>局部使用</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 基本使用</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> VueEditor <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"vue2-editor"</span><span class="token punctuation">;</span><span class="token comment">// 自定义使用</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> VueEditor<span class="token punctuation">,</span> Quill <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"vue2-editor"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>实例</li></ul><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">&#x2F;&#x2F; template中&lt;vue-editor useCustomImageHandler @image-added&#x3D;&quot;handleImageAdded&quot; v-model&#x3D;&quot;model.body&quot;&gt;&lt;&#x2F;vue-editor&gt;&#x2F;&#x2F; method中handleImageAdded: async function(file, Editor, cursorLocation, resetUploader) &#123;      &#x2F;&#x2F; An example of using FormData      &#x2F;&#x2F; NOTE: Your key could be different such as:      &#x2F;&#x2F; formData.append(&#39;file&#39;, file)       const formData &#x3D; new FormData();      formData.append(&quot;file&quot;, file);&#x2F;&#x2F; 上传至服务器      const res &#x3D; await this.$http.post(&#39;upload&#39;, formData);      &#x2F;&#x2F; 接收图片的超链接      Editor.insertEmbed(cursorLocation, &quot;image&quot;, res.data.url);      resetUploader();&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="vue-awesome-swiper"><a href="#vue-awesome-swiper" class="headerlink" title="vue-awesome-swiper"></a>vue-awesome-swiper</h3><ul><li>引入</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> VueAwesomeSwiper <span class="token keyword">from</span> <span class="token string">'vue-awesome-swiper'</span><span class="token keyword">import</span> <span class="token string">'swiper/css/swiper.css'</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>VueAwesomeSwiper<span class="token punctuation">,</span> <span class="token comment">/* &#123; default global options &#125; */</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>使用</li></ul><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;&lt;div&gt;    &lt;!-- start of swiper --&gt;    &lt;swiper :options&#x3D;&quot;swiperOption&quot;&gt;      &lt;swiper-slide&gt;      ...      &lt;&#x2F;swiper-slide&gt;      &lt;div        class&#x3D;&quot;swiper-pagination pagination-home text-right pr-3 pb-2&quot;        slot&#x3D;&quot;pagination&quot;      &gt;&lt;&#x2F;div&gt;    &lt;&#x2F;swiper&gt;    &lt;!-- end of swiper --&gt;  &lt;&#x2F;div&gt;&lt;&#x2F;template&gt;&lt;script&gt;export default &#123;  data() &#123;    return &#123;      swiperOption: &#123;        &#x2F;&#x2F; 轮播按钮        pagination: &#123;          el: &quot;.pagination-home&quot;,        &#125;,        &#x2F;&#x2F; 是否自动轮播        autoplay: &#123;          disableOnInteraction: false,          delay: 2000,        &#125;,      &#125;    &#125;&#125;,&#125;&lt;&#x2F;script&gt;&lt;style&gt;&#x2F;&#x2F; 轮播图样式.pagination-home &#123;  .swiper-pagination-bullet &#123;    opacity: 1;    background-color: #fff;    border-radius: 0.1538rem;    &amp;.swiper-pagination-bullet-active &#123;      background-color: map-get($map: $colors, $key: &quot;info&quot;);    &#125;  &#125;&#125;&lt;&#x2F;style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;div class&#x3D;&quot;card-body pt-3&quot;&gt;  &lt;div class&#x3D;&quot;nav jc-between&quot;&gt;    &lt;div class&#x3D;&quot;nav-item&quot;          :class&#x3D;&quot;&#123;active: active &#x3D;&#x3D;&#x3D; i&#125;&quot;          v-for&#x3D;&quot;(item, i) in categories&quot;          :key&#x3D;&quot;i&quot;         &lt;!-- 设置点击事件到轮播页面 --&gt;         @click&#x3D;&quot;active &#x3D; i, $refs.news_list.$swiper.slideTo(i)&quot;&gt;      &lt;div class&#x3D;&quot;nav-link&quot;&gt;&#123;&#123;item.name&#125;&#125;&lt;&#x2F;div&gt;    &lt;&#x2F;div&gt;  &lt;&#x2F;div&gt;  &lt;div class&#x3D;&quot;pt-3&quot;&gt;    &lt;swiper ref&#x3D;&quot;news_list&quot; :options&#x3D; &quot;&#123;autoHeight: true&#125;&quot;            &lt;!--设置轮播页面改变导航效果显示--&gt;            @slide-change&#x3D;&quot;() &#x3D;&gt; active &#x3D; $refs.news_list.$swiper.realIndex&quot;&gt;      &lt;swiper-slide v-for&#x3D;&quot;(item, i) in categories&quot; :key&#x3D;&quot;i&quot;&gt;        &lt;slot name&#x3D;&quot;cardList&quot; :category&#x3D;&quot;item&quot;&gt;&lt;&#x2F;slot&gt;      &lt;&#x2F;swiper-slide&gt;    &lt;&#x2F;swiper&gt;  &lt;&#x2F;div&gt;&lt;&#x2F;div&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="swiper"><a href="#swiper" class="headerlink" title="swiper"></a>swiper</h3><ul><li>轮播图的样式，配合vue-awesome-swiper使用</li></ul><h2 id="后端"><a href="#后端" class="headerlink" title="后端"></a>后端</h2><h3 id="Bcrypt"><a href="#Bcrypt" class="headerlink" title="Bcrypt"></a>Bcrypt</h3><p>单向Hash加密算法，类似Pbkdf2算法 不可反向破解生成明文。</p><p>Bcrypt有四个变量：</p><ol><li>saltRounds: 正数，代表hash杂凑次数，数值越高越安全，默认10次。</li><li>myPassword: 明文密码字符串。</li><li>salt: 盐，一个128bits随机字符串，22字符</li><li>myHash: 经过明文密码password和盐salt进行hash，个人的理解是默认10次下 ，循环加盐hash10次，得到myHash</li></ol><p>每次明文字符串myPassword过来，就通过10次循环加盐salt加密后得到myHash, 然后拼接BCrypt版本号+salt盐+myHash等到最终的bcrypt密码 ，存入数据库中。<br> 这样同一个密码，每次登录都可以根据自省业务需要生成不同的myHash, myHash中包含了版本和salt，存入数据库。</p><ul><li>使用</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 定义分类数据模型，并加密</span><span class="token keyword">const</span> Schema <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">mongoose<span class="token punctuation">.</span>Schema</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  username<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    type<span class="token operator">:</span> String  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  password<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    type<span class="token operator">:</span> String<span class="token punctuation">,</span>    select<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">// 如果用了select， 则默认在查询表的时候，忽略该属性</span>    <span class="token function">set</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'bcryptjs'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hashSync</span><span class="token punctuation">(</span>val<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">// 上述用了select：false，故想要查询密码需要添加.select('+password');</span><span class="token keyword">const</span> user <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'../../models/AdminUser'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">findOne</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>username<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string">'+password'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 比较密码，返回一个布尔值</span><span class="token keyword">const</span> isValid <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'bcryptjs'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">compareSync</span><span class="token punctuation">(</span>password<span class="token punctuation">,</span> user<span class="token punctuation">.</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="cors"><a href="#cors" class="headerlink" title="cors"></a>cors</h3><ul><li>引入模块</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> cors <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'cors'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>使用模块</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>express<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'cors'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="inflection"><a href="#inflection" class="headerlink" title="inflection"></a>inflection</h3><p>作用：用于通用接口的构建</p><ul><li>使用</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">'/admin/api/rest/:resource'</span><span class="token punctuation">,</span>           <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'../../middleware/auth'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>           <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'../../middleware/resource'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>           router<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//middleware/resource.js</span>module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token parameter">options</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 转换名词单复数</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> modelName <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'inflection'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">classify</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>params<span class="token punctuation">.</span>resource<span class="token punctuation">)</span><span class="token punctuation">;</span>    req<span class="token punctuation">.</span>Model <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">../models/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>modelName<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="multer"><a href="#multer" class="headerlink" title="multer"></a>multer</h3><ul><li><p>服务器处理客户端上传的图片</p></li><li><p>使用</p></li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 上传图片接口</span><span class="token comment">// upload，图片的存储位置</span> <span class="token keyword">const</span> upload <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'multer'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>dest<span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'/../../uploads'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> app<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/admin/api/upload'</span><span class="token punctuation">,</span>          <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'../../middleware/auth'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>          upload<span class="token punctuation">.</span><span class="token function">single</span><span class="token punctuation">(</span><span class="token string">'file'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>           <span class="token keyword">async</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>   <span class="token keyword">const</span> file <span class="token operator">=</span> req<span class="token punctuation">.</span>file<span class="token punctuation">;</span>   <span class="token comment">// 生成图片的url地址</span>   file<span class="token punctuation">.</span>url <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">http://localhost:3000/uploads/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>file<span class="token punctuation">.</span>filename<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span>    res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="jsonwebtoken"><a href="#jsonwebtoken" class="headerlink" title="jsonwebtoken"></a>jsonwebtoken</h3><ul><li><p>生成token</p></li><li><p>使用</p></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 生成token</span><span class="token keyword">const</span> token <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'jsonwebtoken'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sign</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>id<span class="token operator">:</span> user<span class="token punctuation">.</span>_id<span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">'asdasgas'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 前端处理</span>methods<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">async</span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$http<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'login'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>model<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$message</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        type<span class="token operator">:</span> <span class="token string">"success"</span><span class="token punctuation">,</span>        message<span class="token operator">:</span> <span class="token string">"登陆成功"</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>      <span class="token comment">// 将token赋值到localStorage.token上</span>      localStorage<span class="token punctuation">.</span>token <span class="token operator">=</span> res<span class="token punctuation">.</span>data<span class="token punctuation">.</span>token<span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token comment">// 后端验证</span><span class="token comment">// 认证是否登录 middleware/auth.js</span>module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token parameter">options</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> assert <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'http-assert'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token keyword">async</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 获取token</span>    <span class="token keyword">const</span> token <span class="token operator">=</span> <span class="token punctuation">(</span>req<span class="token punctuation">.</span>headers<span class="token punctuation">.</span>authorization <span class="token operator">||</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">assert</span><span class="token punctuation">(</span>token<span class="token punctuation">,</span> <span class="token number">401</span><span class="token punctuation">,</span> <span class="token string">"请先登录"</span><span class="token punctuation">)</span>    <span class="token comment">// 还原，获得token加密之前的数据</span>    <span class="token keyword">const</span> <span class="token punctuation">&#123;</span>id<span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'jsonwebtoken'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">verify</span><span class="token punctuation">(</span>token<span class="token punctuation">,</span> <span class="token string">'asdasgas'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">assert</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> <span class="token number">401</span><span class="token punctuation">,</span> <span class="token string">"请先登录"</span><span class="token punctuation">)</span>    <span class="token comment">// 确认数据是否存在</span>    req<span class="token punctuation">.</span>user <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'../models/AdminUser'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">assert</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>user<span class="token punctuation">,</span> <span class="token number">401</span><span class="token punctuation">,</span> <span class="token string">"请先登录"</span><span class="token punctuation">)</span>    <span class="token keyword">await</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="http-assert"><a href="#http-assert" class="headerlink" title="http-assert"></a>http-assert</h3><ul><li><p>错误处理</p></li><li><p>使用</p></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js">module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token parameter">options</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> assert <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'http-assert'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token keyword">async</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 获取token</span>    <span class="token keyword">const</span> token <span class="token operator">=</span> <span class="token punctuation">(</span>req<span class="token punctuation">.</span>headers<span class="token punctuation">.</span>authorization <span class="token operator">||</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 第一个参数会进行if判断</span>    <span class="token comment">// 第二个参数当第一个参数判断为false时，返回的错误状态码</span>    <span class="token comment">// 第三个参数：返回的错误提示信息</span>    <span class="token function">assert</span><span class="token punctuation">(</span>token<span class="token punctuation">,</span> <span class="token number">401</span><span class="token punctuation">,</span> <span class="token string">"请先登录"</span><span class="token punctuation">)</span>    <span class="token comment">// 还原，获得token加密之前的数据</span>    <span class="token keyword">const</span> <span class="token punctuation">&#123;</span>id<span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'jsonwebtoken'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">verify</span><span class="token punctuation">(</span>token<span class="token punctuation">,</span> <span class="token string">'asdasgas'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">assert</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> <span class="token number">401</span><span class="token punctuation">,</span> <span class="token string">"请先登录"</span><span class="token punctuation">)</span>    <span class="token comment">// 确认数据是否存在</span>    req<span class="token punctuation">.</span>user <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'../models/AdminUser'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">assert</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>user<span class="token punctuation">,</span> <span class="token number">401</span><span class="token punctuation">,</span> <span class="token string">"请先登录"</span><span class="token punctuation">)</span>    <span class="token keyword">await</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="require-all"><a href="#require-all" class="headerlink" title="require-all"></a>require-all</h3><ul><li>使用</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// db.js</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'require-all'</span><span class="token punctuation">)</span><span class="token punctuation">(</span>__dirname <span class="token operator">+</span> <span class="token string">'/../models'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> npm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 一些npm包的使用 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>响应式布局学习笔记</title>
      <link href="2021/05/06/flex/"/>
      <url>2021/05/06/flex/</url>
      
        <content type="html"><![CDATA[<p>响应式布局学习笔记<span id="more"></span></p><h1 id="响应式布局学习笔记"><a href="#响应式布局学习笔记" class="headerlink" title="响应式布局学习笔记"></a>响应式布局学习笔记</h1><h2 id="mediaQuery"><a href="#mediaQuery" class="headerlink" title="mediaQuery"></a>mediaQuery</h2><p>什么是媒体查询</p><ul><li><p>概念：为不同尺寸的屏幕设定不同的css样式</p></li><li><p>device-width、device-height</p><ul><li>设备的宽度、高度</li></ul></li><li><p>width、height</p><ul><li>浏览器的宽度、高度</li></ul></li></ul><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.box1</span> <span class="token punctuation">&#123;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>// - screen 屏幕的意思// - 以下代码屏幕// + 200-300px之间时<span class="token punctuation">,</span>box1的背景颜色为pink// + 300-500px之间时<span class="token punctuation">,</span>box1的背景颜色为purple<span class="token atrule"><span class="token rule">@media</span> screen <span class="token keyword">and</span> <span class="token punctuation">(</span><span class="token property">min-device-width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">)</span> <span class="token keyword">and</span> <span class="token punctuation">(</span><span class="token property">max-device-width</span><span class="token punctuation">:</span> 300px<span class="token punctuation">)</span></span> <span class="token punctuation">&#123;</span>  <span class="token selector">.box1</span><span class="token punctuation">&#123;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> pink<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token atrule"><span class="token rule">@media</span> screen <span class="token keyword">and</span> <span class="token punctuation">(</span><span class="token property">min-device-width</span><span class="token punctuation">:</span> 300px<span class="token punctuation">)</span> <span class="token keyword">and</span> <span class="token punctuation">(</span><span class="token property">max-device-width</span><span class="token punctuation">:</span> 500px<span class="token punctuation">)</span></span> <span class="token punctuation">&#123;</span>  <span class="token selector">.box1</span><span class="token punctuation">&#123;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> purple<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>媒体查询的引入方式</p><ul><li>第一种：在css 文件内引用</li></ul><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token atrule"><span class="token rule">@media</span> screen <span class="token keyword">and</span> <span class="token punctuation">(</span><span class="token property">min-device-width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">)</span> <span class="token keyword">and</span> <span class="token punctuation">(</span><span class="token property">max-device-width</span><span class="token punctuation">:</span> 300px<span class="token punctuation">)</span></span> <span class="token punctuation">&#123;</span>  <span class="token selector">.box1</span><span class="token punctuation">&#123;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> pink<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>第二种：在style标签属性中引用</li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">media</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>(min-device-width: 200px) and (max-device-width: 300px)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">    <span class="token selector">.box1</span><span class="token punctuation">&#123;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> pink<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>第三种：在link标签中引用</li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>css/base.css<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">media</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>(min-device-width: 200px) and (max-device-width: 300px)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="flex"><a href="#flex" class="headerlink" title="flex"></a>flex</h2><p>弹性盒子</p><ul><li>弹性盒子中的子元素，如果不做额外的大小设置，可能会随着父元素自适应改变</li></ul><p>父对象设置</p><ul><li><p>flex-direction</p><ul><li>作用：子元素在父元素盒子中的排列方式</li><li>row：默认值。按从左到右的顺序显示</li><li>row-reverse：与row相同，但是以相反的顺序</li><li>column：灵活的项目将垂直显示，按从上到下的顺序</li><li>column-reverse：与column相同，但是以相反的顺序</li></ul></li><li><p>flex-wrap</p><ul><li>作用：子元素在父元素盒子中是否换行</li><li>nowrap：默认值，不换行、不换列</li><li>wrap：换行、或换列</li><li>wrap-reverse：换行或换列，但以相反的顺序<ul><li>交叉轴相反</li></ul></li></ul></li><li><p>justify-content</p><ul><li>作用：用来在存在剩余空间时，设置为间距的格式</li><li>flex-start：默认值，从左到右，挨着行的开头</li><li>flex-end：从右到左，挨着行的结尾</li><li>center：剧中显示</li><li>space-between：平均分布在该行上，两边不留占据空间</li><li>space-around：平均分布在该行上，两边留有一半的间隔空间</li></ul></li><li><p>align-items</p><ul><li>作用：设置每个flex元素在交叉轴上的对齐方式(把每一行当成一个整体)</li><li>flex-start：位于容器的开头</li><li>flex-end：位于容器的结尾</li><li>center：居中显示</li><li>stretch：弹性元素被在侧轴方向被拉伸到与容器相同的高度或宽度。</li></ul></li><li><p>align-content</p><ul><li>作用：设置每个flex元素在交叉轴上的对齐方式(把多行当成一个整体)</li><li>flex-start：位于容器的开头</li><li>flex-end：位于容器的结尾</li><li>center：剧中显示</li><li>space-between：平均分布，两边不留占据空间</li><li>space-around：平均分布，两边留有一半的间隔空间</li></ul></li></ul><p>子对象设置</p><ul><li>flex-basis<ul><li>设置弹性盒伸缩基准值（设置后，宽度将不再生效）</li></ul></li><li>flex-grow<ul><li>设置弹性盒子的扩展比率</li><li>增加量：（父元素的宽度 - 所有子元素的宽度）/ 所有子元素的扩展比率之和 *单个子元素的扩展比率</li></ul></li><li>flex-shrink<ul><li>设置弹性盒子的缩小比率</li><li>默认有一个缩小比率，均为1，不会超出</li><li>减少量：（所有子元素的宽度 - 父元素的宽度）/ 所有子元素的扩展比率之和 *单个子元素的扩展比率</li></ul></li><li>flex<ul><li>flex-grow、flex-shrink、flex-basis的缩写</li><li>flex默认值<ul><li>flex-grow: 0, flex-shrink: 1, flex-basis: auto</li></ul></li><li>flex: 1<ul><li>flex-grow: 1, flex-shrink: 1, flex-basis: 0%</li></ul></li><li>flex: auto<ul><li>flex-grow: 1, flex-shrink: 1, flex-basis: auto</li></ul></li><li>flex: none<ul><li>flex-grow: 0, flex-shrink: 0, flex-basis: auto</li></ul></li><li>flex: 0%<ul><li>flex-grow: 1, flex-shrink: 1, flex-basis: 0%</li></ul></li><li>flex: 100%<ul><li>flex-grow: 1, flex-shrink: 1, flex-basis: 100%</li></ul></li></ul></li></ul><h3 id="案例一"><a href="#案例一" class="headerlink" title="案例一"></a>案例一</h3><ul><li>输入框布局</li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>IE=edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">    <span class="token selector">.box</span> <span class="token punctuation">&#123;</span>      <span class="token property">margin</span><span class="token punctuation">:</span> 50px auto<span class="token punctuation">;</span>      <span class="token property">width</span><span class="token punctuation">:</span> 500px<span class="token punctuation">;</span>      <span class="token property">height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token selector">.box1</span> <span class="token punctuation">&#123;</span>      <span class="token property">height</span><span class="token punctuation">:</span> 30px<span class="token punctuation">;</span>      <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>      <span class="token property">line-height</span><span class="token punctuation">:</span> 30px<span class="token punctuation">;</span>      <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>      <span class="token property">border</span><span class="token punctuation">:</span> 1px solid #ccc<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token selector">.name, .sumbit</span> <span class="token punctuation">&#123;</span>      <span class="token property">width</span><span class="token punctuation">:</span> 60px<span class="token punctuation">;</span>      <span class="token property">height</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>      <span class="token property">background-color</span><span class="token punctuation">:</span> #eeedee<span class="token punctuation">;</span>      <span class="token property">border</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token selector">input</span> <span class="token punctuation">&#123;</span>      <span class="token property">flex</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span>      <span class="token property">border</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>      <span class="token property">border-top</span><span class="token punctuation">:</span>2px solid #eeedee<span class="token punctuation">;</span>      <span class="token property">border-bottom</span><span class="token punctuation">:</span>2px solid #eeedee<span class="token punctuation">;</span>      <span class="token property">outline</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>box1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>姓名<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sumbit<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>GO<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="案例二"><a href="#案例二" class="headerlink" title="案例二"></a>案例二</h3><ul><li>长表单布局</li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>IE=edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">    <span class="token selector">.form div</span> <span class="token punctuation">&#123;</span>      <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>      <span class="token comment">/* height: 40px; */</span>      <span class="token property">align-items</span><span class="token punctuation">:</span> flex-start<span class="token punctuation">;</span> <span class="token comment">/*弹性盒子中的子元素，如果不做额外的大小设置，可能会随着父元素自适应改变*/</span>      <span class="token property">flex</span><span class="token punctuation">:</span> 0 0 30px<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token selector">.form div label</span> <span class="token punctuation">&#123;</span>      <span class="token property">flex</span><span class="token punctuation">:</span> 0 0 100px<span class="token punctuation">;</span>      <span class="token property">text-align</span><span class="token punctuation">:</span> right<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token selector">.form</span> <span class="token punctuation">&#123;</span>      <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>      <span class="token property">flex-direction</span><span class="token punctuation">:</span> column<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>form<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>姓名<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>请输入密码<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="案例三"><a href="#案例三" class="headerlink" title="案例三"></a>案例三</h3><h4 id="rem的使用方法"><a href="#rem的使用方法" class="headerlink" title="rem的使用方法"></a>rem的使用方法</h4><ul><li>概念：指相对于根元素的字体大小的单位</li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>IE=edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    <span class="token keyword">var</span> <span class="token function-variable function">c</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token keyword">let</span> w <span class="token operator">=</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>clientWidth<span class="token punctuation">;</span> <span class="token comment">/* 获取屏幕尺寸的大小*/</span>      <span class="token keyword">let</span> n <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">20</span> <span class="token operator">*</span> <span class="token punctuation">(</span>w<span class="token operator">/</span><span class="token number">360</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">40</span> <span class="token operator">?</span> <span class="token punctuation">(</span><span class="token number">40</span> <span class="token operator">+</span> <span class="token string">'px'</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token number">20</span> <span class="token operator">*</span> <span class="token punctuation">(</span>w<span class="token operator">/</span><span class="token number">360</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'px'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>style<span class="token punctuation">.</span>fontSize <span class="token operator">=</span> n<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'read'</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>    window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'resize'</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">    <span class="token selector">div</span> <span class="token punctuation">&#123;</span>      <span class="token property">font-size</span><span class="token punctuation">:</span> 1rem<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>    123  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="案例四"><a href="#案例四" class="headerlink" title="案例四"></a>案例四</h3><ul><li>自适应布局<ul><li>不同设备对应不同的HTML</li><li>局部自适应</li></ul></li><li>一句话：不同的设备用不同的页面或局部伸缩</li><li>设计思路：判断设备的类型或控制局部的变化</li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>IE=edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">  <span class="token keyword">var</span> <span class="token function-variable function">redirect</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> userAgent <span class="token operator">=</span> navigator<span class="token punctuation">.</span>userAgent<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">/** 获取设备信息*/</span>    <span class="token keyword">let</span> device <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">ipad|iphone|midp|rv:1.2.3.4|ucweb|android|windows ce|windows mobile</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>device<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>userAgent<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>href <span class="token operator">=</span> <span class="token string">'move.html'</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>href <span class="token operator">=</span> <span class="token string">'pc.html'</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">redirect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="案例五"><a href="#案例五" class="headerlink" title="案例五"></a>案例五</h3><ul><li>响应式布局<ul><li>不同设备对应不同的css样式</li></ul></li><li>HTML</li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>IE=edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0 user-scalable=0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>base.css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>big.css<span class="token punctuation">"</span></span> <span class="token attr-name">media</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>(min-device-width: 1000px)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>move.css<span class="token punctuation">"</span></span> <span class="token attr-name">media</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>(min-device-width: 400px) and (max-device-width: 700px)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>top<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>main<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>分类1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>分类2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>分类3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>分类4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>分类5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>分类6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>图片<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>图片<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>图片<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>图片<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>图片<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>图片<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>图片<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>图片<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>图片<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>base.css</p></li><li><p>~~~css</p><ul><li>{<br>margin: 0;<br>padding: 0;<br>background-color: #f1f1f1;<br>}<br>li {<br>list-style: none;<br>}<pre class="line-numbers language-none"><code class="language-none">- big.css- ~~~css  .container &#123;    margin: auto;    width: 80%;    display: flex;    flex-direction: column;  &#125;  .top &#123;    width: 100%;    flex: 0 0 50px;    background-color: pink;  &#125;  .main &#123;    display: flex;    width: 100%;  &#125;  .main div:nth-child(1) &#123;    flex: 0 0 10%;    text-align: center;    display: flex;    flex-wrap: wrap;    align-content: flex-start;  &#125;  .main div:nth-child(1) li &#123;    flex: 0 0 100%;    height: 40px;    line-height: 40px;        border-bottom: 1px solid white;  &#125;  .main div:nth-child(2) &#123;    flex: 0 0 90%;    text-align: center;    display: flex;    flex-wrap: wrap;    justify-content: space-around;  &#125;  .main div:nth-child(2) li &#123;    flex: 0 0 30%;    margin-top: 10px;    background-color: purple;    height: 120px;  &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>move.css</p></li><li><p>~~~css<br>.container {<br>  width: 100%;<br>  display: flex;<br>  flex-direction: column;<br>}<br>.top {<br>  width: 100%;<br>  flex: 0 0 50px;<br>  background-color: pink;<br>}<br>.main {<br>  display: flex;<br>  flex-direction: column;<br>  width: 100%;<br>}<br>.main div:nth-child(1) {<br>  flex: 0 0 10%;<br>  text-align: center;<br>  display: flex;<br>  justify-content: space-around;<br>  flex-wrap: wrap;<br>}<br>.main div:nth-child(1) li {<br>  flex: 0 0 30%;<br>  height: 40px;<br>  line-height: 40px;<br>  border-right: 1px solid white;<br>  border-bottom: 1px solid white;<br>}<br>.main div:nth-child(1) li:nth-child(3n) {<br>  border-right: none;<br>}<br>.main div:nth-child(2) {<br>  flex: 0 0 90%;<br>  text-align: center;<br>  display: flex;<br>  flex-wrap: wrap;<br>  justify-content: space-around;<br>}<br>.main div:nth-child(2) li {<br>  flex: 0 0 30%;<br>  margin-top: 10px;<br>  background-color: purple;<br>  height: 120px;<br>}</p><pre class="line-numbers language-none"><code class="language-none">### 案例6rem弹性布局- 布局特点：为了保证在各种屏幕上的不失真，就要根据实际屏幕宽度做等比例换算- 一句话：一套方案，使不同尺寸、分辨率的视口，都能呈现出较好的效果- 设计思路：使用%或rem作为单位，此处采用rem为单位- ~~~html  &lt;!DOCTYPE html&gt;  &lt;html lang&#x3D;&quot;en&quot;&gt;    &lt;head&gt;    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;    &lt;meta http-equiv&#x3D;&quot;X-UA-Compatible&quot; content&#x3D;&quot;IE&#x3D;edge&quot;&gt;    &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0 user-scalable&#x3D;0&quot;&gt;    &lt;title&gt;Document&lt;&#x2F;title&gt;    &lt;style&gt;      * &#123;        margin: 0;        padding: 0;      &#125;        li &#123;        list-style: none;      &#125;        html &#123;        font-size: 20px;      &#125;        .top,      .main,      .foot &#123;        width: 100%;      &#125;        .top &#123;        position: fixed;        top: 0;        left: 0;        right: 0;        height: 2rem;        background-color: pink;        text-align: center;        line-height: 2rem;        z-index: 9;      &#125;        .main &#123;        height: auto;        position: absolute;        top: 2rem;        bottom: 2rem;        background-color: #f5f5f5;      &#125;      .main ul &#123;        display: flex;        flex-direction: column;        justify-content: space-between;        font-size: 0.5rem;      &#125;      .main ul li &#123;        flex: 1 1 3rem;        display: flex;        border-bottom: 1px solid #ccc;        align-items: center;      &#125;      .main ul li div &#123;        margin: 0.2rem;      &#125;      .pic &#123;        width: 3.6rem;        height: 2rem;        background-color: royalblue;      &#125;      .icon &#123;        display: inline-block;        width: 1rem;        height: 1rem;        vertical-align: -webkit-baseline-middle; &#x2F;* 可以让其中的照片垂直居中*&#x2F;        background-color: salmon;      &#125;        .foot &#123;        position: fixed;        left: 0;        right: 0;        bottom: 0;        height: 2rem;        display: flex;        justify-content: space-around;        z-index: 9;        background-color: #ddd;      &#125;        .foot div &#123;        width: 40%;        background-color: pink;      &#125;    &lt;&#x2F;style&gt;  &lt;&#x2F;head&gt;    &lt;body&gt;    &lt;div class&#x3D;&quot;container&quot;&gt;      &lt;div class&#x3D;&quot;top&quot;&gt;        头部      &lt;&#x2F;div&gt;      &lt;div class&#x3D;&quot;main&quot;&gt;        &lt;ul&gt;          &lt;li&gt;            &lt;div&gt;&lt;div class&#x3D;&quot;pic&quot;&gt;&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;            &lt;div class&#x3D;&quot;info&quot;&gt;我想说我会爱你多一点点我想说我会爱你多一点点我想说我会爱你多一点点我想说我会爱你多一点点我想说我会爱你多一点点&lt;&#x2F;div&gt;            &lt;div &gt;&lt;div class&#x3D;&quot;icon&quot;&gt;&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;          &lt;&#x2F;li&gt;          &lt;li&gt;            &lt;div&gt;&lt;div class&#x3D;&quot;pic&quot;&gt;&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;            &lt;div class&#x3D;&quot;info&quot;&gt;我想说我会爱你多一点点我想说我会爱你多一点点我想说我会爱你多一点点我想说我会爱你多一点点我想说我会爱你多一点点&lt;&#x2F;div&gt;            &lt;div &gt;&lt;div class&#x3D;&quot;icon&quot;&gt;&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;          &lt;&#x2F;li&gt;          &lt;li&gt;            &lt;div&gt;&lt;div class&#x3D;&quot;pic&quot;&gt;&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;            &lt;div class&#x3D;&quot;info&quot;&gt;我想说我会爱你多一点点我想说我会爱你多一点点我想说我会爱你多一点点我想说我会爱你多一点点&lt;&#x2F;div&gt;            &lt;div &gt;&lt;div class&#x3D;&quot;icon&quot;&gt;&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;          &lt;&#x2F;li&gt;          &lt;li&gt;            &lt;div&gt;&lt;div class&#x3D;&quot;pic&quot;&gt;&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;            &lt;div class&#x3D;&quot;info&quot;&gt;我想说我会爱你多一点点我想说我会爱你多一点点我想说我会爱你多一点点我想说我会爱你多一点点我想说我会爱你多一点点&lt;&#x2F;div&gt;            &lt;div &gt;&lt;div class&#x3D;&quot;icon&quot;&gt;&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;          &lt;&#x2F;li&gt;          &lt;li&gt;            &lt;div&gt;&lt;div class&#x3D;&quot;pic&quot;&gt;&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;            &lt;div class&#x3D;&quot;info&quot;&gt;我想说我会爱你多一点点我想说我会爱你多一点点我想说我会爱你多一点点我想说我会爱你多一点点我想说我会爱你多一点点&lt;&#x2F;div&gt;            &lt;div &gt;&lt;div class&#x3D;&quot;icon&quot;&gt;&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;          &lt;&#x2F;li&gt;          &lt;li&gt;            &lt;div&gt;&lt;div class&#x3D;&quot;pic&quot;&gt;&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;            &lt;div class&#x3D;&quot;info&quot;&gt;我想说我会爱你多一点点我想说我会爱你多一点点我想说我会爱你多一点点我想说我会爱你多一点点我想说我会爱你多一点点&lt;&#x2F;div&gt;            &lt;div &gt;&lt;div class&#x3D;&quot;icon&quot;&gt;&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;          &lt;&#x2F;li&gt;          &lt;li&gt;            &lt;div&gt;&lt;div class&#x3D;&quot;pic&quot;&gt;&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;            &lt;div class&#x3D;&quot;info&quot;&gt;我想说我会爱你多一点点我想说我会爱你多一点点我想说我会爱你多一点点我想说我会爱你多一点点我想说我会爱你多一点点&lt;&#x2F;div&gt;            &lt;div &gt;&lt;div class&#x3D;&quot;icon&quot;&gt;&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;          &lt;&#x2F;li&gt;          &lt;li&gt;            &lt;div&gt;&lt;div class&#x3D;&quot;pic&quot;&gt;&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;            &lt;div class&#x3D;&quot;info&quot;&gt;我想说我会爱你多一点点我想说我会爱你多一点点我想说我会爱你多一点点我想说我会爱你多一点点我想说我会爱你多一点点我想说我会爱你多一点点&lt;&#x2F;div&gt;            &lt;div &gt;&lt;div class&#x3D;&quot;icon&quot;&gt;&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;          &lt;&#x2F;li&gt;        &lt;&#x2F;ul&gt;      &lt;&#x2F;div&gt;      &lt;div class&#x3D;&quot;foot&quot;&gt;        &lt;div&gt;&lt;&#x2F;div&gt;        &lt;div&gt;&lt;&#x2F;div&gt;      &lt;&#x2F;div&gt;    &lt;&#x2F;div&gt;  &lt;&#x2F;body&gt;  &lt;script&gt;    var c &#x3D; () &#x3D;&gt; &#123;      let w &#x3D; document.documentElement.clientWidth; &#x2F;* 获取屏幕尺寸的大小*&#x2F;      let n &#x3D; (20 * (w &#x2F; 360) &gt; 40 ? (40 + &#39;px&#39;) : (20 * (w &#x2F; 360) + &#39;px&#39;));      document.documentElement.style.fontSize &#x3D; n;    &#125;    window.addEventListener(&#39;read&#39;, c);    window.addEventListener(&#39;resize&#39;, c);  &lt;&#x2F;script&gt;    &lt;&#x2F;html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 响应式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML+CSS 学习笔记</title>
      <link href="2021/05/06/html-css/"/>
      <url>2021/05/06/html-css/</url>
      
        <content type="html"><![CDATA[<p>HTML+CSS 学习笔记<span id="more"></span></p><h1 id="HTML-CSS-学习笔记"><a href="#HTML-CSS-学习笔记" class="headerlink" title="HTML+CSS 学习笔记"></a>HTML+CSS 学习笔记</h1><p>web标准的构成</p><table><thead><tr><th align="center">标准</th><th align="center">内容</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">结构</td><td align="center">HTML</td><td align="center">网页元素的结构和内容</td></tr><tr><td align="center">表现</td><td align="center">CSS</td><td align="center">网页元素的外观和位置</td></tr><tr><td align="center">行为</td><td align="center">JaveScript</td><td align="center">网页模型的定义和交互</td></tr></tbody></table><h2 id="day01HTML简单介绍"><a href="#day01HTML简单介绍" class="headerlink" title="day01HTML简单介绍"></a>day01HTML简单介绍</h2><h3 id="一、网页的基本元素"><a href="#一、网页的基本元素" class="headerlink" title="一、网页的基本元素"></a>一、网页的基本元素</h3><ul><li><p>一个完整的HTML结构包括哪几部分？</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charest</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>文档声明</p><ul><li>HTML文档声明，告诉浏览器当前页面是HTML5页面，让浏览器用HTML5的标准去解析识别HTML文档</li><li>必须放到HTML文档的最前面，不能省略，省略了会出现兼容性问题</li></ul></li><li><p>html元素</p><ul><li>html元素是HTML文档的根元素，一个文件只能有一个，其他所有元素都是它的后代元素</li><li>lang =&gt; language 语言的意思，作用：<ul><li>帮助翻译工具确定要使用的翻译规则</li><li>帮助语音合成工具确定要使用的发音</li></ul></li><li>lang=”en” =&gt;英文;  lang=”zh” =&gt;中文<ul><li>zh-CN:地区限制匹配规范，表示用在中国大陆区域的中文</li><li>zh-Hans:语言限制匹配规范，表示简体中文</li></ul></li></ul></li><li><p>head元素</p><ul><li>head元素里面的内容是一些”元数据”(元数据：描述数据的数据) <ul><li>元数据 =&gt; metadata;<br>用来描述数据的数据<br>对网页进行一些基本设置</li></ul></li><li>比如字符编码、网页标题、网页图标<ul><li>meta charest=”UTF-8”  =&gt; 字符集<br>作用:将文字存储到计算机中，之后解析出来显示<br>应用:所有的网页目前都需要采用UTF-8编码，所有浏览器在解析时，我们也要告诉浏览器当前我们使用的时UTF-8，浏览器才能正常的解析出来文字<br>中文 =&gt; GB2312 =&gt; GBK<br>其他国家：其他文字 =&gt; 自己的编码规则<br>Unicode =&gt; 规则<br>utf-16 =&gt; utf-32 =&gt; utf-8<br>哈哈 =&gt; utf8 =&gt; 01010101 =&gt;GBK  乱码</li><li>title =&gt; 网页标题</li><li>link:favicon 网页图标</li></ul></li></ul></li><li><p>body元素</p><ul><li>网页的具体内容和结构</li></ul></li></ul><h3 id="二、基本标签"><a href="#二、基本标签" class="headerlink" title="二、基本标签"></a>二、基本标签</h3><ul><li><p>h元素：定义了六个大小不同的标题，加粗文本</p></li><li><p>strong：加粗</p></li><li><p>img：显示图片</p><ul><li>src：图片的路径(网络图片/本地图片(相对路径/绝对路径))</li><li>alt：当图片无法加载，显示的代替文字</li><li>注意：img如果只设置了width或height，浏览器会自动根据图片宽高比计算出height或width</li></ul></li><li><p>a元素：定义锚点</p><ul><li>href：超链接<ul><li>target：<br>  _self(默认值):自己<br>  _blank:空白，新的标签页</li><li>在iframe标签内的target：<br>  _parent:父元素<br>  _top:多层嵌套iframe，在顶层<br>  某个frame的name值：在某个frame中打开URL</li><li>“#id”:可以定义到id所在位置</li><li>伪链接：没有指明具体链接地址的链接<br>  点击链接后具体做什么,可以编写对应的JS代码<br>  “#” onclick = “return false”<br>  “javascript: alert()”   //弹出弹窗</li></ul></li></ul></li><li><p>iframe: 框架，一般用来包含别的页面</p></li><li><p>pre元素：预设文本，按照代码块中的文本格式渲染到浏览器上</p></li><li><p>特殊字符</p><table><thead><tr><th align="center">特殊字符</th><th align="center">描述</th><th align="center">字符的名称</th></tr></thead><tbody><tr><td align="center"></td><td align="center">空格符</td><td align="center">&amp;nbsp</td></tr><tr><td align="center">&lt;</td><td align="center">小于号</td><td align="center">&amp;lt</td></tr><tr><td align="center">&gt;</td><td align="center">大于号</td><td align="center">&amp;gt</td></tr><tr><td align="center">&amp;</td><td align="center">和号</td><td align="center">&amp;amp</td></tr><tr><td align="center">￥</td><td align="center">人民币</td><td align="center">&amp;yen</td></tr><tr><td align="center">&copy;</td><td align="center">版权</td><td align="center">&amp;copy</td></tr><tr><td align="center">&reg;</td><td align="center">注册商标</td><td align="center">&amp;reg</td></tr><tr><td align="center">&deg;</td><td align="center">摄氏度</td><td align="center">&amp;deg</td></tr><tr><td align="center">&plusmn;</td><td align="center">正负号</td><td align="center">&amp;plusmn</td></tr><tr><td align="center">&times;</td><td align="center">乘号</td><td align="center">&amp;times</td></tr><tr><td align="center">&divide;</td><td align="center">除号</td><td align="center">&amp;divide</td></tr><tr><td align="center">&sup2;</td><td align="center">平方2(上标2)</td><td align="center">&amp;sup2</td></tr><tr><td align="center">&sup3;</td><td align="center">立方3(上标3)</td><td align="center">&amp;sup3</td></tr></tbody></table><ul><li>除了用字符名称还可以用字符的实体编号</li></ul></li></ul><h3 id="三、URL-SEO优化"><a href="#三、URL-SEO优化" class="headerlink" title="三、URL/SEO优化"></a>三、URL/SEO优化</h3><h4 id="3-1-URL"><a href="#3-1-URL" class="headerlink" title="3.1 URL"></a>3.1 URL</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">协议:&#x2F;&#x2F;主机:端口(默认端口80,省略)&#x2F;path?查询protocol:&#x2F;&#x2F;host:post&#x2F;path[;parameters][?query]#fragment&#x2F;&#x2F; query 请求参数，提交给服务器的数据&#x2F;&#x2F; fragment 锚点位置<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-2-接口文档"><a href="#3-2-接口文档" class="headerlink" title="3.2 接口文档"></a>3.2 接口文档</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">baseURL:http:&#x2F;&#x2F;localhost:8000访问某个资源&#x2F;home&#x2F;multidata参数page：当前要访问的页面type：访问数据的类型popnewsell<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-2-SEO优化"><a href="#3-2-SEO优化" class="headerlink" title="3.2. SEO优化"></a>3.2. SEO优化</h4><p>SEO: 搜索引擎优化</p><ul><li>百度/搜狗/360/Google</li><li>h元素有助于网站的SEO优化，可以促进关键词排名<ul><li>建议在网页中最多只有一个h1元素</li><li>乱用不会带来好的权重，反而有可能被搜索引擎认为作弊，最后导致K站</li><li>logo优化：<pre><code>logo里面首先放一个h1标签，目的为了提权，告诉引擎这个地方很重要h1里面在放一个连接，可以返回首页的，block给链接一个logo的背景图片链接里面放文字，为了搜索引擎收录我们，但是文字不要显示出来。</code></pre>  text-indent:-9999px，然后overflow：hidden 淘宝的做法<pre><code>    直接给font-size : 0，就看不到文字了，     京东的做法最后给链接一个title，这样鼠标放到logo上，就可以看到提示文字了</code></pre></li></ul></li><li>网站优化三大标签:<ul><li>一.网页title标题<pre><code>    title具有不可替代性,使我们内页的第一个重要标签,是搜索引擎了解网页的入口,和对网页主题归属的最佳判断点.  标题长度:      Google,35个中文   Baidu,28个中文  关键字分布:      最先出现的词语权重越高  关键字词频:      主关键词出现3次,辅关键词出现一次.  建议:      首页标题:网站名(产品名)-网站的介绍</code></pre></li><li>二.Description:网站说明<pre><code>    字符数含空格在内不超过120个汉字.      补充在title和keywords 中未能充分表述的说明.      用英文逗号 关键词1,关键词2</code></pre></li><li>三.keywords：关键字<pre><code>    通常限制到6~8个</code></pre></li></ul></li></ul><h3 id="四、标签语义化"><a href="#四、标签语义化" class="headerlink" title="四、标签语义化"></a>四、标签语义化</h3><ul><li>什么是标签语义化？<ul><li>选择标签的时候要尽量让每一个标签都有正确的语义</li></ul></li><li>标签语义化的好处<ul><li>方便维护代码</li><li>减少让开发者之间的沟通成本</li><li>能让语音合成工具正确识别网页元素的用途，以便做出正确的反应</li><li>让搜索引擎能够正确识别重要的信息</li></ul></li></ul><h3 id="五、列表"><a href="#五、列表" class="headerlink" title="五、列表"></a>五、列表</h3><ul><li>有序列表   ol&gt;li  无序列表   ul&gt;li <ul><li>li 前面的部分（序号或者实心点）是占据了一个独立的块元素</li></ul></li><li>自定义列表dl常用与对术语或名词解释<ul><li>dl中含有dt第一 dd第二</li><li>dt<ul><li>列表中每一项的项目名</li></ul></li><li>dd<ul><li>列表中每一项的具体描述，是对dt的描述、解释、补充</li></ul></li></ul></li><li>列表相关的CSS属性<ul><li>注：它们都可以继承</li><li>list-style-type<ul><li>设置li元素前面标记的样式<br>decimal<br>  将样式改为阿拉伯数字<br>其他属性不常用，翻阅文档</li></ul></li><li>list-style-image<ul><li>设置某张图片覆盖前面的样式</li></ul></li><li>list-style-position<ul><li>设置li元素前面标记的位置<br>outside<br>  标记放在外边距里面<br>inside<br>  标记放在内容里面</li></ul></li><li>list-style<ul><li>常用 list-style: none</li></ul></li></ul></li></ul><h3 id="六、表格"><a href="#六、表格" class="headerlink" title="六、表格"></a>六、表格</h3><ul><li>常见元素<ul><li>table、tr、td、th</li></ul></li><li>table<ul><li>border:控制表格边框的宽度（默认为0）<br>width:控制表格的宽度<br>height：控制表格的高度<br>align:设置表格再网页中的水平对齐方式（left center right）<br>cellspacing:设置单元格与单元格边框之间的空白间距<br>cellpadding:设置单元格内容与单元格边框之间的空白间距</li><li>注：不常用，推荐使用CSS样式来修改</li><li>bord-collapse<ul><li>separate   默认分开</li><li>collapse    合并</li></ul></li><li>border-spacing: 10px 15px;<ul><li>10px 左右边距</li><li>15px 上下边距</li></ul></li></ul></li><li>th、td<ul><li>valign<ul><li>单元格的垂直对齐方式</li></ul></li><li>align<ul><li>单元格的水平对齐方式</li></ul></li><li>width、height<ul><li>单元格的宽度、高度</li></ul></li><li>rowspan<ul><li>单元格可横跨的行数</li></ul></li><li>colspan<ul><li>单元格可横跨的列数</li></ul></li></ul></li><li>表格划分结构：三个部分，题头、正文、脚注，分别为thead,tbody，tfoot<br>thead 内部必须有 tr 标签</li><li>caption 表格标题，跟随着表格移动，居中表示在表格上方。</li></ul><h3 id="七、表单"><a href="#七、表单" class="headerlink" title="七、表单"></a>七、表单</h3><ul><li><p>常见元素</p><ul><li>from<ul><li>表单，一般情况下，其他表单相关元素都是它的后代元素</li><li>action 发送的url地址</li><li>method<br>get<br>  在请求url后面以？的形式跟上发给服务器的参数，多个参数之间用&amp;隔开，<br>  由于浏览器和服务器对url长度有限制，因此在URL后面附带的参数是有限制的，通常不能超过1KB<br>post<br>  发给服务器的参数全部放在请求体中</li><li>target<br>  在什么地方打开URL，（参考a元素的target）</li><li>enctype<br>  规定了在向服务器发送表单数据之前如何对数据进行编码<br>  取值有三种<pre><code>application/x-www-form-urlencoded：默认的编码方式multipart/form-data：文件上传时必须为这个值，并且method必须是posttext/pain：普通文本传输</code></pre></li><li>accept-charset：规定表单提交时使用的字符编码（默认值UNKNOWN，和文档相同的编码）</li></ul></li></ul><ul><li>input<ul><li>单行文本输入框、单选框、复选框、按钮等元素<ul><li>type: input的类型<ul><li>text：文本输入框（明文输入）</li><li>password：文本输入框（密文输入）</li><li>radio：单选框<ul><li>checked 默认被选中</li></ul></li><li>checkbox：复选框<ul><li>checked 默认被选中</li></ul></li><li>button：按钮</li><li>reset：重置</li><li>submit：提交表单数据给服务器</li><li>file：文件上传</li></ul></li></ul></li><li>oninput<ul><li>内容发生改变就触发</li></ul></li><li>onchange<ul><li>内容发生改变且失去焦点后才触发</li></ul></li></ul></li><li>textarea<ul><li>多行文本框</li><li>cols: 列数</li><li>rows: 行数</li><li>缩放的CSS设置<ul><li>resize<ul><li>none   禁止缩放</li><li>horizontal   水平缩放</li><li>vertical   垂直缩放</li></ul></li></ul></li></ul></li><li>select、option<ul><li>下拉选择框</li><li>select常用属性<ul><li>multiple: 可以多选</li><li>size：显示多少项</li></ul></li><li>option<ul><li>selected：默认被选中</li></ul></li></ul></li><li>button<ul><li>按钮</li></ul></li><li>label<ul><li>表单元素的标题</li></ul></li><li>fieldset<ul><li>表单元素组</li><li>legend<ul><li>fieldset的标题</li></ul></li></ul></li><li>maxlength<ul><li>允许输入的最大数字</li></ul></li><li>placeholder<ul><li>占位文字</li></ul></li><li>readonly<ul><li>只读属性</li></ul></li><li>disabled<ul><li>禁用</li></ul></li><li>autofocus<ul><li>当页面加载时，自动聚焦</li></ul></li><li>name<ul><li>在提交数据给服务器时，可用于区分数据类型</li></ul></li></ul></li><li><p>表单提交</p><ul><li>传统的 表单提交<ul><li>将所有的input包裹到一个form中，form设置action（服务器的地址），点击submit，自动将所有的数据传输到服务器</li><li>弊端<ul><li>会进行页面的跳转（意味着服务器必须提前将一个页面写好，并且将写好的页面返回给前端，前端直接展示这个页面）</li><li>不方便进行表单数据的验证</li></ul></li></ul></li><li>前后端分离<ul><li>通过JavaScript获取到所有表单的内容，通过正则表达式进行表单的验证，发送Ajax请求，<br>将数据传递给服务器，验证成功后，服务器会返回结果，需要前端解析这个数据，并且决定显示什么内容（前端渲染和前端路由     ）</li></ul></li></ul></li></ul><h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><h4 id="块级、行内级元素"><a href="#块级、行内级元素" class="headerlink" title="块级、行内级元素"></a>块级、行内级元素</h4><ul><li>根据元素的显示（能不能在同一行显示）类型<ul><li>块级元素<ul><li>独占父元素一行</li></ul></li><li>行内级元素<ul><li>多个行内级元素可以在父元素的同一行中显示</li><li>行内非替换元素<ul><li>不起作用：width、height、margin-top、margin-bottom</li><li>效果特殊：padding-top、padding-bottom、上下方向的border<ul><li>上下会多出区域，但是不占据空间</li></ul></li></ul></li><li>基线对齐</li><li>行内级元素（包括inline-block元素）的代码之间如果有空格，会被解析为空格<ul><li>解决方法<ul><li>1.元素代码之间不要留空格</li><li>2.注释掉空格</li><li>3.设置父元素的font-size为0，然后在元素中重新设置自己需要的font-size</li></ul></li></ul></li></ul></li></ul></li></ul><h4 id="替换、非替换元素"><a href="#替换、非替换元素" class="headerlink" title="替换、非替换元素"></a>替换、非替换元素</h4><ul><li>根据元素的内容（是否浏览器会替换掉元素）类型<ul><li>替换元素<ul><li>元素本身没有实际内容，浏览器根据元素的类型和属性，来决定元素的具体显示内容</li><li>例img、input、iframe、video、embed、canvas、audio、object等</li></ul></li><li>非替换元素<ul><li>和替换元素相反，元素本身是有实际内容的，浏览器会直接将内容显示出来，而不需要根据元素类型和属性来判断到底显示什么内容</li></ul></li></ul></li></ul><h2 id="day02CSS基本介绍"><a href="#day02CSS基本介绍" class="headerlink" title="day02CSS基本介绍"></a>day02CSS基本介绍</h2><ul><li><p>浏览器兼容行问题</p></li><li><p>CSS样式：    草稿 =&gt; 备选推荐 =&gt; 推荐</p></li><li><p>什么是CSS？</p><ul><li>CSS的作用是：可以给网页中的每一个元素设置样式(“化妆”、排版布局)，让网页更加精美</li><li>完全没有使用CSS的网页：基本就是一堆从上到下，从左到右挨在一起的文字和图片</li><li>CSS的全称是Cascading Style Sheets，层叠样式表</li></ul></li><li><p>CSS 3：是对CSS 2.x 以后对某一些CSS模块进行升级更新后的称呼</p></li><li><p>内联样式 inline style</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token style-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token style language-css"><span class="token property">属性名</span><span class="token punctuation">:</span> 属性值<span class="token punctuation">;</span> <span class="token property">属性名</span><span class="token punctuation">:</span> 属性值</span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>haha<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>文档样式表、内嵌样式表</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">  <span class="token selector">div</span> <span class="token punctuation">&#123;</span>    <span class="token property">width</span><span class="token punctuation">:</span>20px<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>外部样式表</p><ul><li><p>css文件</p></li><li><p>注意：在CSS文件首部指定CSS文件的编码</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token atrule"><span class="token rule">@charest</span> <span class="token string">"utf-8"</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>引用</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token atrule"><span class="token rule">@import</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span>./css/style.css<span class="token punctuation">)</span></span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li></ul><h3 id="一、常见CSS属性"><a href="#一、常见CSS属性" class="headerlink" title="一、常见CSS属性"></a>一、常见CSS属性</h3><ul><li>color:  前景色(不仅仅是文字，边框，贯穿线，下划线)</li><li>width、height: 不适用于非替换行内元素</li><li>颜色<ul><li>rgba (red,green,blue, alpha)</li><li>注意 ：背景半透明是指盒子背景半透明，盒子里面的内容不受影响。</li></ul></li><li>pointer-events：定义元素是否对指针事件做出反应<ul><li>auto: 默认值，元素对指针事件做出反应，比如:hover和click</li><li>none:元素不对指针事件做出反应</li></ul></li></ul><h4 id="文本"><a href="#文本" class="headerlink" title="文本"></a>文本</h4><ul><li><p>vertical-align: 属性设置元素的垂直对齐方式， 可以为负长度值和百分比值</p></li><li><p>direction：设置文本、表列水平溢出的方向</p></li><li><p>letter-spacing：每个字母的间距   =&gt;   H  e  l  l  o  W  o  r  l  d</p><ul><li>默认为0，负数会挤在一起</li></ul></li><li><p>word-spacing：每个词的间距  =&gt;     Hello                World</p><ul><li>默认为0，负数会挤在一起</li></ul></li><li><p>text-indent： 用于设置第一行内容的缩进</p><ul><li>单位最好为em，相对自身文字大小，例 text-indent: 2em</li></ul></li><li><p>text-transform: 用于设置文字的大小写转换</p><ul><li>capitalize: 将每个单词的首字符变为大写</li><li>uppercase: 将每个单词的所有字符变为大写</li><li>lowercase: 将每个单词的所有字符变为小写</li><li>none: 没有任何影响</li></ul></li><li><p>text-decoration: 用于设置文字的装饰线</p><ul><li>none</li><li>underline:下划线</li><li>overline:上划线</li><li>line-through:中划线（删除线）</li></ul></li><li><p>text-align: 定义行内内容如何相对它的块父元素对齐</p><ul><li>注：text-align并不控制块元素自己的对齐，只控制它的行内内容的对齐</li><li>justify:文字向两侧对齐，对最后一行无效。</li></ul></li><li><p>text-align-last:</p><ul><li>justify:使文本最后一行也向两侧对齐</li></ul></li><li><p>white-space</p><ul><li>nowarp  防止文本换行</li></ul></li><li><p>word-break</p><ul><li>break-all：可以将单词断开</li></ul></li></ul><h4 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h4><ul><li>font-size: 用来设置字体大小<ul><li>单位:px,em, 百分比，后面两个都是相对于父元素的字体大小而言</li></ul></li><li>font-style：用于设置文字的常规、斜体展示<ul><li><i></i>  斜体</li><li><em></em> 斜体</li><li>italic: 用字体的斜体显示(前提，font-family这种字体本身支持斜体)</li><li>oblique: 文本倾斜显示（让文字倾斜） </li><li>normal: 正常</li></ul></li><li>font-variant：可以影响小写字母的显示形式<ul><li>normal: 常规显示</li><li>small-caps: 将小写字母替换为缩小过的大写字母</li></ul></li><li>font-family: 本质上是去本地操作系统上去寻找字体文件</li><li>line-height: 如果块级元素没有设置高度，只含文本，那么height是由行高撑起来的<ul><li>为什么文本需要行高？<ul><li>人的阅读习惯，行高决定阅读方式</li></ul></li><li>行高的严格定义：两行文字基线(baseline)之间的间距</li></ul></li><li>font: 缩写属性<ul><li>顺序：font-style font-weight font-size font-family;</li><li>中间用空格隔开，顺序不得改变，不需要的属性可以省略，但必须保留size和family。</li></ul></li></ul><h4 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h4><ul><li>background<ul><li>一系列背景相关属性的缩写\</li><li>常用格式<ul><li>image position/size repeat attachment color</li><li>size可以省略，如果不省略，必须紧跟在position后</li><li>其他随意</li></ul></li></ul></li><li>background-image<ul><li>背景图片会盖在background-color上（层叠）</li><li>如果设置了多张背景图片，也是层叠</li><li>注：如果设置了背景图片，元素没有具体的宽高，背景图片是不会显示出来的</li></ul></li><li>background-size<ul><li>auto:以背景图本身大小显示</li><li>cover：缩放背景图，以完全覆盖铺满元素</li><li>contain：缩放背景图，宽度或者高度福满元素，但是图片保持宽高比</li><li>百分比、或者具体大小</li></ul></li><li>background-repeat<ul><li>no-repeat：不平铺</li><li>repeat-x：x轴平铺</li><li>repeat-y：y轴平铺</li><li>repeat：x和y都平铺</li></ul></li><li>background-attachment<ul><li>scroll：随着div的滚动（浏览器）的元素而滚动，背景一起滚动</li><li>local：随着div内容的滚动，背景一起滚动，需要div有滚动条</li><li>fixed：背景固定，不会随着div的滚动而滚动，但会随着div的不可见而不可见</li></ul></li><li>background-position<ul><li>具体数值</li><li>水平方向<ul><li>left、center、right</li></ul></li><li>垂直方法<ul><li>top、center、bottom</li></ul></li><li>如果只设置了一个方向，另一个方向默认是center</li></ul></li></ul><h4 id="盒子模型"><a href="#盒子模型" class="headerlink" title="盒子模型"></a>盒子模型</h4><ul><li>标准盒子模型<ul><li>conntent-box: 设置宽度和高度时只指定内容的宽高</li></ul></li><li>IE盒子模型（IE8以下）<ul><li>border-box: 设置宽度和高度时指定内容加内边距加边框</li></ul></li></ul><h5 id="margin"><a href="#margin" class="headerlink" title="margin"></a>margin</h5><ul><li><p>auto</p><ul><li>left、right将剩余的空间均分</li><li>top、bottom都为0</li></ul></li><li><p>上下边距折叠（外边距塌陷）</p></li><li><p>垂直嵌套外边距合并的解决方案:</p><pre><code>1.给父元素定义一个上边框2.给父元素定义一个内边距padding-top3.给父元素一个overflow :hidden</code></pre></li><li><p>上下margin传递</p><ul><li>margin-top传递<ul><li>如果块级元素的顶部线和父元素的顶部线重叠，那么这个块级元素的margin-top值会传递给父元素，即相当于父元素设置margin-top</li></ul></li><li>margin-bottom传递<ul><li>如果块级元素的底部线和父元素的底部线重叠，并且父元素的高度是auto, 那么这个块级元素的margin-bottom值会传递给父元素，即相当于父元素设置margin-bottom</li></ul></li><li>如何防止出现传递问题？<ul><li>给父元素设置padding-top\padding-bottom</li><li>给父元素设置border</li><li>触发BFC：设置overflow为auto/hidden</li></ul></li></ul><p>建议</p><ul><li>margin：一般用来处理兄弟元素之间的间距</li><li>padding：一般用来处理父子元素之间的间距</li></ul></li></ul><h5 id="padding"><a href="#padding" class="headerlink" title="padding"></a>padding</h5><ul><li><p>padding: 0 0 0 0;</p><ul><li>顺时针，上右下左</li></ul></li><li><p>padding: 0 0 0;</p><ul><li>顺时针，上右下, 没有左，左跟随右</li></ul></li><li><p>padding: 0 0;</p><ul><li>顺时针，上右，没有下左，跟随上右</li></ul></li><li><p>如果盒子没有宽度，则padding不会撑开盒子。</p></li><li><p>行内元素只设置左右 内 外边距</p></li><li><p>border</p><ul><li>border-style<ul><li>none</li><li>dotted：原点</li><li>dashed：虚线（常用）</li><li>solid：实线（常用）</li><li>double：双实线</li><li>groove：先凹陷再凸起</li><li>ridge：先凸起再凹陷</li><li>inset：凸起</li><li>outset：凹陷</li></ul></li></ul></li><li><p>width</p><ul><li>max-width</li><li>min-width</li></ul></li><li><p>height</p><ul><li>max-height</li><li>min-height</li></ul></li></ul><h4 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h4><ul><li>list-style</li></ul><h4 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h4><ul><li>border-collapse<ul><li>合并边框</li></ul></li></ul><h4 id="显示"><a href="#显示" class="headerlink" title="显示"></a>显示</h4><ul><li>display<ul><li>block<ul><li>块级元素</li></ul></li><li>inline<ul><li>行内级元素</li></ul></li><li>none<ul><li>隐藏</li><li>不保留空间</li></ul></li><li>inline-block<ul><li>行内块元素</li><li>跟block元素一样，可以嵌套任何元素</li></ul></li><li>display的以下取值，等同于某些HTML元素<ul><li>table：&lt;table&gt;，一个block-level表格</li><li>inline-table：&lt;table&gt;，一个inline-level表格</li><li>table-row：&lt;tr&gt;</li><li>table-row-group: &lt;tbody&gt;</li><li>table-header-group: &lt;thead&gt;</li><li>table-foot-group: &lt;tfoot&gt;</li><li>table-cell: &lt;td&gt;、&lt;th&gt;，一个单元格</li><li>table-caption: &lt;caption&gt; 表格的标题</li><li>list-item：li</li></ul></li></ul></li><li>visibility<ul><li>visible：显示元素</li><li>hidden：隐藏元素<ul><li>虽然元素看不见，但是依然会保留空间</li></ul></li></ul></li><li>overflow<ul><li>visible：超出的内容仍然显示</li><li>hidden：超出的内容隐藏</li><li>scroll：超出部分会隐藏，但是可以通过滚动条显示（滚动条区域也会占据空间，属于width、height）</li><li>auto：有超出部分，可以滚动，没有就正常显示</li><li>overflow-x、overflow-y：可以分别设置水平垂直方向</li></ul></li><li>opacity</li><li>filter</li></ul><h4 id="定位"><a href="#定位" class="headerlink" title="定位"></a>定位</h4><ul><li>vertical-align</li><li>position<ul><li>static</li><li>relative</li><li>absolute<ul><li>定位参照对象的宽度 = left + right + margin-left + margin-right + 绝对定位元素的实际占用宽度</li><li>高度同上</li></ul></li><li>fixed</li></ul></li><li>left top right bottom</li><li>float<ul><li>浮动的规则<ul><li>浮动后，脱离文档流，朝着左（右）方向移动，直到自己的边界紧贴着包含块，或者其他浮动元素的边界上</li><li>浮动元素不能与行内级元素层叠，行内级元素将会被浮动元素推出</li><li>行内级元素、inline-block元素浮动后，其顶部将与所在行的顶部对齐</li><li>浮动元素的边界不能超出包含块的边界</li><li>浮动元素不能重叠</li><li>浮动元素的顶端不能超过包含块的顶端，也不能超过之前所有浮动元素的顶端</li></ul></li></ul></li><li>clear</li></ul><p>标准元素 =&gt; 浮动元素 =&gt; 定位元素</p><h4 id="其他属性"><a href="#其他属性" class="headerlink" title="其他属性"></a>其他属性</h4><p>outline</p><ul><li>表示元素的外轮廓<ul><li>不占据空间，默认显示在border的外面</li><li>相关属性<ul><li>outline-width、outline-style、outline-color</li></ul></li></ul></li></ul><p>box-shadow</p><ul><li><shadow> = inset? &amp;&amp; <length>{2, 4} &amp;&amp; <color>?</li><li>第一个<length>：水平方向的偏移，正数往右偏移</li><li>第二个<length>：垂直方向的偏移，正数往下偏移</li><li>第三个<length>：模糊半径（blur radius）</li><li>第四个<length>：延伸距离</li><li> <color>：阴影的颜色，如果没有设置，就跟随color属性的颜色</li><li>inset：外框阴影变成内框阴影</li></ul><p>text-shadow</p><ul><li>用法类似于box-shadow，用于给文字添加阴影属性</li></ul><p>cursor 光标</p><ul><li>auto：浏览器根据上下文决定指针的显示样式，比如根据文本和非文本切换指针样式</li><li>default：由操作系统决定，一般就是一个小箭头</li><li>pointer：一直小手，鼠标指针挪动到链接上默认就是这个样式</li><li>text：一条竖线</li><li>not-allowed：禁止</li></ul><h3 id="二、CSS选择器-selector"><a href="#二、CSS选择器-selector" class="headerlink" title="二、CSS选择器(selector)"></a>二、CSS选择器(selector)</h3><ul><li>什么是CSS选择器<ul><li>按照一定的规则选出符合条件的元素，为之添加CSS样式</li></ul></li><li>分类</li></ul><h4 id="通用选择器"><a href="#通用选择器" class="headerlink" title="通用选择器"></a>通用选择器</h4><ul><li>*{}</li></ul><h4 id="元素选择器"><a href="#元素选择器" class="headerlink" title="元素选择器"></a>元素选择器</h4><ul><li>div {}     p {}</li></ul><h4 id="类选择器"><a href="#类选择器" class="headerlink" title="类选择器"></a>类选择器</h4><ul><li>.nav {}</li></ul><h4 id="id选择器"><a href="#id选择器" class="headerlink" title="id选择器"></a>id选择器</h4><ul><li>#name {}</li></ul><h4 id="属性选择器"><a href="#属性选择器" class="headerlink" title="属性选择器"></a>属性选择器</h4><ul><li>[title] {}</li><li>[name=”age”] {}</li><li>[title*=”one”] {}<ul><li>包含one的</li></ul></li><li>[title^=”one”] {}<ul><li>one开头的</li></ul></li><li>[title$=”one”] {}<ul><li>one结束的</li></ul></li></ul><h4 id="组合"><a href="#组合" class="headerlink" title="组合"></a>组合</h4><ul><li>后代选择器<ul><li>div span {}<ul><li>包括直接、间接子元素</li></ul></li></ul></li><li>子选择器<ul><li>div&gt;span {}<ul><li>只包括直接子元素</li></ul></li></ul></li><li>相邻兄弟选择器<ul><li>div+p {}<ul><li>div后面紧挨着的p元素</li></ul></li></ul></li><li>全体兄弟选择器<ul><li>div~p {}<ul><li>div后面的p元素</li></ul></li></ul></li><li>交集选择器<ul><li>div.one {}<ul><li>同时符合两个条件的元素</li></ul></li></ul></li><li>并集选择器<ul><li>div, .one {}<ul><li>满足任意一个</li></ul></li></ul></li></ul><h4 id="伪类"><a href="#伪类" class="headerlink" title="伪类"></a>伪类</h4><ul><li>动态伪类<ul><li>常用的 a<ul><li>a:link 未访问的链接</li><li>a:visited 访问过的链接</li><li>a:hover 鼠标停留在上面 <ul><li>注意，hover必须放在link跟visited后面才会生效</li></ul></li><li>a:active 点击时的状态（鼠标点击未松开）<ul><li>:active必须放在hover后面才能完全生效</li></ul></li><li>如果不想a有focus状态<ul><li>tabindex = “-1”<ul><li>表示这个元素不能被键盘tab选中</li></ul></li><li>a:focus { outline: none}<ul><li>去掉轮廓线，假装不能被选中</li></ul></li></ul></li><li>细节： 如果直接给a元素设置样式，相当于给a元素的所有动态伪类都设置了</li></ul></li><li>:focus 获取焦点的时候的状态<ul><li>因为a标签也有focus状态，所以建议编写顺序在hover之后，active之前</li></ul></li></ul></li><li>目标伪类<ul><li>:target {}<ul><li>选择一个ID与当前URL片段匹配的元素</li></ul></li></ul></li><li>语言伪类</li><li>元素状态伪类<ul><li>例如button的 enable 和 disabled <ul><li>:disabled { color: red; }</li></ul></li></ul></li><li>结构伪类<ul><li>:nth-child()<ul><li>n: 自然数</li><li>2n =&gt; even  ：偶数</li><li>2n + 1  =&gt;  odd  :  奇数</li><li>-n + x   ：前x位被选中</li><li>:first-child   =&gt;  :nth-child(1)</li></ul></li><li>:nth-last-child()  倒着数 <ul><li>:last-child  =&gt;  :nth-last-child(1)</li></ul></li><li>:nth-of-type()<ul><li>只计算同种类型的元素</li><li>:first-of-type  =&gt;  :nth-of-type(1)</li></ul></li><li>:nth-last-of-type()<ul><li>:last-of-type  =&gt;  :nth-last-of-type(1)</li></ul></li><li>:only-child   是父元素的唯一的子元素</li><li>:only-of-type  是父元素的唯一的这种子元素</li><li>:root  根元素，即选中html标签</li><li>:empty  元素内容为空</li></ul></li><li>否定伪类<ul><li>:not(x)<ul><li>x是一个简单选择器<ul><li>元素<del>，通用</del>，属性<del>，类</del>，id~,  伪类(除否定伪类)</li></ul></li><li>除了div之外，所有的元素</li></ul></li></ul></li></ul><h4 id="伪元素"><a href="#伪元素" class="headerlink" title="伪元素"></a>伪元素</h4><ul><li><p>为了区分伪元素和伪类，建议伪元素使用两个冒号</p></li><li><p>默认伪元素为行内元素</p></li><li><p>常用的伪元素</p><ul><li>::first-line<ul><li>选中第一行字母  </li><li>只有下列属性可以应用在::first-line伪元素<ul><li>字体属性，颜色属性，背景属性</li><li>word-spacing, letter-spacing,  text-decoration,  text-transform,  line-height</li></ul></li></ul></li><li>::first-letter<ul><li>选中第一个字母</li><li>padding   margin   height  </li></ul></li><li>::before<ul><li>用来在一个元素的内容之前插入其他内容</li><li>content       里面存放内容，不能省略<ul><li>可以用来存放文字或者图片</li></ul></li></ul></li><li>::after<ul><li>用来在一个元素的内容之后插入其他内容</li></ul></li></ul></li></ul><h3 id="三、Emmet语法"><a href="#三、Emmet语法" class="headerlink" title="三、Emmet语法"></a>三、Emmet语法</h3><h4 id="html"><a href="#html" class="headerlink" title="html"></a>html</h4><ul><li><p>同时添加多个属性</p><ul><li>div#header.box1.box2[title=”hehehe”]</li></ul></li><li><p>内容</p><ul><li>div{haha}</li></ul></li><li><p>数字</p><ul><li>ul&gt;li{$}*5<ul><li>1、2、3、4、5</li></ul></li><li>ul&gt;li{$$}*5<ul><li>01、02、03、04、05</li></ul></li></ul></li></ul><h4 id="css"><a href="#css" class="headerlink" title="css"></a>css</h4><ul><li>w200+h200+m20+p30<ul><li>width: 200px;</li><li>height: 200px;</li><li>margin: 20px;</li><li>padding: 30px;</li></ul></li><li>fz20<ul><li>font-size: 20px</li></ul></li><li>fw700<ul><li>font-weight: 700</li></ul></li><li>lh50px<ul><li>line-height: 50px</li></ul></li><li>bgc#222<ul><li>background-color: #222;</li></ul></li><li>dib<ul><li>display: inline-block;</li></ul></li></ul><h3 id="四、CSS的特性"><a href="#四、CSS的特性" class="headerlink" title="四、CSS的特性"></a>四、CSS的特性</h3><h4 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h4><ul><li><p>常见的属性</p><ul><li>color、font-size</li></ul></li><li><p>元素自己设置的元素，是优先级最高的</p></li><li><p>inherit</p><ul><li>强制继承父级的属性</li></ul></li><li><p>浏览器会自动识别哪些属性是继承过来的</p></li><li><p>注意点</p><ul><li><p>CSS属性继承的是计算值，并不是当初编写属性时的指定值（字面值）</p><ul><li><pre><code class="css">.box1 &#123;  width: 50%;   // 250px&#125;.box1 .box2 &#123;  width: inherit;   //250px&#125;</code></pre></li></ul></li></ul></li></ul><h4 id="层叠"><a href="#层叠" class="headerlink" title="层叠"></a>层叠</h4><ul><li><p>基本层叠</p><ul><li>后面的把前面的覆盖掉</li><li>前提<ul><li>使用相同的选择器</li></ul></li></ul></li><li><p>权重</p><ul><li>继承或者*             0，0，0，0</li><li>标签选择器           0，0，0，1</li><li>类，伪类               0，0，1，0</li><li>ID                           0,  1,   0,  0</li><li>行内样式style=”” 1，0，0，0</li><li>!important           无穷大</li></ul></li><li><p>权重的叠加 ： 权重可以叠加，但是无进位。继承的权重为0</p></li></ul><h3 id="五、布局"><a href="#五、布局" class="headerlink" title="五、布局"></a>五、布局</h3><h4 id="flex布局"><a href="#flex布局" class="headerlink" title="flex布局"></a>flex布局</h4><ul><li>当一个元素添加了flex属性，那么它的子元素将自动转化为块级元素</li><li>flex-grow<ul><li>可拉伸</li></ul></li><li>flex-shrink<ul><li>可压缩</li></ul></li><li>flex-basis<ul><li>当前元素的宽度</li></ul></li><li>flex默认值<ul><li>flex-grow: 0, flex-shrink: 1, flex-basis: auto</li></ul></li><li>flex: 1<ul><li>flex-grow: 1, flex-shrink: 1, flex-basis: 0%</li></ul></li><li>flex: auto<ul><li>flex-grow: 1, flex-shrink: 1, flex-basis: auto</li></ul></li></ul><h3 id="BFC"><a href="#BFC" class="headerlink" title="BFC"></a>BFC</h3><ul><li>BFC: block format context</li><li>结界</li></ul><p>如何触发BFC：</p><ul><li>浮动</li><li>设置一个元素的overflow为非visible</li></ul><h3 id="脱标元素"><a href="#脱标元素" class="headerlink" title="脱标元素"></a>脱标元素</h3><p>什么元素会脱离标准流？</p><ul><li>position: fixed;   position: absolute;    float</li></ul><p>脱标元素的特点</p><ul><li>可以随意设置宽高</li><li>宽高默认由内容决定</li><li>不再受标准流的约束</li><li>不再给父元素汇报宽高数据</li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML+CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信小程序学习笔记</title>
      <link href="2021/05/06/wechat/"/>
      <url>2021/05/06/wechat/</url>
      
        <content type="html"><![CDATA[<p>小程序学习笔记<span id="more"></span></p><h1 id="小程序学习笔记"><a href="#小程序学习笔记" class="headerlink" title="小程序学习笔记"></a>小程序学习笔记</h1><h2 id="小程序特点概述"><a href="#小程序特点概述" class="headerlink" title="小程序特点概述"></a>小程序特点概述</h2><ul><li>没有DOM</li><li>组件化开发、具备特定功能效果的代码集合</li><li>体积小，单个压缩包体积不能大于2M，否则无法上线</li><li>小程序四个重要的文件<ul><li>*.js</li><li>*.wxml   =&gt;  view结构    =&gt;  html</li><li>*.wxss    =&gt;  view样式    =&gt;  css</li><li>*.json     =&gt;  view数据    =&gt;   json文件</li></ul></li><li>小程序适配方案：rpx (responsive pixel 响应式像素单位)<ul><li>小程序适配单位：rpx </li><li>规定任何屏幕下宽度为750 rpx</li><li>小程序会根据屏幕的宽度不同自动计算rpx的大小</li><li>Iphone6 下：1 rpx = 1 物理像素 = 0.5 px</li></ul></li></ul><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h3 id="全局"><a href="#全局" class="headerlink" title="全局"></a>全局</h3><ul><li><p>project.config.json</p><ul><li>项目的配置文件</li></ul></li><li><p>sitemap.map</p><ul><li>用于配置小程序及其页面是否允许被微信索引</li></ul></li><li><p>app.js</p><ul><li>全局必须要有一个app.js文件<ul><li>在其中必须调用一次App()，且只能调用一次<ul><li>用于注册小程序，其指定小程序的生命周期回调等</li></ul></li></ul></li></ul></li><li><p>app.json</p><ul><li>用来对微信小程序进行全局配置</li></ul></li><li><p>app.wxss</p><ul><li>小程序会在每个wxml页面最外层套上一层page<ul><li>可以用page来修改全局的一些样式配置</li></ul></li></ul></li></ul><h2 id="wxml语法"><a href="#wxml语法" class="headerlink" title="wxml语法"></a>wxml语法</h2><ul><li>初始化数据<ul><li>页面js的data选项中</li></ul></li><li>使用数据<ul><li>模板结构中使用双大括号</li><li>注：小程序为单项数据流 model =&gt; view</li></ul></li><li>修改数据</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 修改msg的状态数据， 语法 this.setData, 同步操作</span>       console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// this代表当前页面的实例对象</span>       <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>           msg<span class="token operator">:</span> <span class="token string">"修改之后的数据"</span>       <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>事件</p><ul><li>冒泡事件：bindtap</li><li>非冒泡事件: catchtap</li></ul></li><li><p>wx:for</p><ul><li><p>wx:key</p><ul><li>~~~html<br><switch wx:for="" wx:key="unique" style="display: block;">  </switch><pre class="line-numbers language-none"><code class="language-none">    * 与 vue 中 v-if 相比，有较大差异### 自定义组件- 将组件的HTML和css样式添加到组件中，然后哪个页面需要使用，在相应的json文件中注册  - ~~~json    &#123;      &quot;usingComponents&quot;: &#123;        &quot;NavHeader&quot;:&quot;&#x2F;components&#x2F;NavHeader&#x2F;NavHeader&quot;      &#125;    &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul></li><li><p>组件与页面的不同</p><ul><li>注册的页面会自动添加到app.json中的pages中，但组件不会</li><li>使用组件需要在相应的页面中注册</li></ul></li></ul><h2 id="API"><a href="#API" class="headerlink" title="API"></a>API</h2><h3 id="scroll-view"><a href="#scroll-view" class="headerlink" title="scroll-view"></a>scroll-view</h3><ul><li> scroll-x</li></ul><ul><li>虽然横向排列了，但是仍然会在纵向保留相应的高度，所以需要给父容器设置一个高度，抵消影响</li></ul><ul><li><p>enable-flex</p><ul><li>开启这个属性，才能将flex应用到scroll-view上</li></ul></li><li><p>采用image来代替video，进行优化</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"> &lt;video src&#x3D;&quot;&#123;&#123;item.data.urlInfo.url&#125;&#125;&quot;        id&#x3D;&quot;&#123;&#123;item.data.vid&#125;&#125;&quot;        bindplay&#x3D;&quot;handlePlay&quot;         poster&#x3D;&quot;&#123;&#123;item.data.coverUrl&#125;&#125;&quot;        object-fit&#x3D;&quot;cover&quot;        wx:if&#x3D;&quot;&#123;&#123;videoId &#x3D;&#x3D; item.data.vid&#125;&#125;&quot;        bindtimeupdate&#x3D;&quot;handleTimeUpdate&quot;        bindended&#x3D;&quot;handleEnd&quot;        &gt;&lt;&#x2F;video&gt;&lt;image src&#x3D;&quot;&#123;&#123;item.data.coverUrl&#125;&#125;&quot;        alt&#x3D;&quot;暂时无法显示&quot;       id&#x3D;&quot;&#123;&#123;item.data.vid&#125;&#125;&quot;       bindtap&#x3D;&quot;handlePlay&quot;        wx:else &#x2F;&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>下拉加载需要添加以下几个属性</p><ul><li><p>refresher-enabled   //  开启下拉刷新</p><p>bindrefresherrefresh=”handleRefresh”    //  监视下拉刷新的回调</p><p>refresher-triggered=”“     //  控制下拉刷新效果的出现与消失</p></li></ul></li><li><p>上拉触底</p><ul><li>bindscrolltolower=”handleTolower”   // 监视上拉触底的回调</li></ul></li></ul><h3 id="event对象"><a href="#event对象" class="headerlink" title="event对象"></a>event对象</h3><p>向event传参的两种方式</p><ul><li><p>id = value</p><ul><li>获取方式<ul><li>event.currtnyTarget.id</li></ul></li><li>注： 通过id向event传参的时候，如果传的是number类型会自动转化为string</li></ul></li><li><p>data-key = value</p><ul><li>获取方式<ul><li>event.currtnyTarget.dataset.key</li></ul></li></ul></li><li><p>不同点</p><ul><li>id是唯一传参，但是key可以有很多个</li></ul></li></ul><h3 id="常用"><a href="#常用" class="headerlink" title="常用"></a>常用</h3><h4 id="wx-showLoading-Object-object"><a href="#wx-showLoading-Object-object" class="headerlink" title="wx.showLoading(Object object)"></a>wx.showLoading(Object object)</h4><ul><li>显示加载框<ul><li>需要手动关闭</li></ul></li></ul><h4 id="wx-showToast-Object-object"><a href="#wx-showToast-Object-object" class="headerlink" title="wx.showToast(Object object)"></a>wx.showToast(Object object)</h4><ul><li>显示消息提示框（默认图案为√）</li></ul><h5 id="wx-setNavigationBarTitle-Object-object"><a href="#wx-setNavigationBarTitle-Object-object" class="headerlink" title="wx.setNavigationBarTitle(Object object)"></a>wx.setNavigationBarTitle(Object object)</h5><ul><li><p>动态设置当前页面的标题</p><p>在小程序插件中使用时，只能在当前插件的页面中调用</p></li></ul><h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2><ul><li><p>~~~js<br>onload: function (options) {<br>  // options:用于接收路由跳转的query<br>}</p><pre class="line-numbers language-none"><code class="language-none">## 页面通信### npm- 初始化package.json  - ~~~shell    npm init -y<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>下载npm包</p><ul><li>~~~shell<br>npm i packName<pre class="line-numbers language-none"><code class="language-none">- 构建npm  - 工具 &#x3D;&gt; 构建npm- 导入包并使用### pubsub-js- 导入  - ~~~javascript    import PubSub from &#39;pubsub-js&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>使用</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 切换歌曲回调</span><span class="token function">handleSwitch</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">let</span> type <span class="token operator">=</span> event<span class="token punctuation">.</span>currentTarget<span class="token punctuation">.</span>id<span class="token punctuation">;</span><span class="token comment">// console.log(type);</span>PubSub<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token string">'musicId'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">msg<span class="token punctuation">,</span> musicId</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>musicId<span class="token punctuation">)</span><span class="token punctuation">;</span>PubSub<span class="token punctuation">.</span><span class="token function">unsubscribe</span><span class="token punctuation">(</span><span class="token string">'musicId'</span><span class="token punctuation">)</span> <span class="token comment">// 防止多次订阅事件</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>PubSub<span class="token punctuation">.</span><span class="token function">publish</span><span class="token punctuation">(</span><span class="token string">'switchType'</span><span class="token punctuation">,</span> type<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function-variable function">onLoad</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">options</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token operator">...</span>PubSub<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token string">'switchType'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">msg<span class="token punctuation">,</span> type</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token keyword">let</span> <span class="token punctuation">&#123;</span>index<span class="token punctuation">,</span> recommendSongData<span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">===</span> <span class="token string">'pre'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>index<span class="token operator">--</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>index<span class="token operator">++</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> musicId <span class="token operator">=</span> recommendSongData<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>id<span class="token punctuation">;</span>PubSub<span class="token punctuation">.</span><span class="token function">publish</span><span class="token punctuation">(</span><span class="token string">'musicId'</span><span class="token punctuation">,</span> musicId<span class="token punctuation">)</span><span class="token comment">// PubSub.unsubscribe('switchType')</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>jwt</p></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js">app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">'/getOpenId'</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> code <span class="token operator">=</span> req<span class="token punctuation">.</span>query<span class="token punctuation">.</span>code<span class="token punctuation">;</span>  <span class="token keyword">let</span> appId <span class="token operator">=</span> <span class="token string">'wx810e8b1fde386fde'</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> appSecret <span class="token operator">=</span> <span class="token string">'8bb909649da12002fba7a47f5ac3791b'</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> url <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">https://api.weixin.qq.com/sns/jscode2session?appid=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>appId<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">&amp;secret=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>appSecret<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">&amp;js_code=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>code<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">&amp;grant_type=authorization_code</span><span class="token template-punctuation string">`</span></span>  <span class="token comment">// 发请求给微信服务器获取openId</span>  <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token keyword">await</span> fly<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> openId <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span>openid<span class="token punctuation">;</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'openId'</span><span class="token punctuation">,</span> openId<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 自定义登录态</span>   <span class="token keyword">let</span> person <span class="token operator">=</span> <span class="token punctuation">&#123;</span>     username<span class="token operator">:</span> <span class="token string">'北方汉子'</span><span class="token punctuation">,</span>     age<span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">,</span>     openId   <span class="token punctuation">&#125;</span>   <span class="token comment">// 对用户的数据进行加密，生成token返回给客户端</span>  <span class="token keyword">let</span> token <span class="token operator">=</span> jwt<span class="token punctuation">.</span><span class="token function">sign</span><span class="token punctuation">(</span>person<span class="token punctuation">,</span> <span class="token string">'atguigu'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 验证身份，反编译token</span>  <span class="token keyword">let</span> result2 <span class="token operator">=</span> jwt<span class="token punctuation">.</span><span class="token function">verify</span><span class="token punctuation">(</span>token<span class="token punctuation">,</span> <span class="token string">'atguigu'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result2<span class="token punctuation">)</span><span class="token punctuation">;</span>  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> miniprogram </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nodejs学习笔记</title>
      <link href="2021/05/05/nodejs/"/>
      <url>2021/05/05/nodejs/</url>
      
        <content type="html"><![CDATA[<p>nodejs学习笔记 <span id="more"></span></p><h1 id="nodejs学习笔记"><a href="#nodejs学习笔记" class="headerlink" title="nodejs学习笔记"></a>nodejs学习笔记</h1><h2 id="1-nodejs-的安装与使用"><a href="#1-nodejs-的安装与使用" class="headerlink" title="1.nodejs 的安装与使用"></a>1.nodejs 的安装与使用</h2><h3 id="1-1-nodejs是什么？"><a href="#1-1-nodejs是什么？" class="headerlink" title="1.1 nodejs是什么？"></a>1.1 nodejs是什么？</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">Node<span class="token punctuation">.</span>js® is a JavaScript runtime built on Chrome's <span class="token constant">V8</span> JavaScript engine<span class="token punctuation">.</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="1-2-nodejs的安装"><a href="#1-2-nodejs的安装" class="headerlink" title="1.2 nodejs的安装"></a>1.2 nodejs的安装</h3><ul><li><p>官网下载，安装</p></li><li><p>采用淘宝镜像下载</p></li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">npm config <span class="token keyword">set</span> registry https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>registry<span class="token punctuation">.</span>npm<span class="token punctuation">.</span>taobao<span class="token punctuation">.</span>orgnpm config list<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="1-3-nodejs简单介绍"><a href="#1-3-nodejs简单介绍" class="headerlink" title="1.3 nodejs简单介绍"></a>1.3 nodejs简单介绍</h3><h4 id="1-3-1-nodejs简单介绍"><a href="#1-3-1-nodejs简单介绍" class="headerlink" title="1.3.1 nodejs简单介绍"></a>1.3.1 nodejs简单介绍</h4><ul><li><p>每个文件都是一个模块</p><p>函数执行时，传入5个实参，当node在执行模块的代码时，它会首先在代码的最顶部，添加如下代码</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">module</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">exports<span class="token punctuation">,</span> require<span class="token punctuation">,</span> module<span class="token punctuation">,</span> __filename<span class="token punctuation">,</span> __dirname</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">.</span><span class="token punctuation">.</span>                           <span class="token keyword">return</span> module<span class="token punctuation">.</span>exports                                                 <span class="token punctuation">&#125;</span><span class="token comment">// module.exports 直接导出，而非挂载</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">exports<span class="token operator">:</span> 该对象用来讲变量或函数暴露给外部require<span class="token operator">:</span> 函数，用来引入外部的模块module<span class="token operator">:</span> <span class="token operator">-</span>module 代表的是当前模块本身<span class="token operator">-</span>exports <span class="token function">就是module的属性</span>       <span class="token punctuation">(</span>注：module<span class="token punctuation">.</span>exports <span class="token operator">==</span> exports，exports引用了module<span class="token punctuation">.</span>exports<span class="token punctuation">)</span>__filename<span class="token operator">:</span> 动态获取当前模块完整路径__dirname<span class="token operator">:</span> 动态获取当前模块所在文件夹的绝对路径<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>global<span class="token punctuation">)</span> 注<span class="token operator">:</span> node中有全局变量global类似网页中的window，在全局中创建的变量都会作为global的属性保存，在全局中创建的函数都会作为global的方法保存console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span> 注<span class="token operator">:</span> 伪数组，用于存放函数的实参<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="1-3-2-npm-常用指令"><a href="#1-3-2-npm-常用指令" class="headerlink" title="1.3.2 npm 常用指令"></a>1.3.2 npm 常用指令</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// npm -v : 查看版本</span><span class="token comment">// npm : 帮助说明</span><span class="token comment">// npm search 包名 : 搜索模块包</span><span class="token comment">// npm install 包名 : 当前目录安装包   // install 简写 i</span><span class="token comment">// npm install 包名 -g : 全局下载   // global 简写 g</span><span class="token comment">// npm install 包名 -S : 添加到依赖中 // 生产环境 dependencies </span><span class="token comment">// npm install 包名 -D : 添加到依赖中 // 开发环境 devDependencies</span><span class="token comment">// npm remove 包名 : 移除包 简写r remove</span><span class="token comment">// npm install : 自动下载项目所需要的依赖包</span><span class="token comment">// npm config set registry 地址  : 设置镜像源</span><span class="token comment">// npm list -g : 查看所有全局安装的模块</span><span class="token comment">// npm init -y : 快速生成 package.json  -y === --yes</span><span class="token comment">// [...] 可选项</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过npm下载的包都放到node_modules文件夹中，我们通过npm下载的包，直接通过包名引入即可</p><h3 id="1-4-node-RETL-术语"><a href="#1-4-node-RETL-术语" class="headerlink" title="1.4 node RETL (术语)"></a>1.4 node RETL (术语)</h3><pre><code>- read 输入- eval 执行- print 输出- loop 循环</code></pre><h3 id="1-5-require"><a href="#1-5-require" class="headerlink" title="1.5 require"></a>1.5 require</h3><ul><li>require 既引用， 也在执行</li></ul><h2 id="2-nodejs的核心模块"><a href="#2-nodejs的核心模块" class="headerlink" title="2. nodejs的核心模块"></a>2. nodejs的核心模块</h2><h3 id="2-1-文件模块-File-System"><a href="#2-1-文件模块-File-System" class="headerlink" title="2.1 文件模块(File System)"></a>2.1 文件模块(File System)</h3><ul><li><p>所有操作都有同步、异步两种形式可供选择，带Sync为同步，不带Sync为异步</p><ul><li>同步文件系统会阻塞程序的执行，也就是除非操作完毕，否则不会向下执行代码</li><li>异步文件系统不会阻塞程序的执行，而是在操作完成时，通过回调函数将结果返回</li></ul></li><li><p>文件的写入</p><ul><li><p>打开文件</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">fs<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> flags<span class="token punctuation">[</span><span class="token punctuation">,</span> mode<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token function">callback</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> fd<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">// fd : 文件的描述符</span><span class="token comment">// flags : 要打开文件要做的操作的类型</span><span class="token comment">// mode : 设置文件的操作权限，一般不传</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>向文件写入内容</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">fs<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> <span class="token string">'text'</span><span class="token punctuation">,</span><span class="token function">callback</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>保存并关闭文件</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">fs<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> <span class="token function">callback</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li><li><p>fs 其他的方法</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">fs<span class="token punctuation">.</span><span class="token function">existsSync</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span>  <span class="token operator">-</span>检查一个文件是否存在fs<span class="token punctuation">.</span><span class="token function">stat</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> callback<span class="token punctuation">)</span> <span class="token operator">-</span>获取文件信息 会返回一个对象stats，这个对象中保存了当前对象状态的相关信息<span class="token comment">//stats.isFile() : 是否是一个文件</span><span class="token comment">//stats.isDirectory() : 是否是一个文件夹</span><span class="token comment">//stats.size : 文件大小</span>fs<span class="token punctuation">.</span><span class="token function">unlink</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> callback<span class="token punctuation">)</span> <span class="token operator">-</span>删除文件fs<span class="token punctuation">.</span><span class="token function">readdir</span><span class="token punctuation">(</span>path<span class="token punctuation">[</span><span class="token punctuation">,</span> options<span class="token punctuation">]</span><span class="token punctuation">,</span> callback<span class="token punctuation">)</span> <span class="token operator">-</span>读取一个目录的目录结构fs<span class="token punctuation">.</span><span class="token function">truncate</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> len<span class="token punctuation">,</span> callback<span class="token punctuation">)</span> <span class="token operator">-</span>截断文件， 截取单位为字节fs<span class="token punctuation">.</span><span class="token function">mkdir</span><span class="token punctuation">(</span>path<span class="token punctuation">[</span><span class="token punctuation">,</span> mode<span class="token punctuation">]</span><span class="token punctuation">,</span> callback<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token function">创建一个目录</span><span class="token punctuation">(</span>文件夹<span class="token punctuation">)</span>fs<span class="token punctuation">.</span><span class="token function">rmdir</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> callback<span class="token punctuation">)</span> <span class="token operator">-</span>删除一个目录fs<span class="token punctuation">.</span><span class="token function">rename</span><span class="token punctuation">(</span>oldPath<span class="token punctuation">,</span> newPath<span class="token punctuation">,</span> callback<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token function">对文件夹进行重命名</span><span class="token punctuation">(</span>剪切<span class="token punctuation">)</span>fs<span class="token punctuation">.</span><span class="token function">watchFile</span><span class="token punctuation">(</span>filename<span class="token punctuation">[</span><span class="token punctuation">,</span> options<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token function">listener</span><span class="token punctuation">(</span>curr<span class="token punctuation">,</span> prev<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span>监视文件的修改<span class="token comment">// options : &#123; interval: 1000&#125; interval : 检查时间的间隔</span><span class="token comment">// listener : 回调函数，当文件发生变化时，回调函数会执行</span><span class="token comment">// curr 当前文件状态， prev 修改前文件状态</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="2-2-其他核心模块"><a href="#2-2-其他核心模块" class="headerlink" title="2.2 其他核心模块"></a>2.2 其他核心模块</h3><h4 id="2-2-1-http"><a href="#2-2-1-http" class="headerlink" title="2.2.1 http"></a>2.2.1 http</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 最简单的http请求 request</span><span class="token keyword">var</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"http"</span><span class="token punctuation">)</span><span class="token keyword">var</span> server <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>server<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"request"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"收到请求"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>server<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"服务器构建成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">//res.setHeader("Content-Type", "text/html; charset=UTF8") 设置请求头</span><span class="token comment">//res.statusCode = 302  设置状态码</span><span class="token comment">// link script img iframe video audio </span><span class="token comment">// 等带有src 或者 href (link)属性标签(具有外链的资源的时候，浏览器会自动对这些资源发起新的请求)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-2-2-path"><a href="#2-2-2-path" class="headerlink" title="2.2.2 path"></a>2.2.2 path</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">path<span class="token punctuation">.</span><span class="token function">basename</span><span class="token punctuation">(</span><span class="token string">'c:/a/b/c/index.js'</span><span class="token punctuation">)</span> <span class="token comment">// => index.js   底层文件名.后缀</span>path<span class="token punctuation">.</span><span class="token function">basename</span><span class="token punctuation">(</span><span class="token string">'c:/a/b/c/index.js'</span><span class="token punctuation">,</span> <span class="token string">'js'</span><span class="token punctuation">)</span> <span class="token comment">// => index   底层文件名</span>path<span class="token punctuation">.</span><span class="token function">dirname</span><span class="token punctuation">(</span><span class="token string">'c:/a/b/c/index.js'</span><span class="token punctuation">)</span> <span class="token comment">// => c:/a/b/c       目录</span>path<span class="token punctuation">.</span><span class="token function">extname</span><span class="token punctuation">(</span><span class="token string">'c:/a/b/c/index.js'</span><span class="token punctuation">)</span> <span class="token comment">// => js      扩展名</span>path<span class="token punctuation">.</span><span class="token function">isAbsolute</span><span class="token punctuation">(</span><span class="token string">'/c/index.html'</span><span class="token punctuation">)</span>  <span class="token comment">// => true      判断是否为绝对路径</span>path<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">'c:/a/b/c/index.js'</span><span class="token punctuation">)</span>     将路径转化为对象<span class="token punctuation">&#123;</span>  hot<span class="token operator">:</span> <span class="token string">'c:/'</span><span class="token punctuation">,</span>  dir<span class="token operator">:</span> <span class="token string">'c:/a/b/c'</span><span class="token punctuation">,</span>  base<span class="token operator">:</span> <span class="token string">'index.js'</span><span class="token punctuation">,</span>  ext<span class="token operator">:</span> <span class="token string">'js'</span><span class="token punctuation">,</span>  name<span class="token operator">:</span> <span class="token string">'index'</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span>  path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">'c:/a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">)</span> <span class="token comment">// => c:/a/b    拼接路径</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-2-3-其他核心模块"><a href="#2-2-3-其他核心模块" class="headerlink" title="2.2.3 其他核心模块"></a>2.2.3 其他核心模块</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> os <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'os'</span><span class="token punctuation">)</span>   <span class="token comment">//用于获取机器信息的</span>os<span class="token punctuation">.</span>cpus<span class="token punctuation">,</span>   获取当前机器的cpu信息os<span class="token punctuation">.</span>totalmem 内存<span class="token keyword">var</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span> <span class="token comment">//用来操作路径的</span>path<span class="token punctuation">.</span>extname 扩展名<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-异步编程"><a href="#3-异步编程" class="headerlink" title="3. 异步编程"></a>3. 异步编程</h2><h3 id="3-1-callback-回调函数"><a href="#3-1-callback-回调函数" class="headerlink" title="3.1 callback 回调函数"></a>3.1 callback 回调函数</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">exports<span class="token punctuation">.</span><span class="token function-variable function">find</span> <span class="token operator">=</span> <span class="token parameter">callback</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span>dbPath<span class="token punctuation">,</span> <span class="token string">'utf8'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token function">callback</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span>students<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">//回调函数会在异步操作完成后执行，函数形参为回调函数，则会得到回调函数的返回值</span>    router<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/students'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  Student<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'Sever error.'</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// console.log(JSON.parse(data).students);</span>    res<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">'index.html'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>      students<span class="token operator">:</span> data    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-2-promise-fs-API"><a href="#3-2-promise-fs-API" class="headerlink" title="3.2 promise fs API"></a>3.2 promise fs API</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"fs"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token function-variable function">pReadFile</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">filePath</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span>filePath<span class="token punctuation">,</span> <span class="token string">"utf8"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token function">resolve</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token function">pReadFile</span><span class="token punctuation">(</span><span class="token string">"a.txt"</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">pReadFile</span><span class="token punctuation">(</span><span class="token string">"./b.txt"</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token parameter">err</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">pReadFile</span><span class="token punctuation">(</span><span class="token string">"./c.txt"</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token parameter">err</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token parameter">err</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-3-封装Ajax-请求"><a href="#3-3-封装Ajax-请求" class="headerlink" title="3.3 封装Ajax 请求"></a>3.3 封装Ajax 请求</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token parameter">url<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">var</span> oReq <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 当请求加载成功之后要调用指定的函数</span>      oReq<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token function">callback</span><span class="token punctuation">(</span>oReq<span class="token punctuation">.</span>responseText<span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>      oReq<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"get"</span><span class="token punctuation">,</span> url<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      oReq<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'data.json'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-3-promise-基于Ajax的应用场景"><a href="#3-3-promise-基于Ajax的应用场景" class="headerlink" title="3.3 promise 基于Ajax的应用场景"></a>3.3 promise 基于Ajax的应用场景</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token parameter">url<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>          <span class="token keyword">var</span> oReq <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 当请求加载成功之后要调用指定的函数</span>        oReq<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>          callback <span class="token operator">&amp;&amp;</span> <span class="token function">callback</span><span class="token punctuation">(</span>oReq<span class="token punctuation">.</span>responseText<span class="token punctuation">)</span>         <span class="token function">resolve</span><span class="token punctuation">(</span>oReq<span class="token punctuation">.</span>responseText<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>          oReq<span class="token punctuation">.</span><span class="token function-variable function">onerror</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>              <span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>          <span class="token punctuation">&#125;</span>        oReq<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"get"</span><span class="token punctuation">,</span> url<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        oReq<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'data.json'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'data.json'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token function">console</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token parameter">err</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token function">console</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-Express"><a href="#4-Express" class="headerlink" title="4. Express"></a>4. Express</h2><h3 id="4-1-Express的安装与使用"><a href="#4-1-Express的安装与使用" class="headerlink" title="4.1 Express的安装与使用"></a>4.1 Express的安装与使用</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//0 安装</span>npm install express <span class="token operator">--</span>save<span class="token comment">//1 引包</span><span class="token keyword">var</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token comment">//2 创建你服务器应用程序</span><span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">// => http.createServer</span><span class="token comment">//当服务器收到get请求时，执行回调函数</span> app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span> res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'Hello Express!'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token comment">// get => req.query</span><span class="token comment">//公开指定目录</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">'/public/'</span><span class="token punctuation">,</span> express<span class="token punctuation">.</span><span class="token function">static</span><span class="token punctuation">(</span><span class="token string">'./public/'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//忽略第一个参数的时候，则必须通过忽略/public的方式来使用，不省略则无法使用</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">'/a/'</span><span class="token punctuation">,</span> express<span class="token punctuation">.</span><span class="token function">static</span><span class="token punctuation">(</span><span class="token string">'./public/'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">// 即 a 相当于 public 的别名</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-2-扩展-关于文件模块路径，跟模块加载路径"><a href="#4-2-扩展-关于文件模块路径，跟模块加载路径" class="headerlink" title="4.2 扩展 关于文件模块路径，跟模块加载路径"></a>4.2 扩展 关于文件模块路径，跟模块加载路径</h3><h4 id="4-2-1-文件路径"><a href="#4-2-1-文件路径" class="headerlink" title="4.2.1 文件路径"></a>4.2.1 文件路径</h4><ul><li><code>文件操作路径中，相对路径设计的就是相对于执行node命令所处的路径,可以通过___dirname和path.join获得绝对路径，模块路径则不用担心</code></li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token string">'./data/a.txt'</span>  相对路径<span class="token string">'data/a.txt'</span>  相对路径<span class="token string">'/data/a.txt'</span>   相对路径<span class="token string">'c:/data/a.txt'</span> 相对路径<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-2-2模块加载路径"><a href="#4-2-2模块加载路径" class="headerlink" title="4.2.2模块加载路径"></a>4.2.2模块加载路径</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token string">'./data/a.txt'</span>  相对路径<span class="token string">'data/a.txt'</span>  Error<span class="token operator">:</span> Cannot find module <span class="token string">'data/a.txt'</span><span class="token string">'/data/a.txt'</span>   相对路径<span class="token string">'c:/data/a.txt'</span> 相对路径<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-2-3-关于服务器中的路径"><a href="#4-2-3-关于服务器中的路径" class="headerlink" title="4.2.3 关于服务器中的路径"></a>4.2.3 关于服务器中的路径</h4><ul><li>哪些资源可以被用户访问，哪些不可以被用户访问，可以由代码决定</li><li>在服务端中，文件中的路径就不要去写相对路径了，因为这个时候所有的资源都是通过url标识来获取的，开放哪个目录，请求路径就写成那个目录</li><li>例 ： 开放/public/ 目录，则请求路径为/public/xxx</li></ul><h3 id="4-3-Express-怎么使用模板引擎"><a href="#4-3-Express-怎么使用模板引擎" class="headerlink" title="4.3 Express 怎么使用模板引擎"></a>4.3 Express 怎么使用模板引擎</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//0 安装包</span>npm install express<span class="token operator">-</span>art<span class="token operator">-</span>template <span class="token operator">--</span>savenpm install art<span class="token operator">-</span>template <span class="token operator">--</span>save <span class="token comment">//express-art-template 依赖了 art-template</span><span class="token comment">//1 配置</span>app<span class="token punctuation">.</span><span class="token function">engine</span><span class="token punctuation">(</span><span class="token string">'art'</span><span class="token punctuation">,</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express-art-template'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//'art'表示模板文件后缀，可以修改为html</span><span class="token comment">//2使用  配置完即可使用</span>res<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">'html模板名'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>模板名<span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token comment">//第一个参数不能写路径，默认会到项目中的views目录查找该文件模板</span><span class="token comment">//注 : 想要修改默认的views目录，则可以通过set设置</span>app<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">'views'</span><span class="token punctuation">,</span> 新的render函数的默认路径<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-4-Express-获取表单-POST-请求体数据"><a href="#4-4-Express-获取表单-POST-请求体数据" class="headerlink" title="4.4  Express 获取表单 POST 请求体数据"></a>4.4  Express 获取表单 POST 请求体数据</h3><ul><li><p>需要第三方插件： body-parser</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//0 安装包 </span>npm install body<span class="token operator">-</span>parser <span class="token operator">--</span>save<span class="token comment">//1 引用包</span><span class="token keyword">var</span> bodyParser <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'body-parser'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2 配置body-parser 会让req多出一个body属性，可以通过body属性，获得post请求体数据 == req.query</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>bodyParser<span class="token punctuation">.</span><span class="token function">urlencoded</span> <span class="token punctuation">(</span><span class="token punctuation">&#123;</span> extended <span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>bodyParser<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="4-5-自动重启服务器"><a href="#4-5-自动重启服务器" class="headerlink" title="4.5  自动重启服务器"></a>4.5  自动重启服务器</h3><ul><li><p>需要借助一个命令行工具 nodemon</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 安装包</span>npm install <span class="token operator">--</span>global nodemon <span class="token comment">//通过nodemon app.js 会监视文件的变动，如果发生改变，自动重启服务器</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><h3 id="4-6-表单提交"><a href="#4-6-表单提交" class="headerlink" title="4.6 表单提交"></a>4.6 表单提交</h3><ul><li><p>表单中需要提交的表单控件元素必须具有name属性</p></li><li><p>表单提交分为</p><ul><li>1，默认的提交行为</li><li>2， 表单异步提交</li></ul></li><li><p>action 就是表单提交的地址，说白了就是请求的url</p></li></ul><h3 id="4-7-模块化思想，抽离router-js"><a href="#4-7-模块化思想，抽离router-js" class="headerlink" title="4.7 模块化思想，抽离router.js"></a>4.7 模块化思想，抽离router.js</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//普通封装函数 抽取路由</span><span class="token comment">//router.js</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token function">funcion</span> <span class="token punctuation">(</span><span class="token parameter">app</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token comment">// app.js</span><span class="token keyword">var</span> router <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./router'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">router</span><span class="token punctuation">(</span>app<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//Express 自带的方法 抽取路由</span><span class="token comment">//router.js</span><span class="token keyword">var</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> router <span class="token operator">=</span> express<span class="token punctuation">.</span><span class="token function">Router</span><span class="token punctuation">(</span><span class="token punctuation">)</span>router<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> router           <span class="token comment">//app.js</span><span class="token keyword">var</span> router <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./router'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>router<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-8-模块化思想"><a href="#4-8-模块化思想" class="headerlink" title="4.8 模块化思想"></a>4.8 模块化思想</h3><ul><li>模块的职责单一<ul><li>采用模块化开发的目的是为了增强项目代码的可维护性，也可以提升开发效率</li></ul></li><li>app.js入口文件<ul><li>职责：<ul><li>创建服务</li><li>做一些服务相关设置<ul><li>art-template 模板引擎</li><li>body-parser 解析表单post请求</li><li>提供静态资源服务</li></ul></li></ul></li><li>挂载路由</li><li>监听端口启动服务</li></ul></li></ul><h3 id="4-9-ES6新增-find-和-findIndex"><a href="#4-9-ES6新增-find-和-findIndex" class="headerlink" title="4.9 ES6新增 find 和 findIndex"></a>4.9 ES6新增 find 和 findIndex</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> stu <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token punctuation">&#123;</span>id<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span>id<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span>id<span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span>id<span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token comment">// console.log(stu);</span><span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">myFind</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">callback</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> ret <span class="token operator">=</span> stu<span class="token punctuation">.</span><span class="token function">myFind</span><span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> item<span class="token punctuation">.</span>id <span class="token operator">===</span> <span class="token number">4</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ret<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-10-中间件"><a href="#4-10-中间件" class="headerlink" title="4.10 中间件"></a>4.10 中间件</h3><p>注意： 同一个请求，所经历的请求对象跟响应对象都是同一个</p><h4 id="4-10-1应用级别的中间件"><a href="#4-10-1应用级别的中间件" class="headerlink" title="4.10.1应用级别的中间件"></a>4.10.1应用级别的中间件</h4><h5 id="万能匹配"><a href="#万能匹配" class="headerlink" title="万能匹配"></a>万能匹配</h5><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token function">console</span><span class="token punctuation">(</span><span class="token string">'Time'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h5 id="只要-xxx开头的"><a href="#只要-xxx开头的" class="headerlink" title="只要/xxx开头的"></a>只要/xxx开头的</h5><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">'/xxx'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token function">console</span><span class="token punctuation">(</span><span class="token string">'Time'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-10-2-路由级别的中间件"><a href="#4-10-2-路由级别的中间件" class="headerlink" title="4.10.2 路由级别的中间件"></a>4.10.2 路由级别的中间件</h4><h5 id="get"><a href="#get" class="headerlink" title="get"></a>get</h5><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token function">console</span><span class="token punctuation">(</span><span class="token string">'Time'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="post"><a href="#post" class="headerlink" title="post"></a>post</h5><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">app<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token function">console</span><span class="token punctuation">(</span><span class="token string">'Time'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="put"><a href="#put" class="headerlink" title="put"></a>put</h5><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">app<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token function">console</span><span class="token punctuation">(</span><span class="token string">'Time'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="delete"><a href="#delete" class="headerlink" title="delete"></a>delete</h5><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">app<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token function">console</span><span class="token punctuation">(</span><span class="token string">'Time'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="4-10-3-Express中，对中间件的分类"><a href="#4-10-3-Express中，对中间件的分类" class="headerlink" title="4.10.3 Express中，对中间件的分类"></a>4.10.3 Express中，对中间件的分类</h4><ul><li>不关心请求路径和请求方法的中间件，任何请求均可进入</li><li>中间件本身是一个方法，该方法接受三个参数<ul><li>Request：请求对象</li><li>Response: 响应对象</li><li>next：进入下一个中间件</li></ul></li></ul><p>注：当一个请求进入到一个中间件，不调用next方法，则会停留在这个中间件中</p><p>​        如果没有匹配的路径，则Express会默认输出Cannot GET 路径</p><h2 id="5-MongoDB"><a href="#5-MongoDB" class="headerlink" title="5. MongoDB"></a>5. MongoDB</h2><h3 id="5-1-MongoDB-下载与安装"><a href="#5-1-MongoDB-下载与安装" class="headerlink" title="5.1 MongoDB 下载与安装"></a>5.1 MongoDB 下载与安装</h3><ul><li>下载</li><li>安装</li><li>配置环境变量</li><li>查看版本    </li></ul><h3 id="5-2-MongoDB-基本指令"><a href="#5-2-MongoDB-基本指令" class="headerlink" title="5.2 MongoDB 基本指令"></a>5.2 MongoDB 基本指令</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">show dbs</span><span class="token template-punctuation string">`</span></span>    <span class="token operator">:</span> 查看所有数据库<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">use 数据库名称</span><span class="token template-punctuation string">`</span></span><span class="token operator">:</span> 切换到指定的数库<span class="token punctuation">,</span> <span class="token punctuation">(</span>如果没有则会新建<span class="token punctuation">,</span>在输入数据之后<span class="token punctuation">)</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">db</span><span class="token template-punctuation string">`</span></span>          <span class="token operator">:</span> 查看当前所属数据库<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">show collections</span><span class="token template-punctuation string">`</span></span><span class="token operator">:</span> <span class="token function">查看当前数据库所有集合</span><span class="token punctuation">(</span>表<span class="token punctuation">)</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">db.集合名.find()</span><span class="token template-punctuation string">`</span></span><span class="token operator">:</span> 查看表中的数据<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-3-Mongoose"><a href="#5-3-Mongoose" class="headerlink" title="5.3 Mongoose"></a>5.3 Mongoose</h3><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p><code>npm i mongoose</code></p><h4 id="例"><a href="#例" class="headerlink" title="例"></a>例</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> mongoose <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'mongoose'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>mongoose<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token string">'mongodb://localhost/test'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> Cat <span class="token operator">=</span> mongoose<span class="token punctuation">.</span><span class="token function">model</span><span class="token punctuation">(</span><span class="token string">'Cat'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> name<span class="token operator">:</span> String <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> kitty <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> name<span class="token operator">:</span> <span class="token string">'Zildjian'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>kitty<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'meow'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>常用方法</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">Schema<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">populate</span><span class="token punctuation">(</span><span class="token string">'parent'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token comment">// find,查找</span><span class="token comment">// populate, 如果数据库中有一个字段是关联字段的话，我们就可以使用populate查找出来</span><span class="token comment">// limit, 限制数据</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="设计文档发布模型"><a href="#设计文档发布模型" class="headerlink" title="设计文档发布模型"></a>设计文档发布模型</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> mongoose <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'mongoose'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//1. 连接数据库</span>mongoose<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token string">'mongodb://localhost/test'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//默认连接本机的test数据库</span><span class="token comment">//2.设计文档结构</span><span class="token keyword">var</span> userSchema <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Schema</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    user<span class="token operator">:</span> <span class="token punctuation">&#123;</span>        type<span class="token operator">:</span> String<span class="token punctuation">,</span>        required<span class="token operator">:</span> <span class="token boolean">true</span>  <span class="token comment">// 必须填写</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    email<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    type<span class="token operator">:</span> String    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">//3.将文档结构发布为模型</span><span class="token keyword">var</span> User <span class="token operator">=</span> mongoose<span class="token punctuation">.</span><span class="token function">model</span><span class="token punctuation">(</span><span class="token string">'User'</span><span class="token punctuation">,</span> userSchema<span class="token punctuation">)</span><span class="token comment">//第一个参数：传入一个大写名词的字符串，model函数会自动生成小写复数的集合名称</span><span class="token comment">//第二个参数：架构Schema</span><span class="token comment">//返回值：模型构造函数</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="增加数据"><a href="#增加数据" class="headerlink" title="增加数据"></a>增加数据</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> admin <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    user<span class="token operator">:</span> <span class="token string">"admin"</span><span class="token punctuation">,</span>    email<span class="token operator">:</span> <span class="token string">"admin@admin.com"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>admin<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> ret</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"添加成功"</span><span class="token punctuation">)</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ret<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="查询数据"><a href="#查询数据" class="headerlink" title="查询数据"></a>查询数据</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//#region  查找数据</span><span class="token comment">// 1. 默认查找方式，全部，返回为一个数组</span>User<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> ret</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ret<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">// 2. 查找匹配文档， 返回为一个数组</span>User<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  user<span class="token operator">:</span> <span class="token string">"zs"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> ret</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ret<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">// 3.返回首个匹配的文档, 返回值为对象</span>User<span class="token punctuation">.</span><span class="token function">findOne</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  user<span class="token operator">:</span> <span class="token string">"zs"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> ret</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ret<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">//#endregion</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//#region  删除数据</span><span class="token comment">// User.deleteOne(&#123;</span><span class="token comment">//   user: "zs"</span><span class="token comment">// &#125;, err => &#123;</span><span class="token comment">//   console.log(err);</span><span class="token comment">// &#125;)</span><span class="token comment">//#endregion 删除数据</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="更改数据"><a href="#更改数据" class="headerlink" title="更改数据"></a>更改数据</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//#region  更改数据</span>User<span class="token punctuation">.</span><span class="token function">findOneAndUpdate</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  email<span class="token operator">:</span> <span class="token string">"zs@zs.com"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>  user<span class="token operator">:</span> <span class="token string">"zs"</span><span class="token punctuation">,</span>  email<span class="token operator">:</span> <span class="token string">"zs@zs.com"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> ret</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ret<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">//#endregion 更改数据</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="其他操作"><a href="#其他操作" class="headerlink" title="其他操作"></a>其他操作</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// .deleteMany(&#123;&#125;)</span><span class="token keyword">await</span> Artcle<span class="token punctuation">.</span><span class="token function">deleteMany</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 以任意操作查询并删除，清空数据库</span><span class="token comment">// .insertMany()</span><span class="token keyword">await</span> Article<span class="token punctuation">.</span><span class="token function">insertMany</span><span class="token punctuation">(</span>newList<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 插入一些数据</span><span class="token comment">// 聚合查询</span><span class="token keyword">await</span> Category<span class="token punctuation">.</span><span class="token function">aggregate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// $project：修改输入文档的结构。可以用来重命名、增加或删除域，也可以用于创建计算结果以及嵌套文档。</span><span class="token comment">// $match：用于过滤数据，只输出符合条件的文档。$match使用MongoDB的标准查询操作。</span><span class="token comment">// $limit：用来限制MongoDB聚合管道返回的文档数。</span><span class="token comment">// $skip：在聚合管道中跳过指定数量的文档，并返回余下的文档。</span><span class="token comment">// $unwind：将文档中的某一个数组类型字段拆分成多条，每条包含数组中的一个值。</span><span class="token comment">// $group：将集合中的文档分组，可用于统计结果。</span><span class="token comment">// $sort：将输入文档排序后输出。</span><span class="token comment">// $geoNear：输出接近某一地理位置的有序文档</span><span class="token comment">// $lookup: 多表联查</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Mongoose-所有的-API-都支持-promise"><a href="#Mongoose-所有的-API-都支持-promise" class="headerlink" title="Mongoose 所有的 API 都支持 promise"></a><code>Mongoose 所有的 API 都支持 promise</code></h4><h2 id="6-其他"><a href="#6-其他" class="headerlink" title="6. 其他"></a>6. 其他</h2><ol><li><code> 服务端重定向对于异步请求无效</code></li></ol><h3 id="6-1-aysnc-跟-await"><a href="#6-1-aysnc-跟-await" class="headerlink" title="6.1 aysnc 跟 await"></a>6.1 aysnc 跟 await</h3><ul><li><p>用法</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">await</span> <span class="token comment">//   暂停后面代码的运行  作用：将异步代码变为同步代码</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="6-2-session"><a href="#6-2-session" class="headerlink" title="6.2 session"></a>6.2 session</h3><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">app.use(session(&#123;secret: &#39;cat&#39;   &#x2F;&#x2F; 作用，在加密的密码后面拼接 字符串  增加安全性，防止客服端恶意伪造resave: true,   &#x2F;&#x2F;   saveUninitialized: false  &#x2F;&#x2F;  如果为true 则无论是否使用session都分配一个cookie  &#x2F;&#x2F; 需要开启https才可以进行下面命令  &#x2F;&#x2F; cookie: &#123; secure: true &#125;&#125;))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 添加session数据</span>req<span class="token punctuation">.</span>session<span class="token punctuation">.</span>foo <span class="token operator">=</span> <span class="token string">'bar'</span><span class="token comment">// 获取session数据</span>req<span class="token punctuation">.</span>session<span class="token punctuation">.</span>foo<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>提示，默认Session数据是内存存储的，服务器一旦重启，Session就会丢失，真正的生产环境是将Session持久化</p><h3 id="6-3-Cookie-和-Session-的区别"><a href="#6-3-Cookie-和-Session-的区别" class="headerlink" title="6.3 Cookie 和 Session 的区别"></a>6.3 Cookie 和 Session 的区别</h3><p>http是无状态的。</p><ul><li><code>Cookie</code>, 存储在客户端上，是服务器给客户端添加的内容，不太安全，可以用来保存一些不太敏感的数据</li><li><code>Session</code>,存储在服务器上，比较安全，用来保存状态，类似保险柜，发送客服端一把钥匙(Cookie)，钥匙丢失，状态丢失</li></ul><h3 id="cors"><a href="#cors" class="headerlink" title="cors"></a>cors</h3><ul><li>处理跨域问题</li></ul><h3 id="inflection"><a href="#inflection" class="headerlink" title="inflection"></a>inflection</h3><ul><li>处理单词大小写、单复数转化问题</li></ul>]]></content>
      
      
      <categories>
          
          <category> 服务器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nodejs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TypeScript学习笔记</title>
      <link href="2021/05/05/typescript/"/>
      <url>2021/05/05/typescript/</url>
      
        <content type="html"><![CDATA[<p>TypeScript学习笔记 <span id="more"></span></p><h1 id="TypeScript学习笔记"><a href="#TypeScript学习笔记" class="headerlink" title="TypeScript学习笔记"></a>TypeScript学习笔记</h1><h2 id="1-TypeScript-简介"><a href="#1-TypeScript-简介" class="headerlink" title="1. TypeScript 简介"></a>1. TypeScript 简介</h2><ul><li><p>TypeScript是JavaScript的超集</p></li><li><p>相对于JavaScript来说，Typescript的优势</p><ul><li>类型化思维方式：使得开发更加严谨，提前发现错误，减少改bug时间</li><li>类型系统提高了代码的可读性，并使维护和重构代码更容易</li><li>补充了接口，枚举dd等大型应用时JS缺失的功能。</li></ul></li><li><p>类型注解：是一种为变量添加类型约束的方式</p><p>​                    可以用<code>|</code>来连接，同时定义多种变量类型</p></li></ul><h2 id="2-TypeScript-基本使用"><a href="#2-TypeScript-基本使用" class="headerlink" title="2. TypeScript 基本使用"></a>2. TypeScript 基本使用</h2><h4 id="变量类型"><a href="#变量类型" class="headerlink" title="变量类型"></a>变量类型</h4><table><thead><tr><th align="center">类型</th><th align="center">例子</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">number</td><td align="center">1，-33</td><td align="center">任意数字</td></tr><tr><td align="center">string</td><td align="center">‘x’, ‘o’</td><td align="center">任意字符串</td></tr><tr><td align="center">boolean</td><td align="center">true, false</td><td align="center">布尔值true或false</td></tr><tr><td align="center">字面量</td><td align="center">其本身</td><td align="center">限制变量的值就是该自变量得值</td></tr><tr><td align="center">any</td><td align="center">*</td><td align="center">任意类型</td></tr><tr><td align="center">unknown</td><td align="center">*</td><td align="center">类型安全的any</td></tr><tr><td align="center">void</td><td align="center">空值(undefined)</td><td align="center">没有值，或undefined</td></tr><tr><td align="center">never</td><td align="center">没有值</td><td align="center">不能是任何值</td></tr><tr><td align="center">object</td><td align="center">{}</td><td align="center">任意对象</td></tr><tr><td align="center">array</td><td align="center">[]</td><td align="center">任意数组</td></tr><tr><td align="center">tuple</td><td align="center">[4,5]</td><td align="center">元素，TS新增类型，固定长度数组</td></tr><tr><td align="center">enum</td><td align="center">enum(1,b)</td><td align="center">枚举，TS中新增类型</td></tr></tbody></table><ul><li><p>unknown 和 any 的区别</p><ul><li>如果把any变量赋给其他变量，则会改变其他变量的变量类型为any</li><li>unknown无法改变其他变量的变量的类型</li></ul></li><li><p>never与void的区别 ：void也算是一种返回类型，但是never不会返回</p></li></ul><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// never的使用场景</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">never</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'报错了！'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>tuple   固定长度的数组</li></ul><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">let</span> b<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">string</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>类型的别名</li></ul><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// 可以用type来给类型起别名，适用于字面量类型</span><span class="token keyword">let</span> i <span class="token operator">:</span> <span class="token number">1</span><span class="token operator">|</span><span class="token number">2</span><span class="token operator">|</span><span class="token number">3</span><span class="token operator">|</span><span class="token number">4</span><span class="token operator">|</span><span class="token number">5</span><span class="token keyword">type</span> <span class="token class-name">myType</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">|</span><span class="token number">2</span><span class="token operator">|</span><span class="token number">3</span><span class="token operator">|</span><span class="token number">4</span><span class="token operator">|</span><span class="token number">5</span><span class="token keyword">let</span> i <span class="token operator">:</span> myType<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-1-TypeScript-与-VScode"><a href="#2-1-TypeScript-与-VScode" class="headerlink" title="2.1 TypeScript 与 VScode"></a>2.1 TypeScript 与 VScode</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">&#x2F;&#x2F;   安装typescriptnpm i -g typescript&#x2F;&#x2F;   将TS文件转换成JS文件tsc 要转换的文件&#x2F;&#x2F;   监视TS文件的变化并随之改变JS文件tsc --watch 要监视的文件&#x2F;&#x2F;   简化typescript在node环境执行的步骤npm i -g ts-node&#x2F;&#x2F; 断点调试，在当前目录下载npm i ts-node typescript<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>include<ul><li>用来指定什么路径下的文件被解析</li></ul></li><li>compilerOptions<ul><li>编辑选项是配置文件中非常重要也比较复杂的配置选项</li><li>在compilerOptions中包含多少子选项，用来完成对编译的设置<ul><li>target<ul><li>设置ts代码编译的目标版本</li></ul></li><li>module<ul><li>指定要使用的模块化的规范</li></ul></li><li>lib<ul><li>指定项目中要使用的库</li></ul></li><li>outDir<ul><li>指定解析后的js文件的所在目录</li></ul></li><li>outFile<ul><li>将代码合并到一个文件</li></ul></li><li>allowJs<ul><li>是否对JS文件进行编译，默认是false</li></ul></li><li>checkJS<ul><li>是否检查JS代码是否符合语法规范，默认是false</li></ul></li><li>removeComments<ul><li>是否移除注释</li></ul></li><li>noEmit<ul><li>不生成编译后的文件</li></ul></li><li>noEmitOnError<ul><li>当有错误时，不生成编译后的文件</li></ul></li><li>strict<ul><li>严格模式的总开关，开启之后，所有严格模式都会开启</li></ul></li><li>alwaysStrict<ul><li>用来设置编译后的文件是否使用严格模式</li></ul></li><li>noImplicitAny<ul><li>不允许出现隐式any类型</li></ul></li><li>noImplicitThis<ul><li>不允许不明确类型的this</li></ul></li><li>strictNullChecks<ul><li>严格的检查空值</li></ul></li></ul></li></ul></li></ul><h5 id="使用webpack打包ts文件"><a href="#使用webpack打包ts文件" class="headerlink" title="使用webpack打包ts文件"></a>使用webpack打包ts文件</h5><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">&#x2F;&#x2F; 初始化项目npm init -y&#x2F;&#x2F; 下载需要的开发依赖npm i -D webpack webpack-cli typescript ts-loader&#x2F;&#x2F; 下载html-webpack-plugin插件npm i -D html-webpack-plugin&#x2F;&#x2F; 下载webpack-dev-server  内置服务器npm i -D webpack-dev-server&#x2F;&#x2F; 下载clean-webpack-plugin插件npm i -D clean-webpack-plugin&#x2F;&#x2F; 下载Babelnpm i -D @babel&#x2F;core @babel&#x2F;preset-env babel-loader core-js<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>配置webpack.config.js</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 引入path包</span><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token keyword">const</span> HtmlWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'html-webpack-plugin'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token punctuation">&#123;</span> CleanWebpackPlugin <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'clean-webpack-plugin'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//webpack所有的配置信息都应该卸载module.exports中</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 指定入口文件</span>  entry<span class="token operator">:</span> <span class="token string">"./src/index.ts"</span><span class="token punctuation">,</span>    <span class="token comment">// 指定打包后的目录</span>  output<span class="token operator">:</span> <span class="token punctuation">&#123;</span>  path<span class="token operator">:</span> <span class="token function">path</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'dist'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    filename<span class="token operator">:</span> <span class="token string">'bundle.js'</span><span class="token punctuation">,</span>    <span class="token comment">// 告诉webpack，不使用箭头函数</span>    environment<span class="token operator">:</span> <span class="token punctuation">&#123;</span>      arrowFunction<span class="token operator">:</span> <span class="token boolean">false</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token comment">// 指定webpack打包时要使用的模块</span>  module<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 指定加载的规则</span>    rules<span class="token operator">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">&#123;</span>        <span class="token comment">//test指定的是规则生效的文件</span>        test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.ts$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>        <span class="token comment">// 要使用的loader</span>        use<span class="token operator">:</span> <span class="token punctuation">[</span>          <span class="token comment">// 配置babel</span>          <span class="token punctuation">&#123;</span>            <span class="token comment">// 指定加载器</span>            loader<span class="token operator">:</span> <span class="token string">"babel-loader"</span><span class="token punctuation">,</span>            <span class="token comment">// 设置babel</span>            options<span class="token operator">:</span> <span class="token punctuation">&#123;</span>              <span class="token comment">// 指定预定义的环境</span>              presets<span class="token operator">:</span> <span class="token punctuation">[</span>                <span class="token punctuation">[</span>                  <span class="token comment">// 指定环境的插件</span>                  <span class="token string">"@babel/preset-env"</span><span class="token punctuation">,</span>                  <span class="token comment">// 配置信息</span>                  <span class="token punctuation">&#123;</span>                    <span class="token comment">// 要兼容的目标浏览器</span>                    targets<span class="token operator">:</span> <span class="token punctuation">&#123;</span>                      <span class="token string">"chrome"</span><span class="token operator">:</span> <span class="token string">"88"</span>                    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                    <span class="token comment">// 指定corejs的版本</span>                    <span class="token string">"corejs"</span><span class="token operator">:</span> <span class="token string">"3"</span><span class="token punctuation">,</span>                    <span class="token comment">// 使用corejs的方式 usage 表示按需加载</span>                    <span class="token string">"useBuiltIns"</span><span class="token operator">:</span> <span class="token string">"usage"</span>                  <span class="token punctuation">&#125;</span>                <span class="token punctuation">]</span>              <span class="token punctuation">]</span>            <span class="token punctuation">&#125;</span>          <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>           <span class="token string">'ts-loader'</span>        <span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token comment">// 要排除的文件</span>        exclude<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">nodule_modules</span><span class="token regex-delimiter">/</span></span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">]</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token comment">// 配置webpack插件</span>  plugins<span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token comment">// 执行build时，先删除dist内文件，再重新生成，防止原来的文件存在</span>    <span class="token keyword">new</span> <span class="token class-name">CleanWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>      title<span class="token operator">:</span> <span class="token string">"这是一个我自定义的title"</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token comment">// 用来设置引用模块</span>  resolve<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 告诉webpack,以.ts和.js的文件是可以被当作模块使用的</span>    extensions<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'.ts'</span><span class="token punctuation">,</span> <span class="token string">'.js'</span><span class="token punctuation">]</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>配置tsconfig.json</li></ul><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token comment">// 编辑选项是配置文件中非常重要也比较复杂的配置选项</span>  <span class="token property">"compilerOptions"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token property">"target"</span><span class="token operator">:</span> <span class="token string">"ES6"</span><span class="token punctuation">,</span>                                <span class="token comment">/* Specify ECMAScript target version: 'ES3' (default), 'ES5', 'ES2015', 'ES2016', 'ES2017', 'ES2018', 'ES2019', 'ES2020', or 'ESNEXT'. */</span>    <span class="token property">"module"</span><span class="token operator">:</span> <span class="token string">"es2015"</span><span class="token punctuation">,</span>                           <span class="token comment">/* Specify module code generation: 'none', 'commonjs', 'amd', 'system', 'umd', 'es2015', 'es2020', or 'ESNext'. */</span>    <span class="token property">"noEmitOnError"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token comment">/* Strict Type-Checking Options */</span>    <span class="token property">"strict"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                                  <span class="token property">"forceConsistentCasingInFileNames"</span><span class="token operator">:</span> <span class="token boolean">true</span>        <span class="token comment">/* Disallow inconsistently-cased references to the same file. */</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>配置package.json</li></ul><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>  <span class="token property">"build"</span><span class="token operator">:</span> <span class="token string">"webpack"</span><span class="token punctuation">,</span>  <span class="token comment">// 使用build代替webpack</span>  <span class="token property">"start"</span><span class="token operator">:</span> <span class="token string">"webpack serve --open chrome.exe"</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-2运算符"><a href="#2-2运算符" class="headerlink" title="2.2运算符"></a>2.2运算符</h4><ul><li>除加号以外，其他<code>算术运算符</code>只应该跟数字类型一起使用。</li><li>特殊情况</li></ul><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">-</span> <span class="token operator">+</span><span class="token string">'1'</span><span class="token punctuation">)</span> <span class="token comment">//+'1' === number('1')</span><span class="token comment">// &amp; 表示同时</span><span class="token keyword">let</span> j<span class="token operator">:</span> <span class="token punctuation">&#123;</span>name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">&#125;</span> <span class="token operator">&amp;</span> <span class="token punctuation">&#123;</span>age<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-3-数组"><a href="#2-3-数组" class="headerlink" title="2.3 数组"></a>2.3 数组</h4><ul><li>创建数组</li></ul><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// 语法一</span><span class="token keyword">let</span> names<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token comment">// 数组的类型注解由两部分组成：类型+[]。此处表示字符串类型的数组（只能出现字符串类型）</span><span class="token comment">// 语法二</span><span class="token keyword">let</span> names<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token builtin">Array</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">//不推荐</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>存值和取值</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 1.如果索引存在，则修改值</span>foods<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'包子'</span><span class="token comment">// 2.如果索引不存在，则添加元素</span>foods<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'包子'</span>foods<span class="token punctuation">[</span>foods<span class="token punctuation">.</span>length<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'油泼面'</span>  <span class="token comment">// 往数组的最后添加一个元素</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-4-函数"><a href="#2-4-函数" class="headerlink" title="2.4 函数"></a>2.4 函数</h4><ul><li>注：如果没有指定函数的返回值，那么默认函数的返回值为void（空，什么都没有）</li></ul><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// 可以在函数声明时，指定函数返回值的类型</span><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> 类型注解 <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> 返回值<span class="token punctuation">&#125;</span><span class="token comment">//参数的类型注解  如果一开始不清楚参数的类型，可以采用匿名函数获取参数类型</span><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span>event<span class="token operator">:</span> MouseEvent<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  event<span class="token punctuation">.</span>target<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-5-对象"><a href="#2-5-对象" class="headerlink" title="2.5 对象"></a>2.5 对象</h4><ul><li>对象：一组相关属性和方法的集合，并且是无序的<ul><li>在属性后面加?, 表示属性可选</li></ul></li></ul><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// 对象属性的类型注解</span><span class="token keyword">let</span> person<span class="token operator">:</span> <span class="token punctuation">&#123;</span>  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>  age<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">&#125;</span><span class="token comment">//  对象赋值</span>person <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  name<span class="token operator">:</span> <span class="token string">'zhangsan'</span><span class="token punctuation">,</span><span class="token comment">//  age: 18</span><span class="token punctuation">&#125;</span><span class="token comment">// [propName: string]: any 表示任意类型的属性</span><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">[</span>propName<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">&#125;</span>a <span class="token operator">=</span> <span class="token punctuation">&#123;</span>name<span class="token operator">:</span> <span class="token string">'zs'</span><span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">&#125;</span><span class="token comment">// 对象方法的类型注解</span><span class="token comment">// 分为是否有参数、返回值两种类型</span><span class="token keyword">let</span> person<span class="token operator">:</span> <span class="token punctuation">&#123;</span>  <span class="token function-variable function">sayHi</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">void</span><span class="token punctuation">,</span>  <span class="token function-variable function">sing</span><span class="token operator">:</span> <span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">void</span>  <span class="token function-variable function">sun</span><span class="token operator">:</span> <span class="token punctuation">(</span>num1<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> num2<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token builtin">number</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-6-TS的类型推论"><a href="#2-6-TS的类型推论" class="headerlink" title="2.6 TS的类型推论"></a>2.6 TS的类型推论</h4><ul><li>类型推论可以省略 类型注释</li><li>发生类型推论的2种常见场景，1.声明变量并初始化时，2.决定函数返回值时</li></ul><h4 id="2-7-类型断言"><a href="#2-7-类型断言" class="headerlink" title="2.7 类型断言"></a>2.7 类型断言</h4><ul><li>由于querySelector()通过id选择器获取DOM元素时，拿到的元素类型都是Element</li><li>导致问题：无法访问标签的其他属性，类似img的src属性， 类型断言可以解决</li></ul><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// 用法1 变量 as 类型</span><span class="token keyword">let</span> img <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#img'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> HTMLImageElement<span class="token comment">// 用法2 &lt;类型>变量</span><span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">></span>img<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-8-枚举-enum"><a href="#2-8-枚举-enum" class="headerlink" title="2.8 枚举 enum"></a>2.8 枚举 enum</h4><ul><li>使用方法</li></ul><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">enum</span> currentPlayer <span class="token punctuation">&#123;</span>x<span class="token punctuation">,</span> o<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">let</span> userPlayer <span class="token operator">:</span> currentPlayer <span class="token operator">=</span> currentPlayer<span class="token punctuation">.</span>x<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li><p>使用场景</p><p>当变量的值，<strong>只能是固定的几个值之一</strong>，应该采用枚举实现</p></li><li><p>总结</p><p>枚举是组织有关联数据的一种方式</p><p>枚举是一堆有名字的只读常量的集合</p></li><li><p>注意：枚举中的成员只是可读的，因此，只能访问，不能赋值</p></li></ul><h4 id="2-9-类"><a href="#2-9-类" class="headerlink" title="2.9 类"></a>2.9 类</h4><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// 1.声明普通类</span><span class="token keyword">class</span> <span class="token class-name"><span class="token constant">A</span></span> <span class="token punctuation">&#123;</span>  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>  age<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>    <span class="token keyword">constructor</span> <span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>直接定义的属性是实例实行，需要通过类的实例去访问</li><li>static定义的为静态属性，可以直接通过类型调用</li><li>readonly开头的属性表示一个可读的属性，不可以修改</li><li>abstract开头的为抽象类，不能创建实例<ul><li>抽象方法只能定义在抽象类和接口中，抽象方法没有方法体，子类必须重写抽象方法</li></ul></li></ul><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// 抽象类的使用</span><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">&#123;</span>  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>  age<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>  <span class="token keyword">abstract</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token keyword">void</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 继承</span><span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span> <span class="token punctuation">&#123;</span>  name<span class="token operator">:</span> <span class="token string">"xixi"</span><span class="token punctuation">;</span>  age<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">;</span>  <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'汪汪汪汪！'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>接口<ul><li>接口可以重复声明，所有重复声明加在一起为接口实际内容</li><li>接口内部都是抽象属性和抽象方法</li></ul></li></ul><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">IUser</span> <span class="token punctuation">&#123;</span>  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>  age<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">&#125;</span><span class="token comment">// 实现接口</span><span class="token keyword">let</span> p1<span class="token operator">:</span> IUser <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  name<span class="token operator">:</span> <span class="token string">'zhangsan'</span><span class="token punctuation">,</span>  age<span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> p2 <span class="token keyword">implements</span> <span class="token class-name">IUser</span> <span class="token punctuation">&#123;</span>  name<span class="token operator">:</span> <span class="token string">'zhangsan'</span><span class="token punctuation">,</span>  age<span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>属性的封装</li></ul><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// public 在任何地方都可以访问</span><span class="token comment">// private 只能在类内部进行访问</span><span class="token comment">// protected 受包含的属性，只能在当前类或者子类中使用</span><span class="token comment">// private</span><span class="token comment">// 注意：在TS中，标识符不能相同，所以属性名，跟get，set方法名不能相同</span><span class="token keyword">class</span> <span class="token class-name"><span class="token constant">A</span></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token keyword">private</span> _name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token keyword">private</span> _age<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>  <span class="token keyword">get</span> <span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_name<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">set</span> <span class="token function">name</span><span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>_name <span class="token operator">=</span> name  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token constant">A</span></span><span class="token punctuation">(</span><span class="token string">'zs'</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>语法糖</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 语法糖</span><span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">&#123;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token keyword">public</span> name<span class="token operator">:</span> string<span class="token punctuation">,</span> <span class="token keyword">public</span> age<span class="token operator">:</span> number<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TypeScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>随笔</title>
      <link href="2021/05/05/study-style/"/>
      <url>2021/05/05/study-style/</url>
      
        <content type="html"><![CDATA[<p>个人学习方式 <span id="more"></span></p><h2 id="思维导图"><a href="#思维导图" class="headerlink" title="思维导图"></a>思维导图</h2><h2 id="电子学习笔记"><a href="#电子学习笔记" class="headerlink" title="电子学习笔记"></a>电子学习笔记</h2><h2 id="说服别人的方式与步骤"><a href="#说服别人的方式与步骤" class="headerlink" title="说服别人的方式与步骤"></a>说服别人的方式与步骤</h2><ul><li>找痛点 why 为什么</li><li>解决方案 what 是什么</li><li>怎么去使用 how 怎么用</li><li>where 在那用</li><li>when 什么时候用</li></ul><h2 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">ctal + enter                    &#x2F;&#x2F; 光标到行末尾，并插入一行shift + alt + ↓                 &#x2F;&#x2F; 向下复制当前行代码ctal + f                        &#x2F;&#x2F; 搜索<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><ul><li>严格模式下，函数中的this指向<code>undefined</code></li></ul>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Task&amp;Jobs</title>
      <link href="2021/05/05/task-jobs/"/>
      <url>2021/05/05/task-jobs/</url>
      
        <content type="html"><![CDATA[<p>Task&amp;Jobs <span id="more"></span></p><h1 id="Task-amp-Jobs"><a href="#Task-amp-Jobs" class="headerlink" title="Task&amp;Jobs"></a>Task&amp;Jobs</h1><ul><li>什么是宏任务与微任务？<ul><li>我们都知道JS是单线程，但是一些高耗时操作就带来了进程阻塞问题。为了解决这个问题，JS有两种任务的执行模式：<strong>同步模式(Synchronous)和异步模式(Asynchronous)</strong></li><li>在异步模式下，创建<strong>异步任务主要分为宏任务与微任务</strong>两种。ES6规范中，宏任务(Macrotask) 称为Task，微任务(Microtask) 称为 Jobs。宏任务是由宿主（浏览器、Node）发起的，而微任务由JS自身发起。</li></ul></li><li><strong>宏任务与微任务的集中创建方式</strong></li></ul><table><thead><tr><th align="center">宏任务(Macrotask)</th><th align="center">微任务(Microtask)</th></tr></thead><tbody><tr><td align="center">setTimeout</td><td align="center">requestAnimationFrame(有争议)</td></tr><tr><td align="center">setInterval</td><td align="center">MutationObserver(浏览器环境)</td></tr><tr><td align="center">MessageChannel</td><td align="center">Promise.[ then/catch/finally ]</td></tr><tr><td align="center">I/O, 事件队列</td><td align="center">process.nextTick(Node环境)</td></tr><tr><td align="center">setImmediate(Node环境)</td><td align="center">queueMicrotask</td></tr><tr><td align="center">script(整体代码块)</td><td align="center"></td></tr></tbody></table><ul><li><p><strong>如何理解script（整体代码块）是个宏任务呢？</strong></p><ul><li>实际上如果同时存在两个script代码块，会首先在执行第一个script代码块中的同步代码，如果这个过程中创建了微任务并进入了微任务队列，第一个script同步代码执行完之后，会首先去清空微任务队列，再去开启第二个script代码块的执行。所以script（整体代码块）是个宏任务</li></ul></li><li><p><strong>什么是 EventLoop ？</strong></p></li></ul><p><img src="images/01-EventLoop.jpg" alt="01-EventLoop"></p><p>​    因为首次执行宏队列中会有 script（整体代码块）任务，所以实际上就是 Js     解析完成后，在异步任务中，会先执行完所有的微任务，这里也是很多面试    题喜欢考察的。需要注意的是，新创建的微任务会立即进入微任务队列排队    执行，不需要等待下一次轮回。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">Promise 是一个类，在执行这个类的时候会传入一个执行器，这个执行器会立即执行Promise 会有三种状态Pending 等待Fulfilled 完成Rejected 失败状态只能由 Pending --&gt; Fulfilled 或者 Pending --&gt; Rejected，且一但发生改变便不可二次修改；Promise 中使用 resolve 和 reject 两个函数来更改状态；then 方法内部做但事情就是状态判断如果状态是成功，调用成功回调函数如果状态是失败，调用失败回调函数<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Task&amp;Jobs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue3.0学习笔记</title>
      <link href="2021/05/05/vue3/"/>
      <url>2021/05/05/vue3/</url>
      
        <content type="html"><![CDATA[<p>Vue3.0学习笔记 <span id="more"></span></p><h1 id="Vue3-0学习笔记"><a href="#Vue3-0学习笔记" class="headerlink" title="Vue3.0学习笔记"></a>Vue3.0学习笔记</h1><h2 id="1-Vue3-0与Vue2-x的不同"><a href="#1-Vue3-0与Vue2-x的不同" class="headerlink" title="1.Vue3.0与Vue2.x的不同"></a>1.Vue3.0与Vue2.x的不同</h2><h3 id="1-1Vue3-0的六大亮点"><a href="#1-1Vue3-0的六大亮点" class="headerlink" title="1.1Vue3.0的六大亮点"></a>1.1Vue3.0的六大亮点</h3><ul><li>Performance：性能比Vue 2.x 快 1.2~2倍</li><li>Tree shaking suport：按需编译，体积比Vue 2.x 更小</li><li>Composition API：组合API(类似 React Hooks)</li><li>Better Typescript suport：更好的TS支持</li><li>Custom Renderer API：暴露了自定义渲染API</li><li>Fragment，Teleport(Protal), Suspense：更先进的组件</li></ul><h3 id="1-2-Vue3-0是如何变快的"><a href="#1-2-Vue3-0是如何变快的" class="headerlink" title="1.2 Vue3.0是如何变快的"></a>1.2 Vue3.0是如何变快的</h3><ul><li><p>diff方法优化：vue3转化网址 <a href="https://vue-next-template-explorer.netlify.app/">https://vue-next-template-explorer.netlify.app/</a></p><ul><li><p>Vue2中的虚拟dom是进行全局的对比</p></li><li><p>Vue3新增了静态标记(PathFlag),</p><p>在与上次虚拟节点进行对比时候，只对比带有PathFlag 的节点，并且可以通过flag的信息得知当前节点要对比的具体内容</p></li></ul></li></ul><p><img src="C:\Users\24623\Desktop\学习笔记\vue3\1.2.png" alt="1.2"></p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">render</span><span class="token punctuation">(</span>_ctx<span class="token punctuation">,</span> _cache<span class="token punctuation">,</span> $props<span class="token punctuation">,</span> $setup<span class="token punctuation">,</span> $data<span class="token punctuation">,</span> $options<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token function">_openBlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">_createBlock</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>    <span class="token function">_createVNode</span><span class="token punctuation">(</span><span class="token string">"p"</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">"哈哈"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">_createVNode</span><span class="token punctuation">(</span><span class="token string">"p"</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token function">_toDisplayString</span><span class="token punctuation">(</span>_ctx<span class="token punctuation">.</span>msg<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span> <span class="token comment">/* TEXT */</span><span class="token punctuation">)</span>  <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>hoistStatic 静态提升<ul><li>Vue2中无论元素是否参与更新，每次都会重新创建，然后再渲染</li><li>Vue3中对于不参与更新的元素，会做静态提升，只会被创建一次，在渲染时直接复用即可</li></ul></li><li>没有进行静态提升之前</li></ul><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">render</span><span class="token punctuation">(</span>_ctx<span class="token punctuation">,</span> _cache<span class="token punctuation">,</span> $props<span class="token punctuation">,</span> $setup<span class="token punctuation">,</span> $data<span class="token punctuation">,</span> $options<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token function">_openBlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">_createBlock</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>    <span class="token function">_createVNode</span><span class="token punctuation">(</span><span class="token string">"p"</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">"哈哈"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">_createVNode</span><span class="token punctuation">(</span><span class="token string">"p"</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token function">_toDisplayString</span><span class="token punctuation">(</span>_ctx<span class="token punctuation">.</span>msg<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span> <span class="token comment">/* TEXT */</span><span class="token punctuation">)</span>  <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>进行静态提升之后</li></ul><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">const</span> _hoisted_1 <span class="token operator">=</span> <span class="token comment">/*#__PURE__*/</span><span class="token function">_createVNode</span><span class="token punctuation">(</span><span class="token string">"p"</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">"哈哈"</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token comment">/* HOISTED */</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">render</span><span class="token punctuation">(</span>_ctx<span class="token punctuation">,</span> _cache<span class="token punctuation">,</span> $props<span class="token punctuation">,</span> $setup<span class="token punctuation">,</span> $data<span class="token punctuation">,</span> $options<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token function">_openBlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">_createBlock</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>    _hoisted_1<span class="token punctuation">,</span>    <span class="token function">_createVNode</span><span class="token punctuation">(</span><span class="token string">"p"</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token function">_toDisplayString</span><span class="token punctuation">(</span>_ctx<span class="token punctuation">.</span>msg<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span> <span class="token comment">/* TEXT */</span><span class="token punctuation">)</span>  <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>cacheHandlers 事件监听器缓存<ul><li>默认情况下onClick会视为动态绑定，所以每次都会去追踪它的变化</li><li>但是因为是同一个函数，所以没有追踪变化，直接缓存起来服用即可</li></ul></li></ul><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token operator">&lt;</span>div<span class="token operator">></span>  <span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"btn"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>开启事件缓存之前</li></ul><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">render</span><span class="token punctuation">(</span>_ctx<span class="token punctuation">,</span> _cache<span class="token punctuation">,</span> $props<span class="token punctuation">,</span> $setup<span class="token punctuation">,</span> $data<span class="token punctuation">,</span> $options<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token function">_openBlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">_createBlock</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>    <span class="token function">_createVNode</span><span class="token punctuation">(</span><span class="token string">"button"</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> onClick<span class="token operator">:</span> _ctx<span class="token punctuation">.</span>btn <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token number">8</span> <span class="token comment">/* PROPS */</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"onClick"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>开启事件缓存之后</li></ul><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">render</span><span class="token punctuation">(</span>_ctx<span class="token punctuation">,</span> _cache<span class="token punctuation">,</span> $props<span class="token punctuation">,</span> $setup<span class="token punctuation">,</span> $data<span class="token punctuation">,</span> $options<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token function">_openBlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">_createBlock</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>    <span class="token function">_createVNode</span><span class="token punctuation">(</span><span class="token string">"button"</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>      onClick<span class="token operator">:</span> _cache<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token punctuation">(</span>_cache<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>_ctx<span class="token punctuation">.</span>btn <span class="token operator">&amp;&amp;</span> _ctx<span class="token punctuation">.</span><span class="token function">btn</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>注：没有静态标记，所以不会追踪变化，性能提升</p></li><li><p>ssr渲染</p><ul><li>当有大量静态的内容时候，这些内容会被当做纯字符串推进一个buffer里面，即使存在动态的绑定，会通过模板插值嵌入进去，这样会比通过虚拟dom来渲染的快上很多很多。</li><li>当静态内容达到一定量级时候，会用_createStaticVNode方法在客户端去生成一个static node,这些静态demo，会被直接innerHTML,就不需要创建对象，然后根据对象渲染。</li></ul></li></ul><h3 id="Vite"><a href="#Vite" class="headerlink" title="Vite"></a>Vite</h3><ul><li>安装Vite</li></ul><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">npm install -g create-vite-app<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>利用Vite创建Vue3项目</li></ul><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">create-vite-app projectName<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>安装依赖运行项目</li></ul><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">cd projectNamenpm installnpm run dev<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="组合API"><a href="#组合API" class="headerlink" title="组合API"></a>组合API</h2><ul><li>setup()函数是组合API的入口函数</li></ul><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;script&gt;  import &#123;ref&#125; from &#39;vue&#39;;  &#x2F;&#x2F;ref函数只能监听简单类型的变化，不能监听复杂类型的变化(对象&#x2F;数组)  import &#123;reactive&#125; from &#39;vue&#39;;export defult &#123;  name: &#39;App&#39;  &#x2F;&#x2F;setup函数是组合API的入口函数  setup() &#123;    &#x2F;&#x2F; let count &#x3D; ref(0)    &#x2F;&#x2F; 定义了一个名称叫做count变量，这个变量的初始值是0，这个变量发生改变之后，Vue会自动更新UI    let count &#x3D; ref(0)    &#x2F;&#x2F; 注：在组合API中定义的方法或变量，要想在外界使用，必须通过return &#123;xx,xx&#125;暴露出去    return &#123;count&#125;  &#125;&#125;&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="setup的执行时机"><a href="#setup的执行时机" class="headerlink" title="setup的执行时机"></a>setup的执行时机</h4><ul><li>setup函数是在beforecreate钩子之前完成的</li></ul><h4 id="setup注意点"><a href="#setup注意点" class="headerlink" title="setup注意点"></a>setup注意点</h4><ul><li>由于在执行setup函数的时候，还没执行created生命周期是方法，所有在setup函数中，无法使用data，和methods</li><li>由于我们不能在setup函数中使用data和methods，所有vue为了避免我们错误使用，将setup函数中this修改成了undefined</li><li>setup函数只能是同步的，不能是异步的</li></ul><h4 id="reactive"><a href="#reactive" class="headerlink" title="reactive"></a>reactive</h4><ul><li>什么是reactive？<ul><li>reactive是Vue3中提供的实现响应式数据的方法</li><li>在Vue2中响应式数据是通过defineProperty来实现的，而在Vue3中响应式数据是通过ES6的Proxy来实现的</li></ul></li><li>reactive注意点：<ul><li>reactive参数必须是对象(json, arr)</li><li>如果给reactive传递了其他对象<ul><li>默认情况下修改对象，界面不会自动更新</li><li>如果想更新，可以通过重新赋值的方式</li></ul></li></ul></li></ul><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;script&gt;  import &#123;reactive&#125; from &#39;vue&#39;;export defult &#123;  name: &#39;App&#39;  setup() &#123;    &#x2F;&#x2F; 创建一个响应式数据    &#x2F;&#x2F; 本质：就是将传入的数据包装成一个Proxy对象    const state &#x3D; reactive(&#123;      age: 123    &#125;);    function myFn() &#123;      state.age &#x3D; 666;      console.log(state);    &#125;    return &#123;state, myFn&#125;  &#125;&#125;&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="实现reactive"><a href="#实现reactive" class="headerlink" title="实现reactive"></a>实现reactive</h5><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> obj <span class="token operator">===</span> <span class="token string">'object'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token keyword">instanceof</span> <span class="token class-name">Array</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 如果是一个数组，就取出数组中的每一个元素</span>      <span class="token comment">// 判断每一个元素是否又是一个对象，如果是一个对象，则也需要包装成Proxy对象</span>      obj<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> item <span class="token operator">===</span> <span class="token string">'object'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          obj<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 如果是一个对象，也取出对象中的每一个元素</span>      <span class="token comment">// 判断每一个元素是否又是一个对象，如果是一个对象，则也需要包装成Proxy对象</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> obj<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> item <span class="token operator">=</span> obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> item <span class="token operator">===</span> <span class="token string">'object'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>      <span class="token function">get</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token function">set</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> key<span class="token punctuation">,</span> val<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// console.log(obj, key, val);</span>        obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> val<span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"更新UI界面"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  a<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>  gf<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    b<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    f<span class="token operator">:</span> <span class="token punctuation">&#123;</span>      c<span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>      s<span class="token operator">:</span> <span class="token punctuation">&#123;</span>        d<span class="token operator">:</span> <span class="token number">4</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> state <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>state<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>state<span class="token punctuation">.</span>gf<span class="token punctuation">.</span>b <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>state<span class="token punctuation">.</span>gf<span class="token punctuation">.</span>f<span class="token punctuation">.</span>c <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">;</span>state<span class="token punctuation">.</span>gf<span class="token punctuation">.</span>f<span class="token punctuation">.</span>s<span class="token punctuation">.</span>d <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="ref"><a href="#ref" class="headerlink" title="ref"></a>ref</h4><ul><li>ref本质<ul><li>ref本质上还是reactive</li><li>当我们给ref函数传递一个值之后，ref函数底层会自动将ref转化成reactive</li><li>ref(18) =&gt; reactive({value: 18})</li><li>如果直接改变值，则界面不会刷新，想要触发刷新，需要改变value的值</li><li>如果我们利用ref将某一个对象中的基本属性变成响应式的数据，我们修改响应式的数据是不会影响到原始数据的  </li></ul></li></ul><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;script&gt;  import &#123;ref&#125; from &#39;vue&#39;;export defult &#123;  name: &#39;App&#39;  setup() &#123;    let age &#x3D; ref(18)    function myFn() &#123;      age.value &#x3D; 666      console.log(age);    &#125;    return &#123;age, myFn&#125;  &#125;&#125;&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="ref和reactive的区别"><a href="#ref和reactive的区别" class="headerlink" title="ref和reactive的区别"></a>ref和reactive的区别</h4><ul><li><p>如果在template中使用的是ref类型的数据，那么Vue会自动帮我们添加 .value</p></li><li><p>如果在template中使用的是reactive类型的数据，那么Vue不会帮我们添加  .value</p></li><li><p>Vue是如何决定是否需要自动添加 .value的</p><ul><li>Vue在解析数据之前，会自动判断这个函数是否是ref类型的，如果是就自动添加.value，如果不是就不自动添加.value</li></ul></li><li><p>Vue是如何判断当前的数据是否是ref类型的</p><ul><li>通过当前数据 __v_ref 来判断的</li><li>如果有这个私有的属性，并且取值为true，那么就代表是一个ref类型的数据</li></ul></li><li><p>isRef 、isReactive</p><ul><li>isRef 用来判断是否为ref类型</li><li>isReactive 用来判断是否为reactive类型</li></ul></li></ul><h4 id="递归监听"><a href="#递归监听" class="headerlink" title="递归监听"></a>递归监听</h4><ul><li>默认情况下，无论是通过ref还是reactive都是递归监听</li><li>即无论有多少层，每一层都可以监听到变化</li><li>递归监听存在的问题<ul><li>如果数据量比较大，非常消耗性能</li><li>因为它把每一层都包装成了一个Proxy对象</li></ul></li></ul><h4 id="非递归监听"><a href="#非递归监听" class="headerlink" title="非递归监听"></a>非递归监听</h4><ul><li>shallowReactive、shallowRef</li><li>非递归监听只会监听最外面一层</li><li>修改其他层级变量，需要同时修改最外层变量，否则，修改不生效。</li><li>shallowRef 最外面一层，为变量.value</li><li>shallowRef(10) =&gt; shallowReactive({value: 10})</li></ul><h5 id="实现shallowReactive"><a href="#实现shallowReactive" class="headerlink" title="实现shallowReactive"></a>实现shallowReactive</h5><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">shallowReactive</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>    <span class="token function">get</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token function">set</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> key<span class="token punctuation">,</span> val<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> key<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>      obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> val<span class="token punctuation">;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"更新UI界面"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  a<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>  gf<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    b<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    f<span class="token operator">:</span> <span class="token punctuation">&#123;</span>      c<span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>      s<span class="token operator">:</span> <span class="token punctuation">&#123;</span>        d<span class="token operator">:</span> <span class="token number">4</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> state <span class="token operator">=</span> <span class="token function">shallowReactive</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// state.a = 5;</span>state<span class="token punctuation">.</span>gf<span class="token punctuation">.</span>b <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>state<span class="token punctuation">.</span>gf<span class="token punctuation">.</span>f<span class="token punctuation">.</span>c <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">;</span>state<span class="token punctuation">.</span>gf<span class="token punctuation">.</span>f<span class="token punctuation">.</span>s<span class="token punctuation">.</span>d <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="实现shallowRef"><a href="#实现shallowRef" class="headerlink" title="实现shallowRef"></a>实现shallowRef</h5><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">shallowRef</span> <span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token function">shallowReactive</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>value<span class="token operator">:</span> val<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">shallowReactive</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>    <span class="token function">get</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token function">set</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> key<span class="token punctuation">,</span> val<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> key<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>      obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> val<span class="token punctuation">;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"更新UI界面"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  a<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>  gf<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    b<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    f<span class="token operator">:</span> <span class="token punctuation">&#123;</span>      c<span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>      s<span class="token operator">:</span> <span class="token punctuation">&#123;</span>        d<span class="token operator">:</span> <span class="token number">4</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> state <span class="token operator">=</span> <span class="token function">shallowRef</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>state<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  a<span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span>  gf<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    b<span class="token operator">:</span> <span class="token number">6</span><span class="token punctuation">,</span>    f<span class="token operator">:</span> <span class="token punctuation">&#123;</span>      c<span class="token operator">:</span> <span class="token number">7</span><span class="token punctuation">,</span>      s<span class="token operator">:</span> <span class="token punctuation">&#123;</span>        d<span class="token operator">:</span> <span class="token number">8</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="triggerRef"><a href="#triggerRef" class="headerlink" title="triggerRef"></a>triggerRef</h4><ul><li>作用：根据传入的数据，主动的去更新页面</li><li>用法：triggerRef(state)</li><li>注意：Vue3只提供了triggerRef方法，没有提供triggerReactive方法，所以，如果是reactive类型的数据，无法主动触发界面更新的</li></ul><h4 id="setup中普通对象跟Proxy对象"><a href="#setup中普通对象跟Proxy对象" class="headerlink" title="setup中普通对象跟Proxy对象"></a>setup中普通对象跟Proxy对象</h4><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;script&gt;  import &#123;reactive&#125; from &#39;vue&#39;;export defult &#123;  name: &#39;App&#39;  setup() &#123;    let obj &#x3D; &#123;      name: &#39;chichi&#39;    &#125;    let state &#x3D; reactive(obj);    console.log(obj &#x3D;&#x3D;&#x3D; state)  &#x2F;&#x2F; false    &#x2F;&#x2F; state跟obj的关系    &#x2F;&#x2F; 引用关系，state的本质是一个Proxy对象，在这个Proxy对象中引用了obj  &#125;&#125;&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>如果更改普通对象的值，则界面不会刷新</li><li>想要刷新，必须修改Proxy对象相关属性的值</li></ul><h4 id="toRaw"><a href="#toRaw" class="headerlink" title="toRaw"></a>toRaw</h4><ul><li><p>ref/reactive数据类型的特点：</p><ul><li>每次修改都会被追踪，都会更新UI界面，但是这样其实是非常消耗性能的，所以如果我们有一些操作不需要追踪，不需要更新UI界面，那么这个时候，我们就可以通过toRaw方法拿到它的原始数据，对原始数据进行修改，这样就不会被追踪， 这样就不会更新UI界面，这样性能就好了</li></ul></li><li><p>如果想通过toRaw拿到ref类型的原始数据（创建时传入的那个数据）</p><ul><li><p>那么必须明确的告诉toRaw方法，要获取的值是.value的值</p></li><li><p>~~~shell<br>let obj2 = toRaw(state.value)</p><pre class="line-numbers language-none"><code class="language-none">#### markRaw- 作用：永远都不会被追踪~~~vue&lt;script&gt;import &#123;reactive, markRaw&#125; from &#39;vue&#39;;export default &#123;  name: &quot;App&quot;,  setup() &#123;    let a &#x3D; &#123;name: &quot;chichi&quot;&#125;    a &#x3D; markRaw(a);    let state &#x3D; reactive(a);        function btn () &#123;      state.name &#x3D; &#39;chichisky&#39;;      console.log(state);    &#125;    return &#123;btn, state&#125;  &#125;&#125;;&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><h4 id="toRef"><a href="#toRef" class="headerlink" title="toRef"></a>toRef</h4><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;script&gt;import &#123;toRef, toRefs&#125; from &#39;vue&#39;;export default &#123;  name: &quot;App&quot;,  setup() &#123;    let a &#x3D; &#123;name: &quot;chichi&quot;&#125;    let b &#x3D; &#123;name: &quot;chichi&quot;, age: 13&#125;    let state &#x3D; toRef(a,&#39;name&#39;);    let state2 &#x3D; toRefs(b)        function btn () &#123;      state.value &#x3D; &#39;chichisky&#39;;      console.log(state);  &#x2F;&#x2F; value: &quot;chichisky&quot;      console.log(a);   &#x2F;&#x2F; name: &quot;chichisky&quot;      state2.name.value &#x3D; &#39;chichikaai&#39;;      state2.age.value &#x3D; 18;      console.log(state2);      console.log(b);    &#125;    return &#123;btn, state, state2&#125;  &#125;&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>如果利用toRef将某一个对象中的属性变成响应式的数据，我们修改响应式的数据是会影响到原始数据的</li><li>但是如果响应式的数据是通过toRef创建的，那么修改了数据并不会触发界面的更新</li><li>toRef的应用场景：<ul><li>如果想让响应式数据和以前的数据关联起来，并且更新响应式数据之后还不想更新UI，那么可以使用toRef</li></ul></li><li>toRefs相当于给遍历对象，给对象的每一个属性都添加了toRef</li></ul><h4 id="ref-amp-reRef-的区别"><a href="#ref-amp-reRef-的区别" class="headerlink" title="ref &amp; reRef 的区别"></a>ref &amp; reRef 的区别</h4><ul><li>ref =&gt; 复制，修改响应式数据不会影响以前的数据</li><li>toRef =&gt; 引用，修改响应式数据会影响以前的数据</li><li>ref =&gt;数据发生改变，界面就会自动更新</li><li>toRef =&gt;数据发生改变，界面也不会自动更新</li></ul><h4 id="customRef"><a href="#customRef" class="headerlink" title="customRef"></a>customRef</h4><ul><li>返回一个ref对象，可以显示地控制依赖追踪和触发响应</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">myRef</span> <span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token function">customRef</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token parameter">track<span class="token punctuation">,</span> trigger</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>      <span class="token function">get</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">track</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 告诉Vue这个数据是需要追踪变化的</span>        <span class="token keyword">return</span> value<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token function">set</span> <span class="token punctuation">(</span>newValue<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'set'</span><span class="token punctuation">,</span> newValue<span class="token punctuation">)</span><span class="token punctuation">;</span>        value <span class="token operator">=</span> newValue<span class="token punctuation">;</span>        <span class="token function">trigger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 告诉Vue触发界面更新</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>不能在get方法中发送网络请求<ul><li>渲染界面 =&gt;  调用get =&gt; 发送网络请求</li><li>保存数据 =&gt; 更新界面 =&gt; 调用get</li></ul></li></ul><h4 id="在setup函数中，如何使用生命周期钩子"><a href="#在setup函数中，如何使用生命周期钩子" class="headerlink" title="在setup函数中，如何使用生命周期钩子"></a>在setup函数中，如何使用生命周期钩子</h4><ul><li>想使用哪一个导入哪一个</li><li>Vue3.x通过ref获取元素</li></ul><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;&lt;div ref &#x3D; &quot;box&quot;&gt;    box  &lt;&#x2F;div&gt;&lt;&#x2F;template&gt;&lt;script&gt;import &#123; ref, onMounted &#125; from &quot;vue&quot;;export default &#123;  name: &quot;App&quot;,  setup() &#123;    let box &#x3D; ref(null);    onMounted(() &#x3D;&gt; &#123;console.log(box.value);&#125;)    console.log(box.value);    return &#123; box &#125;;  &#125;,&#125;;&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="readonly家族"><a href="#readonly家族" class="headerlink" title="readonly家族"></a>readonly家族</h4><ul><li>readonly<ul><li>创建一个只能的数据，并且是递归只读</li></ul></li><li>shallowReadonly<ul><li>创建一个只读的数据，但是不是递归只读，内层可以改变</li></ul></li><li>实现shallowReadonly</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">shallowReadonly</span> <span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>    <span class="token function">get</span> <span class="token punctuation">(</span>obj<span class="token punctuation">,</span> key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token function">set</span> <span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      console<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>key<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">是只读的，不可以更改</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  a<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>  gf<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    b<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    f<span class="token operator">:</span> <span class="token punctuation">&#123;</span>      c<span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>      s<span class="token operator">:</span> <span class="token punctuation">&#123;</span>        d<span class="token operator">:</span> <span class="token number">4</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> state <span class="token operator">=</span> <span class="token function">shallowReadonly</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>state<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>isReadonly<ul><li>判断一个数据是不是只读的数据</li></ul></li><li>const和readonly区别<ul><li>const：赋值保护，不能给变量重新赋值</li><li>readonly：属性保护，不能给属性重新赋值</li></ul></li></ul><h2 id="vue3响应式数据本质"><a href="#vue3响应式数据本质" class="headerlink" title="vue3响应式数据本质"></a>vue3响应式数据本质</h2><ul><li>在Vue2.x中是通过defineProperty来实现响应式数据的<ul><li>对Vue2.x进行补充，如何实现双向绑定,数据劫持代理</li></ul></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> data <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  name<span class="token operator">:</span> <span class="token string">'chichi'</span><span class="token punctuation">,</span>  age<span class="token operator">:</span> <span class="token number">22</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> _this <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> item <span class="token keyword">in</span> data<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  Object<span class="token punctuation">.</span><span class="token function">defineProperty</span> <span class="token punctuation">(</span>_this<span class="token punctuation">,</span> item<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 用来获取扩展属性值的，当获取该属性值时调用get方法</span>    <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> data<span class="token punctuation">[</span>item<span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token comment">// 监视扩展属性的，只要一修改就调用</span>    <span class="token function">set</span> <span class="token punctuation">(</span>newValue<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      data<span class="token punctuation">[</span>item<span class="token punctuation">]</span> <span class="token operator">=</span> newValue<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>_this<span class="token punctuation">)</span><span class="token punctuation">;</span>_this<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">23</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>_this<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>在Vue3.x中是通过Proxy来实现响应式数据的</li></ul><pre class="line-numbers language-none"><code class="language-none">let obj &#x3D; &#123;name: &quot;chichi&quot;, age: 18&#125;;let state &#x3D; new Proxy(obj, &#123;get(obj, key) &#123;console.log(obj[key]);return obj[key];&#125;,set(obj, key, newValue) &#123;console.log(obj, key, newValue);obj[key] &#x3D; newValue;console.log(obj);    console.log(&quot;更新UI界面&quot;);&#125;&#125;)state.name &#x3D; &quot;chichisky&quot;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>一定要在set方法中设置一个返回值，告诉程序上一次操作是否成功</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> state <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token function">get</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> arr<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token function">set</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> key<span class="token punctuation">,</span> newValue<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> key<span class="token punctuation">,</span> newValue<span class="token punctuation">)</span><span class="token punctuation">;</span>arr<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> newValue<span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"更新UI界面"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>state<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token comment">// get    =>   3</span><span class="token comment">// set</span><span class="token comment">// 第一次操作 [ 1, 3, 5 ] 3 7   =>   [ 1, 3, 5, 7 ]   =>   更新UI界面</span><span class="token comment">// 第二次操作 [ 1, 3, 5, 7 ] length 4   =>   [ 1, 3, 5, 7 ]   =>    更新UI界面</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue3.0 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS(ES6)数据结构和算法 学习笔记</title>
      <link href="2021/05/05/js-es6/"/>
      <url>2021/05/05/js-es6/</url>
      
        <content type="html"><![CDATA[<p>JS(ES6)数据结构和算法 学习笔记 <span id="more"></span></p><h1 id="JS-ES6-数据结构和算法-学习笔记"><a href="#JS-ES6-数据结构和算法-学习笔记" class="headerlink" title="JS(ES6)数据结构和算法 学习笔记"></a>JS(ES6)数据结构和算法 学习笔记</h1><ul><li>栈和队列都可以使用链表或者数组实现</li></ul><ul><li>数组<ul><li>优点<ul><li>根据下标值访问效率会很高</li><li>先对数组进行排序，之后二分查找</li></ul></li><li>缺点<ul><li>需要先对数组进行排序，生成有序数组，才能提高查找效率</li><li>数组再插入和删除数据时，有大量的位移操作，效率很低</li></ul></li></ul></li><li>链表<ul><li>优点<ul><li>链表的插入和删除操作都很方便</li></ul></li><li>缺点<ul><li>查找效率很低</li></ul></li></ul></li><li>哈希表<ul><li>优点<ul><li>插入/查询/删除 效率都很高</li></ul></li><li>缺点<ul><li>空间利用率不高</li><li>哈希表中的元素是无序的，不能按照固定的顺序来遍历哈希表中的元素</li><li>不能快速的找出哈希表中的最大值或者最小值这些特殊的值</li></ul></li></ul></li><li>树<ul><li>优点<ul><li>一些特殊场景用处很大</li><li>综合效率较高</li></ul></li><li>缺点<ul><li>删除元素很麻烦</li></ul></li></ul></li></ul><h2 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h2><ul><li>函数栈调用</li></ul><p><img src="C:\Users\24623\Desktop\学习笔记\JS(ES6)数据结构和算法\01-函数调用栈.png" alt="01-函数调用栈"></p><ul><li>先执行textC(),然后执行textB(),最后执行textA(),</li><li>基于数组实现的栈</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">Stack</span> <span class="token punctuation">&#123;</span>  <span class="token function">constructor</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>items <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">/**   * push(element):添加一个新元素到栈顶位置   * pop():移除栈顶的元素，同时返回被移除的值   * peek():返回栈顶的元素，不对栈进行任何操作   * isEmpty():如果栈里没有任何元素，则true，否则false   * size():返回栈里的元素个数   * toString():将栈结构的内容以字符形式返回   *    */</span>  <span class="token function">push</span> <span class="token punctuation">(</span><span class="token parameter">element</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">pop</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">peek</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">isEmpty</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">size</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">toString</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> Stack<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>小应用，利用栈实现10进制转化为2进制</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> Stack <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./Stack'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">dec2bin</span> <span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> stack <span class="token operator">=</span>  <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>value <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> dec2 <span class="token operator">=</span> value <span class="token operator">%</span> <span class="token number">2</span><span class="token punctuation">;</span>    value <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>value <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>dec2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    str <span class="token operator">+=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> str<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>测试</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// const Stack = require('./Stack');</span><span class="token keyword">const</span> dec2bin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./dec2bin'</span><span class="token punctuation">)</span><span class="token comment">// const stack = new Stack();</span><span class="token comment">// stack.push('abc');</span><span class="token comment">// stack.push('qwd');</span><span class="token comment">// stack.push('wqd');</span><span class="token comment">// stack.push('asd');</span><span class="token comment">// console.log(stack.items);</span><span class="token comment">// stack.pop();</span><span class="token comment">// console.log(stack.items);</span><span class="token comment">// stack.peek();</span><span class="token comment">// console.log(stack.size());</span><span class="token comment">// console.log(stack.items);</span><span class="token comment">// console.log(stack.isEmpty());</span><span class="token comment">// stack.pop();</span><span class="token comment">// console.log(stack.items);</span><span class="token comment">// stack.pop();</span><span class="token comment">// console.log(stack.items);</span><span class="token comment">// stack.pop();</span><span class="token comment">// console.log(stack.items);</span><span class="token comment">// console.log(stack.isEmpty());</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">dec2bin</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">dec2bin</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">dec2bin</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h2><ul><li>基于数组实现队列</li></ul><pre class="line-numbers language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">class Queue &#123;  constructor () &#123;    this.items &#x3D; [];  &#125;  &#x2F;**   * 队列的常见操作   *    * enqueue(element):向队列尾部添加一个（或多个）新的项   * dequeue():移除队列的第一（即排在队列最前面的）项，并返回被移除的元素   * front():只返回队列中方的第一个元素，不做任何操作   * isEmpty():如果队列中不包含任何元素，返回true，否则返回false   * size():返回队列包含的元素个数，与数组的length属性类似。   * toString():将队列中的内容，转成字符串形式   *    *&#x2F;  enqueue(...element) &#123;    for(let item of element) &#123;      this.items.push(item)    &#125;  &#125;  dequeue() &#123;    return this.items.shift();  &#125;  front() &#123;    if (this.isEmpty()) return null;    return this.items[0];  &#125;  isEmpty() &#123;    return this.items.length &#x3D;&#x3D;&#x3D; 0  &#125;  size () &#123;    return this.items.length;  &#125;&#125;module.exports &#x3D; Queue;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>测试</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> Queue <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./Queue'</span><span class="token punctuation">)</span><span class="token keyword">const</span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Queue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>queue<span class="token punctuation">.</span><span class="token function">enqueue</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// queue.dequeue();</span><span class="token comment">// queue.dequeue();</span><span class="token comment">// queue.dequeue();</span>queue<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>queue<span class="token punctuation">.</span>items<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>queue<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>queue<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>queue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>击鼓传花游戏</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> Queue <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./Queue'</span><span class="token punctuation">)</span>module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">passGame</span><span class="token punctuation">(</span><span class="token parameter">students<span class="token punctuation">,</span> number</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Queue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// console.log(...students);</span>  queue<span class="token punctuation">.</span><span class="token function">enqueue</span><span class="token punctuation">(</span><span class="token operator">...</span>students<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// console.log(queue.items);</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>queue<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> number <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      queue<span class="token punctuation">.</span><span class="token function">enqueue</span><span class="token punctuation">(</span>queue<span class="token punctuation">.</span><span class="token function">dequeue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    queue<span class="token punctuation">.</span><span class="token function">dequeue</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> queue<span class="token punctuation">.</span><span class="token function">dequeue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>优先级队列</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">QueueElement</span> <span class="token punctuation">&#123;</span>  <span class="token function">constructor</span> <span class="token punctuation">(</span><span class="token parameter">element<span class="token punctuation">,</span> priority</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>element <span class="token operator">=</span> element<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>priority <span class="token operator">=</span> priority<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> QueueElement<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> QueueElement <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./QueueElement'</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">PriorityQueue</span> <span class="token punctuation">&#123;</span>  <span class="token function">constructor</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>items <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">/**   * 优先级队列的常见操作   *    * enqueue(element,priority):向队列添加一个新的项   * dequeue():移除队列的第一（即排在队列最前面的）项，并返回被移除的元素   * front():只返回队列中方的第一个元素，不做任何操作   * isEmpty():如果队列中不包含任何元素，返回true，否则返回false   * size():返回队列包含的元素个数，与数组的length属性类似。   * toString():将队列中的内容，转成字符串形式   *    */</span>  <span class="token function">enqueue</span><span class="token punctuation">(</span><span class="token parameter">element<span class="token punctuation">,</span> priority</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> queueElement <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueueElement</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> priority<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>queueElement<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">let</span> isAdd <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>priority <span class="token operator">></span> queueElement<span class="token punctuation">.</span>priority<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>queueElement<span class="token punctuation">)</span><span class="token punctuation">;</span>        isAdd <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>isAdd<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>queueElement<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">dequeue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span>  <span class="token punctuation">&#125;</span>  <span class="token function">size</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">.</span>length<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> PriorityQueue<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="单链表"><a href="#单链表" class="headerlink" title="单链表"></a>单链表</h2><ul><li>不含头节点的单链表封装</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 封装节点</span><span class="token keyword">class</span> <span class="token class-name">Node</span> <span class="token punctuation">&#123;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">element</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>element <span class="token operator">=</span> element<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token keyword">class</span> <span class="token class-name">LinkedList</span> <span class="token punctuation">&#123;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>head <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>length <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">/**   * append(element):像列表尾部添加一个新的项   * insert(position, element):像列表的特定位置插入一个新的项   * get(position):获取对应位置的元素   * indexof(element):返回元素在列表中的索引，如果列表中没有则返回-1   * updata(position, element):修改某个位置的元素   * removeAt(position):从列表的特定位置移除一项   * remove(element):从列表中移除特定项   * isEmpty():如果链表为空，则返回true，反正返回false   * size():返回链表包含的元素个数,与数组的length属性类似   *    */</span>  <span class="token comment">// append(element):像列表尾部添加一个新的项</span>  <span class="token function">append</span><span class="token punctuation">(</span><span class="token parameter">element</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> node <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>head <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>head <span class="token operator">=</span> node<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">let</span> current <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>head<span class="token punctuation">;</span>      <span class="token keyword">while</span> <span class="token punctuation">(</span>current<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        current <span class="token operator">=</span> current<span class="token punctuation">.</span>next      <span class="token punctuation">&#125;</span>      current<span class="token punctuation">.</span>next <span class="token operator">=</span> node<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token operator">++</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// insert(position, element):像列表的特定位置插入一个新的项</span>  <span class="token function">insert</span><span class="token punctuation">(</span><span class="token parameter">position<span class="token punctuation">,</span> element</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>position <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> position <span class="token operator">></span> <span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token boolean">false</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">const</span> node <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>position <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      node<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>head<span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>head <span class="token operator">=</span> node    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">let</span> current <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>head      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> position<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        current <span class="token operator">=</span> current<span class="token punctuation">.</span>next      <span class="token punctuation">&#125;</span>      node<span class="token punctuation">.</span>next <span class="token operator">=</span> current<span class="token punctuation">.</span>next<span class="token punctuation">;</span>      current<span class="token punctuation">.</span>next <span class="token operator">=</span> node<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token operator">++</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// get(position):获取对应位置的元素</span>  <span class="token function">get</span><span class="token punctuation">(</span>position<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>position <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> position <span class="token operator">></span> <span class="token keyword">this</span><span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token boolean">false</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">let</span> current <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>head<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> position<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      current <span class="token operator">=</span> current<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> current<span class="token punctuation">.</span>element<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// indexof(element):返回元素在列表中的索引，如果列表中没有则返回-1</span>  <span class="token function">indexof</span><span class="token punctuation">(</span><span class="token parameter">element</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>element <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">let</span> current <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>head<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>current<span class="token punctuation">.</span>element <span class="token operator">===</span> element<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> i<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        current <span class="token operator">=</span> current<span class="token punctuation">.</span>next<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// updata(position, element):修改某个位置的元素</span>  <span class="token function">updata</span><span class="token punctuation">(</span><span class="token parameter">position<span class="token punctuation">,</span> element</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>position <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> position <span class="token operator">></span> <span class="token keyword">this</span><span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token boolean">false</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">let</span> current <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>head    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>position <span class="token operator">===</span> i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        current<span class="token punctuation">.</span>element <span class="token operator">=</span> element<span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      current <span class="token operator">=</span> current<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// removeAt(position):从列表的特定位置移除一项</span>  <span class="token function">removeAt</span> <span class="token punctuation">(</span><span class="token parameter">position</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>position <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> position <span class="token operator">></span> <span class="token keyword">this</span><span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token boolean">false</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>position <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">let</span> pre <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>head<span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>head <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>      pre<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token operator">--</span><span class="token punctuation">;</span>      <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">let</span> current <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token keyword">let</span> pre <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>head<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>position <span class="token operator">===</span> i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        pre<span class="token punctuation">.</span>next <span class="token operator">=</span> current<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        current<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      pre <span class="token operator">=</span> current<span class="token punctuation">;</span>      current <span class="token operator">=</span> current<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// remove(element):从列表中移除特定项</span>  <span class="token function">remove</span> <span class="token punctuation">(</span><span class="token parameter">element</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> position <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">indexof</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>position <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">removeAt</span><span class="token punctuation">(</span>position<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// isEmpty():如果链表为空，则返回true，反正返回false</span>  <span class="token function">isEmpty</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// size():返回链表包含的元素个数,与数组的length属性类似</span>  <span class="token function">size</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>测试</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> LinkedList <span class="token operator">=</span> <span class="token function">require</span> <span class="token punctuation">(</span><span class="token string">'./linked_list'</span><span class="token punctuation">)</span><span class="token keyword">const</span> like <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// like.append('aaa');</span><span class="token comment">// like.append('bbb');</span><span class="token comment">// like.append('ccc');</span><span class="token comment">// like.insert(2,'ccc');</span><span class="token comment">// console.log(like.get(0));</span><span class="token comment">// console.log(like.indexof('bbb'));</span><span class="token comment">// like.updata(2, 'ddd');</span><span class="token comment">// like.removeAt(2);</span><span class="token comment">// like.remove('ccc')</span><span class="token comment">// console.log(like.size());</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>like<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>like<span class="token punctuation">.</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="双链表"><a href="#双链表" class="headerlink" title="双链表"></a>双链表</h2><ul><li>不含头节点的双链表封装</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 封装节点</span><span class="token keyword">class</span> <span class="token class-name">Node</span> <span class="token punctuation">&#123;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">element</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>element <span class="token operator">=</span> element<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>prev <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token keyword">class</span> <span class="token class-name">DoubLinkedList</span> <span class="token punctuation">&#123;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>head <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>tail <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>length <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">/**   * append(element):像列表尾部添加一个新的项   * insert(position, element):像列表的特定位置插入一个新的项   * get(position):获取对应位置的元素   * indexof(element):返回元素在列表中的索引，如果列表中没有则返回-1   * updata(position, element):修改某个位置的元素   * removeAt(position):从列表的特定位置移除一项   * remove(element):从列表中移除特定项   * isEmpty():如果链表为空，则返回true，反正返回false   * size():返回链表包含的元素个数,与数组的length属性类似   *    */</span>  <span class="token comment">// append(element):像列表尾部添加一个新的项</span>  <span class="token function">append</span><span class="token punctuation">(</span><span class="token parameter">element</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> node <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>head <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>head <span class="token operator">=</span> node<span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>tail <span class="token operator">=</span> node<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">let</span> current <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>head<span class="token punctuation">;</span>      <span class="token keyword">while</span> <span class="token punctuation">(</span>current<span class="token punctuation">.</span>next <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        current <span class="token operator">=</span> current<span class="token punctuation">.</span>next<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      current<span class="token punctuation">.</span>next <span class="token operator">=</span> node<span class="token punctuation">;</span>      node<span class="token punctuation">.</span>prev <span class="token operator">=</span> current<span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>tail <span class="token operator">=</span> node<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token operator">++</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// insert(position, element):像列表的特定位置插入一个新的项</span>  <span class="token function">insert</span><span class="token punctuation">(</span><span class="token parameter">position<span class="token punctuation">,</span> element</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>position <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> position <span class="token operator">></span> <span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">const</span> node <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>position <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      node<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>head<span class="token punctuation">;</span>      node<span class="token punctuation">.</span>next<span class="token punctuation">.</span>prev <span class="token operator">=</span> node<span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>head <span class="token operator">=</span> node<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">let</span> current <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>head<span class="token punctuation">;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> position<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        current <span class="token operator">=</span> current<span class="token punctuation">.</span>next<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>position <span class="token operator">===</span> <span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        current<span class="token punctuation">.</span>next <span class="token operator">=</span> node<span class="token punctuation">;</span>        node<span class="token punctuation">.</span>prev <span class="token operator">=</span> current<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>tail <span class="token operator">=</span> node<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        node<span class="token punctuation">.</span>next <span class="token operator">=</span> current<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        current<span class="token punctuation">.</span>next <span class="token operator">=</span> node<span class="token punctuation">;</span>        node<span class="token punctuation">.</span>prev <span class="token operator">=</span> current<span class="token punctuation">;</span>        node<span class="token punctuation">.</span>next<span class="token punctuation">.</span>prev <span class="token operator">=</span> node<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token operator">++</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// get(position):获取对应位置的元素</span>  <span class="token function">get</span><span class="token punctuation">(</span>position<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>position <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> position <span class="token operator">></span> <span class="token keyword">this</span><span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token boolean">false</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">let</span> current <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>head<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> position<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      current <span class="token operator">=</span> current<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> current<span class="token punctuation">.</span>element<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// indexof(element):返回元素在列表中的索引，如果列表中没有则返回-1</span>  <span class="token function">indexof</span><span class="token punctuation">(</span><span class="token parameter">element</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>element <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">let</span> current <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>head<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>current<span class="token punctuation">.</span>element <span class="token operator">===</span> element<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> i<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        current <span class="token operator">=</span> current<span class="token punctuation">.</span>next<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// updata(position, element):修改某个位置的元素</span>  <span class="token function">updata</span><span class="token punctuation">(</span><span class="token parameter">position<span class="token punctuation">,</span> element</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>position <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> position <span class="token operator">></span> <span class="token keyword">this</span><span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token boolean">false</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">let</span> current <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>head<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>position <span class="token operator">===</span> i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        current<span class="token punctuation">.</span>element <span class="token operator">=</span> element<span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      current <span class="token operator">=</span> current<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// removeAt(position):从列表的特定位置移除一项</span>  <span class="token function">removeAt</span><span class="token punctuation">(</span><span class="token parameter">position</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>position <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> position <span class="token operator">></span> <span class="token keyword">this</span><span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token boolean">false</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>position <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">let</span> pre <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>head<span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>head <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>head<span class="token punctuation">.</span>prev <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>      pre<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token operator">--</span><span class="token punctuation">;</span>      <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">let</span> current <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token keyword">let</span> pre <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>head<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>position <span class="token operator">===</span> i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>position <span class="token operator">===</span> <span class="token keyword">this</span><span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          current<span class="token punctuation">.</span>prev <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>          pre<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token operator">--</span><span class="token punctuation">;</span>          <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>          pre<span class="token punctuation">.</span>next <span class="token operator">=</span> current<span class="token punctuation">.</span>next<span class="token punctuation">;</span>          pre<span class="token punctuation">.</span>next<span class="token punctuation">.</span>prev <span class="token operator">=</span> pre<span class="token punctuation">;</span>          current<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>          current<span class="token punctuation">.</span>prev <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token operator">--</span><span class="token punctuation">;</span>          <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>      pre <span class="token operator">=</span> current<span class="token punctuation">;</span>      current <span class="token operator">=</span> current<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// remove(element):从列表中移除特定项</span>  <span class="token function">remove</span><span class="token punctuation">(</span><span class="token parameter">element</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> position <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">indexof</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>position <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">removeAt</span><span class="token punctuation">(</span>position<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// isEmpty():如果链表为空，则返回true，反正返回false</span>  <span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// size():返回链表包含的元素个数,与数组的length属性类似</span>  <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>测试</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> DoubLinkedList <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./doubly_linked_list'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> doublinkedlist <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DoubLinkedList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>doublinkedlist<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">'aaa'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// doublinkedlist.append('bbb');</span><span class="token comment">// doublinkedlist.append('ccc');</span><span class="token comment">// doublinkedlist.append('ddd');</span>doublinkedlist<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'bbb'</span><span class="token punctuation">)</span>doublinkedlist<span class="token punctuation">.</span><span class="token function">removeAt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>doublinkedlist<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="哈希表"><a href="#哈希表" class="headerlink" title="哈希表"></a>哈希表</h2><ul><li><p>哈希表通常基于<strong>数组</strong>进行实现</p></li><li><p>相对于数组，有很多的优势</p><ul><li>可以提供非常快速的<strong>插入-删除-查找操作</strong></li><li>无论多少数据，插入和删除需要接近常量的时间，即O(1)的时间级，实际上，只需要<strong>几个机器指令</strong>就可以完成。</li><li>哈希表的速度比<strong>树还要块</strong>，基本可以瞬间查找到想要的元素<ul><li>O(1)的复杂度，而树为O(log(n))的复杂度</li></ul></li><li>哈希表相对于树来说编码要容易得多</li></ul></li><li><p>相对于数组的一些不足</p><ul><li>哈希表中的数据是<strong>没有顺序</strong>的，所以不能以一种固定的方式(比如从小到大)来遍历其中的元素</li><li>通常情况下，哈希表中的key是<strong>不允许重复</strong>的</li></ul></li><li><p>理解哈希表</p><ul><li>它的结构就是数组，但是神奇的地方在于对下标值的一种变换，这种变换可以成为<strong>哈希函数</strong>，函数可以获取HashCode。</li><li>向让数组下标跟名称之间有一种关系<ul><li>即将字符串转成下标值<ul><li>普通转换数字相加，利用ASCII码，空格用0 代替，但是，重复率太高</li><li>幂的连乘转换，数组范围太大，没有意义</li></ul></li><li>哈希化<ul><li>将幂的连乘系统中的巨大整数范围压缩到可接受的数组范围内<ul><li>取余</li></ul></li><li>实现哈希化的函数，就称为<strong>哈希函数</strong></li></ul></li><li>冲突 <strong>不可避免</strong>，我们只能<strong>解决冲突</strong><ul><li>比如melioration这个单词，通过哈希函数得到它数组的下标值后，发现那个位置上已经存在一个单词demystify</li><li>这种情况我们称为冲突</li></ul></li><li>如何解决冲突？<ul><li>链地址法<ul><li>在数据单元中不再存储单个数据，而是存放一个链条，常见使用数据或者链表。 </li></ul></li><li>开放地址法<ul><li>寻找空白的单元格来添加重复的数据<ul><li>线性探测<ul><li>步长为1</li><li>删除时，不能将内容设为null, 可以设为 -1</li><li>容易产生聚焦问题，非常影响性能</li></ul></li><li>二次探测<ul><li>步长为x+1^2 , x+ 2^2, x+3^2</li><li>步长不一的一种聚集，影响性能</li></ul></li><li>再哈希法<ul><li>把关键字用另外一个哈希函数，再做一次哈希化，用这次哈希化的结果作为步长</li><li>对于指定的关键字，步长在整个探测中是不变的，不同的关键字使用不同的步长</li></ul></li></ul></li></ul></li><li>装填因子<ul><li>表示当前哈希表中已经包含的数据项和整个哈希表长度的比值</li><li>装填因子 = 总数据项/哈希表长度。</li></ul></li></ul></li></ul></li></ul></li><li><p>优秀的哈希函数</p><ul><li>快速的计算<ul><li>尽量减少乘法和除法，因为它们性能比较低</li></ul></li><li>均匀的分布</li></ul></li><li><p>采用质数的原因</p><ul><li>为了产生的数据不按照某种规律递增</li><li>建议两处使用质数<ul><li>哈希表中数组的长度</li><li>N次幂的底数</li></ul></li></ul></li><li><p>什么情况下扩容？</p><ul><li>常见的情况是装填因子大于0.75时，对哈希表进行扩容</li><li>比如Java的哈希表，就是在装填因子大于0.75的时候，对哈希表进行扩容</li></ul></li><li><p>手写代码</p></li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token constant">MAX_LOAD_FACTTOR</span> <span class="token operator">=</span> <span class="token number">0.75</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token constant">MIN_LOAD_FACTTOR</span> <span class="token operator">=</span> <span class="token number">0.25</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">hash_Func</span><span class="token punctuation">(</span><span class="token parameter">str<span class="token punctuation">,</span> max</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> hashCode <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> str<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    hashCode <span class="token operator">=</span> <span class="token number">31</span> <span class="token operator">*</span> hashCode <span class="token operator">+</span> str<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  hashCode <span class="token operator">=</span> hashCode <span class="token operator">%</span> max<span class="token punctuation">;</span>  <span class="token keyword">return</span> hashCode<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token keyword">class</span> <span class="token class-name">HashTable</span> <span class="token punctuation">&#123;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>storage <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 用来存数据</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 用来记录存放元素的个数</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>limit <span class="token operator">=</span> <span class="token number">11</span><span class="token punctuation">;</span> <span class="token comment">// 数组的最大个数</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// put (key, value); 增加或修改元素</span>  <span class="token function">put</span><span class="token punctuation">(</span><span class="token parameter">key<span class="token punctuation">,</span> value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 获得下标索引</span>    <span class="token keyword">const</span> index <span class="token operator">=</span> <span class="token function">hash_Func</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>limit<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 取出数组</span>    <span class="token keyword">let</span> bucket <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>storage<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>bucket <span class="token operator">===</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      bucket <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>storage<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> bucket<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 判断是修改还是增加元素</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> bucket<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">let</span> tuple <span class="token operator">=</span> bucket<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>tuple<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">===</span> key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        tuple<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 如果运行到这里说明是新增</span>    bucket<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span>key<span class="token punctuation">,</span> value<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>count<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>count <span class="token operator">/</span> <span class="token keyword">this</span><span class="token punctuation">.</span>limit <span class="token operator">></span> <span class="token constant">MAX_LOAD_FACTTOR</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">risize</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getPrime</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>limit <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// get (key) 获取元素</span>  <span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 获取下标值</span>    <span class="token keyword">const</span> index <span class="token operator">=</span> <span class="token function">hash_Func</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>limit<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> bucket <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>storage<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>bucket<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> bucket<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> tuple <span class="token operator">=</span> bucket<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>tuple<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">===</span> key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">return</span> tuple<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">//  存在疑问，如果不为空，则肯定有值</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// remove (key) 删除元素,并将删除元素返回</span>  <span class="token function">remove</span><span class="token punctuation">(</span><span class="token parameter">key</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> index <span class="token operator">=</span> <span class="token function">hash_Func</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>limit<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> bucket <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>storage<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>bucket<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> bucket<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> tuple <span class="token operator">=</span> bucket<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>tuple<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">===</span> key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token comment">// return tuple[1];</span>          bucket<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>count<span class="token operator">--</span><span class="token punctuation">;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token keyword">this</span><span class="token punctuation">.</span>limit <span class="token operator">></span> <span class="token number">11</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>count <span class="token operator">/</span> <span class="token keyword">this</span><span class="token punctuation">.</span>limit <span class="token operator">&lt;</span> <span class="token constant">MIN_LOAD_FACTTOR</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">risize</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getPrime</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>limit <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>          <span class="token keyword">return</span> tuple<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment">//  存在疑问，如果不为空，则肯定有值</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 判断当前哈希表是否为空isEmpty()</span>  <span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>count <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// size() 判断当前哈希表内的元素个数</span>  <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>count<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// risize (newLimit) 扩容或者缩小</span>  <span class="token function">risize</span><span class="token punctuation">(</span><span class="token parameter">newLimit</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> oldStorage <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>storage<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>limit <span class="token operator">=</span> newLimit<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>storage <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    oldStorage<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">bucket</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>bucket <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> bucket<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> tuple <span class="token operator">=</span> bucket<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>tuple<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> tuple<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token function">isPrime</span><span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> temp <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">sqrt</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> temp<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">%</span> i <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">getPrime</span><span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">isPrime</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      num<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> num<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>测试</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> HashTable <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./hash_table'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> hashtable <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashTable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>hashtable<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"chichi"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>hashtable<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">,</span> <span class="token string">"18"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>hashtable<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"gender"</span><span class="token punctuation">,</span> <span class="token string">"0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>hashtable<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"cba"</span><span class="token punctuation">,</span> <span class="token string">"study"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>hashtable<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"zsf"</span><span class="token punctuation">,</span> <span class="token string">"study"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>hashtable<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"hjz"</span><span class="token punctuation">,</span> <span class="token string">"study"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>hashtable<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"syb"</span><span class="token punctuation">,</span> <span class="token string">"study"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>hashtable<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"zwz"</span><span class="token punctuation">,</span> <span class="token string">"study"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>hashtable<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"zlq"</span><span class="token punctuation">,</span> <span class="token string">"study"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>hashtable<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"zh"</span><span class="token punctuation">,</span> <span class="token string">"study"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>hashtable<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// hashtable.put("name", "chichisky");</span><span class="token comment">// console.log(hashtable.get("name"));</span><span class="token comment">// console.log(hashtable.get("age"));</span><span class="token comment">// console.log(hashtable.get("hobby"));</span><span class="token comment">// console.log(hashtable.get("abc"));</span>hashtable<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>hashtable<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>hashtable<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token string">"hjz"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>hashtable<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token string">"zh"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>hashtable<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token string">"zsf"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>hashtable<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token string">"zlq"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>hashtable<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token string">"syb"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>hashtable<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// console.log(hashtable);</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="树"><a href="#树" class="headerlink" title="树"></a>树</h2><h3 id="树的术语"><a href="#树的术语" class="headerlink" title="树的术语"></a>树的术语</h3><ul><li>节点的度<ul><li>节点的子树个数</li></ul></li><li>树的度<ul><li>树的所有节点中最大的度数</li></ul></li><li>叶节点<ul><li>度为零的节点</li></ul></li><li>父节点<ul><li>有子树的节点是其子树的根节点的父节点</li></ul></li><li>子节点<ul><li>若A节点是B节点的父节点，则称B节点是A节点的子节点</li></ul></li><li>兄弟节点<ul><li>具有同一父节点的各节点彼此是兄弟节点</li></ul></li><li>路径和路径长度<ul><li>从节点n1到nk的路径为一个节点序列n1,n2,…,nk,ni是ni+1的父节点，路径所包含的边的个数为路径的长度</li></ul></li><li>节点的层次<ul><li>规定根节点在1层，其他任意节点的层数是其父节点的层数加一</li></ul></li><li>树的深度<ul><li>树中所有节点中的最大层数是这棵树的深度</li></ul></li></ul><ul><li>所有的树都可以用二叉树表现出来</li><li>一个二叉树第i层的最大节点数为：2^(i-1),  i &gt;= 1</li><li>深度为k的二叉树有最大节点总数为：2^k - 1,  k &gt;= 1</li><li>对任何非空二叉树T，若n0表示叶节点的个数、n2是度为2的非叶节点个数，那么两者满足n0 = n2 + 1;</li></ul><h3 id="二叉搜索树"><a href="#二叉搜索树" class="headerlink" title="二叉搜索树"></a>二叉搜索树</h3><ul><li><p>也称二叉排序树，或二叉查找树</p></li><li><p>二叉搜索树是一颗二叉树，可以为空</p></li><li><p>如果不为空，则满足以下<strong>性质</strong></p><ul><li>非空左子树的所有键值小于其根节点的键值</li><li>非空右子树的所有键值大于其根节点的键值</li></ul></li><li><p>二叉搜索树的特点</p><ul><li>相对较小的值总是保存在左节点上，相对较大的值总是保存在右节点上</li></ul></li><li><p>遍历方式</p><ul><li>先序遍历<ul><li>访问根节点</li><li>先序遍历其左子树</li><li>先序遍历其右子树</li></ul></li><li>中序遍历<ul><li>中序遍历其左子树</li><li>访问根节点</li><li>中序遍历其右子树</li></ul></li><li>后序遍历<ul><li>后序遍历其左子树</li><li>后序遍历其右子树</li><li>访问根节点</li></ul></li></ul></li><li><p>手写</p></li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Node</span> <span class="token punctuation">&#123;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">key</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>key <span class="token operator">=</span> key<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token keyword">class</span> <span class="token class-name">BinarySearchTree</span> <span class="token punctuation">&#123;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>root <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">/**   * insert(key): 像树中插入一个新的键   * preOrderTraverse: 通过先序遍历方式遍历所有节点   * inOrderTraverse: 通过中序遍历方式遍历所有节点   * postOrderTraverse: 通过后序遍历方式遍历所有节点   * min：返回树中最小的值/键   * max：返回树中最大的值/键   * search(key): 在树中查找一个键，如果节点存在，则返回true，否则返回false   * remove(key): 从树中移除某个键   */</span>  <span class="token function">insert</span><span class="token punctuation">(</span><span class="token parameter">key</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> node <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//  if 是一个空的二叉树</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>root <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>root <span class="token operator">=</span> node<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">insertNode</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>root<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">insertNode</span><span class="token punctuation">(</span><span class="token parameter">node<span class="token punctuation">,</span> newNode</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>newNode<span class="token punctuation">.</span>key <span class="token operator">></span> node<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>right <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        node<span class="token punctuation">.</span>right <span class="token operator">=</span> newNode<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">insertNode</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">,</span> newNode<span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>left <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        node<span class="token punctuation">.</span>left <span class="token operator">=</span> newNode<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">insertNode</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">,</span> newNode<span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 先序遍历</span>  <span class="token function">preOrderTraverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">preOrderTraverseNode</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">preOrderTraverseNode</span><span class="token punctuation">(</span><span class="token parameter">node</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span>    <span class="token punctuation">&#125;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">preOrderTraverseNode</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">preOrderTraverseNode</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 中序遍历</span>  <span class="token function">inOrderTraverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">inOrderTraverseNode</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>root<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token function">inOrderTraverseNode</span><span class="token punctuation">(</span><span class="token parameter">node</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">inOrderTraverseNode</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">inOrderTraverseNode</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 后序遍历</span>  <span class="token function">postOrderTraverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">postOrderTraverseNode</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>root<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token function">postOrderTraverseNode</span><span class="token punctuation">(</span><span class="token parameter">node</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">postOrderTraverseNode</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">postOrderTraverseNode</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">min</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> node <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>root<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>left <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      node <span class="token operator">=</span> node<span class="token punctuation">.</span>left<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> node<span class="token punctuation">.</span>key  <span class="token punctuation">&#125;</span>  <span class="token function">max</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> node <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>root<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>right <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      node <span class="token operator">=</span> node<span class="token punctuation">.</span>right<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> node<span class="token punctuation">.</span>key  <span class="token punctuation">&#125;</span>  <span class="token function">search</span><span class="token punctuation">(</span><span class="token parameter">key</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">searchNode</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>root<span class="token punctuation">,</span> key<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token function">searchNode</span><span class="token punctuation">(</span><span class="token parameter">node<span class="token punctuation">,</span> key</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>key <span class="token operator">===</span> key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">></span> node<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">searchNode</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">searchNode</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">search2</span><span class="token punctuation">(</span><span class="token parameter">key</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> node <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>root<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>node <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">></span> node<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        node <span class="token operator">=</span> node<span class="token punctuation">.</span>right<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">&lt;</span> node<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        node <span class="token operator">-</span> node<span class="token punctuation">.</span>left<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">remove</span><span class="token punctuation">(</span><span class="token parameter">key</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> current <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>root<span class="token punctuation">;</span>    <span class="token keyword">let</span> parent <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> isLeftChild <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>current<span class="token punctuation">.</span>key <span class="token operator">!==</span> key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      parent <span class="token operator">=</span> current      <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">></span> current<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        current <span class="token operator">=</span> current<span class="token punctuation">.</span>right<span class="token punctuation">;</span>        isLeftChild <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        current <span class="token operator">=</span> current<span class="token punctuation">.</span>left<span class="token punctuation">;</span>        isLeftChild <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>current <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">removeNode</span><span class="token punctuation">(</span>parent<span class="token punctuation">,</span> current<span class="token punctuation">,</span> isLeftChild<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">removeNode</span><span class="token punctuation">(</span><span class="token parameter">parent<span class="token punctuation">,</span> node<span class="token punctuation">,</span> isLeftChild</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>left <span class="token operator">===</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> node<span class="token punctuation">.</span>right <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">===</span> <span class="token keyword">this</span><span class="token punctuation">.</span>root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>root <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>isLeftChild<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          parent<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>          parent<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>left <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">===</span> <span class="token keyword">this</span><span class="token punctuation">.</span>root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>root <span class="token operator">=</span> node<span class="token punctuation">.</span>right<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>isLeftChild<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          parent<span class="token punctuation">.</span>left <span class="token operator">=</span> node<span class="token punctuation">.</span>right<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>          parent<span class="token punctuation">.</span>right <span class="token operator">=</span> node<span class="token punctuation">.</span>right<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>right <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">===</span> <span class="token keyword">this</span><span class="token punctuation">.</span>root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>root <span class="token operator">=</span> node<span class="token punctuation">.</span>left<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>isLeftChild<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          parent<span class="token punctuation">.</span>left <span class="token operator">=</span> node<span class="token punctuation">.</span>left<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>          parent<span class="token punctuation">.</span>right <span class="token operator">=</span> node<span class="token punctuation">.</span>left<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">let</span> nodeRight <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getNodeRight</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">===</span> <span class="token keyword">this</span><span class="token punctuation">.</span>root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>root <span class="token operator">=</span> nodeRight<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>isLeftChild<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          parent<span class="token punctuation">.</span>left <span class="token operator">=</span> nodeRight<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>          parent<span class="token punctuation">.</span>right <span class="token operator">=</span> nodeRight<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">getNodeRight</span><span class="token punctuation">(</span><span class="token parameter">node</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> nodeRightParent <span class="token operator">=</span> node<span class="token punctuation">;</span>    <span class="token keyword">let</span> nodeRight <span class="token operator">=</span> node<span class="token punctuation">;</span>    <span class="token keyword">let</span> current <span class="token operator">=</span> node<span class="token punctuation">.</span>right<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>current <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      nodeRightParent <span class="token operator">=</span> nodeRight<span class="token punctuation">;</span>      nodeRight <span class="token operator">=</span> current<span class="token punctuation">;</span>      current <span class="token operator">=</span> current<span class="token punctuation">.</span>left<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 此时，nodeRight等于右子树的最左节点</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>nodeRight <span class="token operator">!==</span> node<span class="token punctuation">.</span>right<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      nodeRightParent<span class="token punctuation">.</span>left <span class="token operator">=</span> nodeRight<span class="token punctuation">.</span>right<span class="token punctuation">;</span>      nodeRight<span class="token punctuation">.</span>right <span class="token operator">=</span> node<span class="token punctuation">.</span>right<span class="token punctuation">;</span>      nodeRight<span class="token punctuation">.</span>left <span class="token operator">=</span> node<span class="token punctuation">.</span>left<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> nodeRight<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>测试</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> BinarySearchTree <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./tree'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> bst <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BinarySearchTree</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>bst<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">19</span><span class="token punctuation">)</span>bst<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">56</span><span class="token punctuation">)</span>bst<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">45</span><span class="token punctuation">)</span>bst<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>bst<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>bst<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">34</span><span class="token punctuation">)</span>bst<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span>bst<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">)</span>bst<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span>bst<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">17</span><span class="token punctuation">)</span>bst<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">24</span><span class="token punctuation">)</span>bst<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">37</span><span class="token punctuation">)</span>bst<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">)</span>bst<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">47</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>bst<span class="token punctuation">)</span><span class="token punctuation">;</span>bst<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token number">56</span><span class="token punctuation">)</span><span class="token punctuation">;</span>bst<span class="token punctuation">.</span><span class="token function">inOrderTraverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="红黑树"><a href="#红黑树" class="headerlink" title="红黑树"></a>红黑树</h3><ul><li>红黑树的特性<ul><li>节点是红色或黑色</li><li>跟节点是黑色</li><li>每个叶子节点都是黑色的空节点（NIL节点）</li><li>每个红色节点的两个子节点都是黑哥，（从每个叶子到跟的所有路径上不能有两个连续的红色节点）</li><li>从任一节点到其每个叶子的所有路径都包含相同数目的黑色节点</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS数据结构和算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript 学习</title>
      <link href="2021/05/05/javascript/"/>
      <url>2021/05/05/javascript/</url>
      
        <content type="html"><![CDATA[<p>JavaScript 学习笔记 <span id="more"></span></p><h1 id="JavaScript-学习笔记"><a href="#JavaScript-学习笔记" class="headerlink" title="JavaScript 学习笔记"></a>JavaScript 学习笔记</h1><ul><li><p>特点</p><ul><li>解释执行，(一句一句编译)</li><li>灵活，动态特性，可以随意给对象增加属性和方法</li><li>头等函数，函数在JS中是一等公民</li><li>执行环境，宿主环境（浏览器、Node）</li></ul></li><li><p>作用</p><ul><li>JavaScript主要用于读写HTML元素、在网页中嵌入动态文本、动态修改CSS样式表；<br>对浏览器事件做出响应、表单数据验证、检测访客的浏览器信息等等</li></ul></li><li><p>构成</p><ul><li>核心 ( ECMAScript )</li><li>文档对象模型 ( DOM )</li><li>浏览器对象模型 ( BOM )</li></ul></li></ul><h2 id="一、-ECMAScript"><a href="#一、-ECMAScript" class="headerlink" title="一、 ECMAScript"></a>一、 ECMAScript</h2><ul><li><p>严格模式 “use strict”</p></li><li><p>推荐末尾加上分号；</p></li></ul><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><ul><li>变量是一个‘容器’</li><li>变量存储在内存中，简单数据存在栈内容中，复杂数据存在堆内存中</li></ul><h4 id="基本类型"><a href="#基本类型" class="headerlink" title="基本类型"></a>基本类型</h4><h5 id="Array"><a href="#Array" class="headerlink" title="Array"></a>Array</h5><ul><li>push()<ul><li>在数组的最后添加一个元素</li></ul></li></ul><h3 id="事件流的三个阶段"><a href="#事件流的三个阶段" class="headerlink" title="事件流的三个阶段"></a>事件流的三个阶段</h3><ul><li>捕获：从外向内</li><li>执行目标阶段</li><li>冒泡：从内向外</li></ul><h2 id="二、DOM"><a href="#二、DOM" class="headerlink" title="二、DOM"></a>二、DOM</h2><ul><li>常见的输入输出语句<ul><li>alert()：浏览器弹出提示框，输出</li><li>document.write()：向页面输出内容</li><li>prompt()：弹出一个对话框，让用户输入</li></ul></li></ul><h3 id="JS模式"><a href="#JS模式" class="headerlink" title="JS模式"></a>JS模式</h3><ul><li>单例模式<ul><li>需要创建多个对象的场景下，通过一个变量接收，始终保持只有一个对象</li><li>节省内存空间</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
